<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Windows Insider Preview on Blog de Christian Amado</title><link>https://cmas.dev/tags/windows-insider-preview/</link><description>Recent content in Windows Insider Preview on Blog de Christian Amado</description><generator>Hugo -- gohugo.io</generator><language>es</language><managingEditor>biz@cmas.dev (Christian Amado)</managingEditor><webMaster>biz@cmas.dev (Christian Amado)</webMaster><lastBuildDate>Wed, 08 Jun 2022 18:07:00 -0400</lastBuildDate><atom:link href="https://cmas.dev/tags/windows-insider-preview/index.xml" rel="self" type="application/rss+xml"/><item><title>Desarrollo de aplicaciones NodeJs en WSL</title><link>https://cmas.dev/posts/2022-06-08-app-nodejs-in-wsl/</link><pubDate>Wed, 08 Jun 2022 18:07:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-06-08-app-nodejs-in-wsl/</guid><description>&lt;p>En este artículo mostraré como instalar &lt;strong>Node.js&lt;/strong> en &lt;strong>WSL&lt;/strong>. También, veremos como escribir código, compilar y ejecutarlo en &lt;strong>WSL&lt;/strong> desde &lt;strong>Visual Studio Code&lt;/strong>.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25131&lt;/strong>&lt;/em>&lt;/p>
&lt;p>En Windows 11, especificamente gracias a &lt;strong>WSL - Windows Subssytem for Linux&lt;/strong> podemos instalar y ejecutar aplicaciones desarrolladas con &lt;strong>Node.js&lt;/strong> de manera bastante sencilla y rápida.&lt;/p>
&lt;h2 id="instalar-nodejs-en-wsl">Instalar Node.js en WSL&lt;/h2>
&lt;p>Preparamos WSL para la instalación de Node.js&lt;/p>
&lt;ol>
&lt;li>Verificamos las versiones de Node.js y NVM que tenemos instaladas (se supone que no las tenemos):
&lt;img src="https://cmas.dev/img/posts/2022/06/08/1.png" alt="">&lt;/li>
&lt;li>Procedemos a instalar NVM (Node Version Manager):&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Ahora, instalamos la última versión de Node.js:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">nvm install node
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Verificamos las versiones y listo:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/2.png" alt="">&lt;/li>
&lt;/ol>
&lt;h2 id="aplicacion-en-visual-studio-code">Aplicacion en Visual Studio Code&lt;/h2>
&lt;p>Dentro del Visual Studio Code creamos la aplicación y procedemos a ejecutarla normalmente.&lt;/p>
&lt;ol>
&lt;li>Creamos un archivo &lt;strong>app.js&lt;/strong>&lt;/li>
&lt;li>Escribimos las siguientes líneas de código:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">var http = require(&amp;#39;http&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">http.createServer(function (req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.writeHead(200, {&amp;#39;Content-Type&amp;#39;: &amp;#39;text/plain&amp;#39;});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.end(&amp;#39;Hola desde cmas.dev!&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}).listen(8080);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Presionamos la tecla &lt;em>F5&lt;/em> y seleccionamos la opción &lt;strong>Node.js&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/4.png" alt="">&lt;/li>
&lt;li>Veremos los controles de depuración y en la consola veremos que ha creado la aplicación:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/5.png" alt="">&lt;/li>
&lt;li>En el navegador de preferencia, colocamos la URL definida en el código y vermeos nuestro pequeña applicación:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/6.png" alt="">&lt;/li>
&lt;/ol>
&lt;h2 id="aplicacion-en-visual-studio-code-con-wsl">Aplicacion en Visual Studio Code con WSL&lt;/h2>
&lt;p>Dentro del Visual Studio Code creamos la aplicación y procedemos a ejecutarla en WSL.&lt;/p>
&lt;ol>
&lt;li>Descargar la extensión para desarrollo remoto &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">aquí&lt;/a>&lt;/li>
&lt;li>Abrimos una nueva ventana de Visual Studio Code y hacemos clicn en el icono de acceso remoto:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/7.png" alt="">&lt;/li>
&lt;li>Seleccionamos la opción de distro para WSL:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/8.png" alt="">&lt;/li>
&lt;li>Marcamos la opción Ubuntu:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/9.png" alt="">&lt;/li>
&lt;li>Abrimos la carpeta donde almacenaremos el proyecto (en Ubuntu):
&lt;img src="https://cmas.dev/img/posts/2022/06/08/10.png" alt="">&lt;/li>
&lt;li>Escribimos las siguientes líneas de código (con algunas diferencias del código anterior):&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">var http = require(&amp;#39;http&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">http.createServer(function (req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.writeHead(200, {&amp;#39;Content-Type&amp;#39;: &amp;#39;text/plain&amp;#39;});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.end(&amp;#39;¡Hola desde cmas.dev y WSL!&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}).listen(8081);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="7">
&lt;li>Ejecutamos la aplicación desde la Terminal de &lt;strong>Ubuntu&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/12.png" alt="">&lt;/li>
&lt;li>Abrimos el navegador y colocamos la dirección que especificamos en el código:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/13.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>De esta manera hemos realizado una aplicación NodeJs en &lt;strong>Windows&lt;/strong> directamente así como en &lt;strong>WSL&lt;/strong>. Ambas opciones son válidas, nada más depende de la elección del desarrollador.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>WSL: Ejecutar aplicaciones con GUI Linux</title><link>https://cmas.dev/posts/2022-06-01-wsl-run-apps-gui-ubuntu/</link><pubDate>Wed, 01 Jun 2022 18:32:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-06-01-wsl-run-apps-gui-ubuntu/</guid><description>&lt;p>En este artículo mostraré cómo utilizar aplicaciones Linux (con interfaz de usuario) gracias a &lt;strong>Windows Subsystem for Linux&lt;/strong> .&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22621&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Es cierto que &lt;strong>Windows&lt;/strong> posee muchas y muy buenas aplicaciones gráficas (de hecho está basado en eso), pero Ubuntu también tiene aplicaciones muy buenas y con performance mejorada.&lt;/p>
&lt;h2 id="instalar-vlc">Instalar VLC&lt;/h2>
&lt;p>En este caso instalaremos el reproductor multimedia VLC:&lt;/p>
&lt;ol>
&lt;li>Nos dirigimos a Ubuntu &lt;strong>Windows Subsystem for Linux&lt;/strong>
&lt;img src="https://cmas.dev/img/posts/2022/06/01/1.png" alt="">&lt;/li>
&lt;li>Colocamos el comando que instala la aplicación con &lt;strong>apt&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt install vlc -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Procede a instalar y nos arroja el resultado:
&lt;img src="https://cmas.dev/img/posts/2022/06/01/2.png" alt="">&lt;/li>
&lt;li>Colocamos el comando que ejecuta la aplicación y&amp;hellip;&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">vlc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Veremos la aplicación ejecutada:
&lt;img src="https://cmas.dev/img/posts/2022/06/01/3.png" alt="">&lt;/li>
&lt;li>Si buscamos la App desde el Menú Inicio de &lt;strong>Windows&lt;/strong> la encontraremos:
&lt;img src="https://cmas.dev/img/posts/2022/06/01/4.png" alt="">&lt;/li>
&lt;li>La aplicación se ejecuta de manera nativa en &lt;strong>Windows&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/06/01/5.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Desarrollo en Windows App SDK</title><link>https://cmas.dev/posts/2022-05-18-windows-app-sdk-development/</link><pubDate>Wed, 18 May 2022 21:56:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-05-18-windows-app-sdk-development/</guid><description>&lt;p>En este articulo, mostraré cómo empezar con el desarrollo con Windows App SDK especialmente diseñado para Widnows 11 y ciertas versiones de Windows 10 (superior a la versión 1809).&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22621&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Entresacando un poco las definiciones desde la &lt;a href="https://learn.microsoft.com/es-es/windows/apps/windows-app-sdk/">página oficial de Microsoft&lt;/a> encontramos este resumen:&lt;/p>
&lt;blockquote>
&lt;p>Windows App SDK es un conjunto de nuevas herramientas y componentes para desarrolladores que representa la próxima evolución en la plataforma de desarrollo de aplicaciones de Windows. Windows App SDK proporciona un conjunto unificado de API y herramientas que cualquier aplicación de escritorio puede usar de forma coherente en Windows 11 y niveles inferiores hasta Windows 10, versión 1809.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Windows App SDK complementa estas herramientas y tipos de aplicación existentes con un conjunto común de API que los desarrolladores pueden utilizar en estas plataformas.&lt;/p>
&lt;/blockquote>
&lt;p>Con todo esto podemos ver las &lt;a href="https://learn.microsoft.com/es-es/windows/apps/windows-app-sdk/#windows-app-sdk-features">&lt;strong>características de Windows App SDK&lt;/strong>&lt;/a>.&lt;/p>
&lt;h1 id="creación-de-un-proyecto-winui">Creación de un proyecto WinUI&lt;/h1>
&lt;p>Para empezar a utilizar Windows App SDK, debemos crear una interfaz de usuario y eso se explica en el sitio oficial de Microsoft:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>WinUI 3&lt;/strong> es el componente de la plataforma de interfaz de usuario nativa que se incluye con el SDK de Aplicaciones para Windows (completamente desacoplado de los SDK de Windows). El SDK de Aplicaciones para Windows proporciona un conjunto unificado de API y herramientas que se pueden usar para crear aplicaciones de escritorio de producción destinadas a Windows 10 y versiones posteriores que se pueden publicar en Microsoft Store.&lt;/p>
&lt;/blockquote>
&lt;p>Para la creación del proyecto debemos realizar los siguientes pasos:&lt;/p>
&lt;ol>
&lt;li>Crear un proyecto de tipo &lt;strong>WinUI 3&lt;/strong>
&lt;img src="https://cmas.dev/img/posts/2022/05/18/1.png" alt="">&lt;/li>
&lt;li>Se coloca un nombre descriptivo para el proyecto:
&lt;img src="https://cmas.dev/img/posts/2022/05/18/2.png" alt="">&lt;/li>
&lt;li>Se crea el proyecto con los siguientes archivos:
&lt;img src="https://cmas.dev/img/posts/2022/05/18/3.png" alt="">&lt;/li>
&lt;li>Procedemos a ejecutar la aplicación (y se ejecutará en nuestro &lt;strong>Windows 11&lt;/strong> directamente):
&lt;img src="https://cmas.dev/img/posts/2022/05/18/4.png" alt="">&lt;/li>
&lt;li>Veremos la aplicación ejecutada:
&lt;img src="https://cmas.dev/img/posts/2022/05/18/5.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>Con esto logramos crear nuestra primera aplicación &lt;strong>WinUI 3&lt;/strong>.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>UWP en Windows 11</title><link>https://cmas.dev/posts/2022-05-11-uwp-in-windows-11/</link><pubDate>Wed, 11 May 2022 19:53:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-05-11-uwp-in-windows-11/</guid><description>&lt;p>En este artículo mostraré cómo crear una aplicación UWP (Universal Windows Platform) en Windows 11 (aunque ya debemos ir dejándola ;)).&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22621&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Los prerrequisitos para poder crear son:&lt;/p>
&lt;ol>
&lt;li>Visual Studio 2022.&lt;/li>
&lt;li>UWP habilitado para el desarrollo sobre Windows 11.&lt;/li>
&lt;li>Windows 11 ;)&lt;/li>
&lt;/ol>
&lt;h2 id="crear-una-aplicación-uwp">Crear una aplicación UWP&lt;/h2>
&lt;p>Para la creación del proyecto debemos seguir los siguientes pasos:&lt;/p>
&lt;ol>
&lt;li>Crear una nueva aplicación en Visual Studio:
&lt;img src="https://cmas.dev/img/posts/2022/05/11/1.png" alt="">&lt;/li>
&lt;li>Colocamos el nombre descriptivo para el nuevo proyecto:
&lt;img src="https://cmas.dev/img/posts/2022/05/11/2.png" alt="">&lt;/li>
&lt;li>Seleccionamos la versión del destino (En Windows 11):
&lt;img src="https://cmas.dev/img/posts/2022/05/11/3.png" alt="">&lt;/li>
&lt;li>Verificamos que el proyecto se haya creado correctamente:
&lt;img src="https://cmas.dev/img/posts/2022/05/11/4.png" alt="">&lt;/li>
&lt;li>Agregamos un control de prueba para poder ejecutarlo:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;Page
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Class=&amp;#34;UWP_Blog.MainPage&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:local=&amp;#34;using:UWP_Blog&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:d=&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:mc=&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mc:Ignorable=&amp;#34;d&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Background=&amp;#34;{ThemeResource ApplicationPageBackgroundThemeBrush}&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Grid&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;TextBlock Text=&amp;#34;Hola mundo, desde UWP y el Blog de Christian&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/Grid&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/Page&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>Ejecutamos la aplicación:
&lt;img src="https://cmas.dev/img/posts/2022/05/11/5.png" alt="">&lt;/li>
&lt;li>Voilá, tenemos nuestra primera app UWP para Windows 11:
&lt;img src="https://cmas.dev/img/posts/2022/05/11/6.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>Si bien es cierto, se recomienda que las aplicaciones para Windows sean creadas con WinUI, aún es posible desarrollarlas con UWP (pero es recomendable hacer la migración correspondiente).&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>WSL sin internet</title><link>https://cmas.dev/posts/2022-04-27-wsl-no-internet/</link><pubDate>Wed, 27 Apr 2022 12:26:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-04-27-wsl-no-internet/</guid><description>&lt;p>En este artículo mostraré cómo conectar a internet en &lt;strong>Windows Subsystem for Linux&lt;/strong> para cualquier distro (pero aquí siempre con Ubuntu) utilizando &lt;strong>Windows Terminal&lt;/strong>.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22598&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Debemos seguir algunos pasos sencillos para poder habilitar internet de manera permanente en nuestra distro preferida.&lt;/p>
&lt;h2 id="conexión-a-internet-en-windows-subsystem-for-linux">Conexión a internet en Windows Subsystem for Linux&lt;/h2>
&lt;p>Primero, hacemos ping a algún DNS (que tenga salida a internet):
&lt;img src="https://cmas.dev/img/posts/2022/04/27/wsl1.png" alt="">&lt;/p>
&lt;p>Entonces, debemos abrirl el archivo &lt;strong>resolv.conf&lt;/strong> que se encuentra en nuestro distro WSL:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">nano /etc/resolv.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Abrirá el editor y procedemos a verificar el dato presente allí:
&lt;img src="https://cmas.dev/img/posts/2022/04/27/wsl3.png" alt="">&lt;/p>
&lt;p>Esa IP es privada. ¡Quítala de allí! y usemos el DNS de Google:
&lt;img src="https://cmas.dev/img/posts/2022/04/27/wsl4.png" alt="">&lt;/p>
&lt;p>Probemos nuestro comando &lt;strong>ping&lt;/strong> a ver que ocurre:
&lt;img src="https://cmas.dev/img/posts/2022/04/27/wsl5.png" alt="">&lt;/p>
&lt;h2 id="configuración-permanente-para-acceso-a-internet">Configuración permanente para acceso a Internet&lt;/h2>
&lt;p>Como paso de prueba podemos salir de Ubuntu (emular el apagado de equipo desde &lt;strong>Windows Terminal&lt;/strong>, no desde Ubuntu):
&lt;img src="https://cmas.dev/img/posts/2022/04/27/wsl6.png" alt="">&lt;/p>
&lt;p>Iniciamos Ubuntu nuevamente y probamos &lt;strong>ping&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/04/27/wsl1.png" alt="">&lt;/p>
&lt;p>¡BOOM!&lt;/p>
&lt;p>Corregimos esto al estilo Ubuntu, con &lt;strong>Terminal&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo bash -c &amp;#39;echo -e &amp;#34;[network]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">generateResolvConf = false&amp;#34; &amp;gt; /etc/wsl.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -e &amp;#34;options timeout:1 attempts:1 rotate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nameserver 8.8.8.8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nameserver 8.8.4.4&amp;#34; &amp;gt; /etc/resolv.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chattr -f +i /etc/resolv.conf&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Con esto, logramos que todo funcione correctamente&amp;gt;
&lt;img src="https://cmas.dev/img/posts/2022/04/27/wsl5.png" alt="">&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Configurando mi ambiente WSL</title><link>https://cmas.dev/posts/2022-04-26-configuring-my-wsl-environment/</link><pubDate>Tue, 26 Apr 2022 20:41:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-04-26-configuring-my-wsl-environment/</guid><description>&lt;p>En este artículo mostraré cómo configurar un ambiente de desarrollo WSL (Windows Subsystem Linux) dentro de Windows para el desarrollo de aplicaciones en múltiples plataformas (que en el futuro iré asociando a este artículo). Para este artículo ya tenemos disponible la nueva distro de Ubuntu 22.04 (recientemente lanzada).&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22598&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Debemos seguir algunos pasos para poder habilitar el WSL (Windows Subsystem for Linux) en Windows 11. Es excelente esto para probar todo tipo de aplicaciones sin salir de Windows. Especialmente preparado para .NET Core :)&lt;/p>
&lt;h2 id="preparar-windows-subsystem-for-linux">Preparar Windows Subsystem for Linux&lt;/h2>
&lt;p>Para preparar la plataforma debemos seguir estos pasos:&lt;/p>
&lt;ol>
&lt;li>Nos dirigimos a &lt;strong>Panel de Control&lt;/strong> &amp;gt; &lt;strong>Programas&lt;/strong> &amp;gt; &lt;strong>Habilitar funcionalidades de Windows&lt;/strong>.&lt;/li>
&lt;li>Buscar la opción &lt;strong>Windows Subsystem for Linux&lt;/strong>, marcamos la opción y hacemos clic en &lt;strong>Aceptar&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/04/26/Wsl1.png" alt="">&lt;/li>
&lt;li>Cuando termine la instalación debemos reiniciar el sistema operativo y veremos este nuevo enlace en el &lt;strong>Explorador de archivos&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/04/26/Wsl2.png" alt="">&lt;/li>
&lt;/ol>
&lt;h2 id="instalamos-la-distro-de-preferencia">Instalamos la distro de preferencia&lt;/h2>
&lt;p>En mi caso selecciono Ubuntu, pero existen otras que se encuentran disponibles para su instalación. Aquí procedemos a instalar desde &lt;strong>Microsoft Store&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/04/26/Wsl3.png" alt="">&lt;/p>
&lt;p>Una vez que haya culminado la instalación, procedemos a abrir la nueva App (sí, se encuentra como una App):
&lt;img src="https://cmas.dev/img/posts/2022/04/26/Wsl4.png" alt="">&lt;/p>
&lt;h2 id="windows-terminal">Windows Terminal&lt;/h2>
&lt;p>Aquí es donde empezamos a disfrutar de nuestra distro de Linux favorita para empezar a jugar con ella.&lt;/p>
&lt;p>Creamos un usuario para nuestro sistema operativo Ubuntu (puede o no ser igual al usuario de Windows):
&lt;img src="https://cmas.dev/img/posts/2022/04/26/Wsl5.png" alt="">&lt;/p>
&lt;p>Por último, accedemos a la terminal de Ubuntu y realizamos las tareas que queramos dentro de Ubuntu, que está dentro de Windows 11.
&lt;img src="https://cmas.dev/img/posts/2022/04/26/Wsl6.png" alt="">&lt;/p>
&lt;p>Podemos verificar que distro estamos ejecutando:
&lt;img src="https://cmas.dev/img/posts/2022/04/26/Wsl7.png" alt="">&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Introducción a Windows Fluent Design System</title><link>https://cmas.dev/posts/2022-04-25-introduction-to-windows-fluent-system/</link><pubDate>Mon, 25 Apr 2022 19:22:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-04-25-introduction-to-windows-fluent-system/</guid><description>&lt;p>En este artículo intentaré enteder y explicar qué es &lt;strong>Windows Fluent Design System&lt;/strong>, por qué es Open Source, para qué se utiliza y que se puede lograr con esto.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22598&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Personalmente tengo muchas dudas y consultas sobre este punto. Hace un tiempo que veo esto pero no he tenido el tiempo para detenerme a investigar. Así que hagámos juntos el recorrido. Las consultas que me surgen son:&lt;/p>
&lt;ul>
&lt;li>¿Qué es?&lt;/li>
&lt;li>¿Para qué se utiliza?&lt;/li>
&lt;li>¿Por qué Microsoft apostó a este proyecto &lt;strong>Open Source&lt;/strong>?&lt;/li>
&lt;li>¿Qué beneficios tengo como desarrollador &lt;em>Windows&lt;/em>?&lt;/li>
&lt;li>¿Qué puedo lograr con esto?&lt;/li>
&lt;/ul>
&lt;h2 id="qué-es-windows-fluent-design-system">¿Qué es &lt;strong>Windows Fluent Design System&lt;/strong>?&lt;/h2>
&lt;p>&lt;strong>Fluent Design System&lt;/strong> es un sistema de diseño abierto y multiplataforma que ofrece a los diseñadores y desarrolladores los marcos que necesitan para crear experiencias de producto atractivas.&lt;/p>
&lt;p>&lt;strong>Fluent Design System&lt;/strong> es el sistema de diseño en evolución de Microsoft que se basa en cinco principios: &lt;strong>luz&lt;/strong>, &lt;strong>profundidad&lt;/strong>, &lt;strong>movimiento&lt;/strong>, &lt;strong>material&lt;/strong> y &lt;strong>escala&lt;/strong>. El objetivo es crear experiencias de usuario fluidas y adaptables a diferentes contextos y dispositivos.&lt;/p>
&lt;p>🤔&lt;/p>
&lt;h2 id="para-qué-windows-fluent-design-system">¿Para qué &lt;strong>Windows Fluent Design System&lt;/strong>?&lt;/h2>
&lt;p>Utilizaría &lt;strong>Fluent Design System&lt;/strong> para crear experiencias de producto atractivas y naturales en cada dispositivo. Algunos beneficios son:&lt;/p>
&lt;ol>
&lt;li>La accesibilidad se refiere a la capacidad de diseñar para todos los rangos de diversidad humana, reconociendo las exclusiones y usándolas como oportunidades para crear diseños inclusivos.&lt;/li>
&lt;li>La internacionalización se refiere a la capacidad de adaptar el diseño a diferentes idiomas, culturas y contextos.&lt;/li>
&lt;li>El rendimiento se refiere a la capacidad de optimizar el diseño para que funcione bien en diferentes dispositivos y plataformas.&lt;/li>
&lt;li>La coherencia entre los equipos de diseño y desarrollo se refiere a la capacidad de crear una fuente única de verdad entre todos los equipos de desarrollo de productos, trabajando con los mismos componentes y limitaciones.&lt;/li>
&lt;/ol>
&lt;p>Algunas posibles desventajas de usar &lt;strong>Fluent Design System&lt;/strong> son:&lt;/p>
&lt;ul>
&lt;li>Puede ser percibido como una copia de otros sistemas de diseño como &lt;em>iOS&lt;/em> o &lt;em>Material Design&lt;/em>.&lt;/li>
&lt;li>Puede ser incompleto y sin una fecha o hitos claros de lanzamiento.&lt;/li>
&lt;li>Puede requerir un aprendizaje y una adaptación constantes a medida que evoluciona.&lt;/li>
&lt;/ul>
&lt;h2 id="por-qué-microsoft-apostó-a-este-proyecto-open-source">¿Por qué Microsoft apostó a este proyecto &lt;strong>Open Source&lt;/strong>?&lt;/h2>
&lt;p>Microsoft posiblemente apostó a este proyecto &lt;strong>Open Source&lt;/strong> porque:&lt;/p>
&lt;ul>
&lt;li>Quería construir un sistema de diseño colectivo que aprovechara el impulso de las cosas geniales que ya estaban sucediendo en &lt;strong>Microsoft&lt;/strong>, sin pisar los pies a nadie.&lt;/li>
&lt;li>Quería celebrar a quienes contribuyen a lo que hace colectivamente la comunidad, sin importar en qué equipo trabajen.&lt;/li>
&lt;li>Quería crear experiencias de producto atractivas y adaptables a diferentes contextos y dispositivos.&lt;/li>
&lt;/ul>
&lt;h2 id="qué-beneficios-tengo-como-desarrollador-windows">¿Qué beneficios tengo como desarrollador &lt;em>Windows&lt;/em>?&lt;/h2>
&lt;p>Algunos beneficios que se tiene como desarrollador al usar &lt;strong>Fluent Design System&lt;/strong> son:&lt;/p>
&lt;ul>
&lt;li>Se puede crear aplicaciones hermosas y expresivas con el lenguaje de diseño &lt;strong>Fluent&lt;/strong>, con animaciones, desenfoque y fluidez.&lt;/li>
&lt;li>Se puede trabajar con los mismos componentes y limitaciones que los diseñadores, creando una fuente única de verdad entre todos los equipos de desarrollo de productos.&lt;/li>
&lt;li>Se puede aprovechar los marcos de trabajo que ofrece &lt;strong>Fluent&lt;/strong> para crear experiencias de producto atractivas e inclusivas en diferentes plataformas y dispositivos.&lt;/li>
&lt;/ul>
&lt;p>La relación entre &lt;strong>Fluent Design System&lt;/strong> y el desarrollador de software es la siguiente:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Fluent&lt;/strong> es un sistema de diseño abierto y multiplataforma que ofrece al desarrollador los marcos de trabajo necesarios para crear experiencias de producto atractivas e inclusivas en diferentes plataformas y dispositivos.&lt;/li>
&lt;li>&lt;strong>Fluent&lt;/strong> es independiente de cualquier tecnología de implementación particular, lo que permite al desarrollador elegir la que más convenga.&lt;/li>
&lt;li>&lt;strong>Fluent&lt;/strong> le proporciona al desarrollador una serie de componentes web, sistemas de diseño y aplicaciones que puede usar para crear sus propios proyectos.&lt;/li>
&lt;/ol>
&lt;h2 id="qué-puedo-lograr-con-esto">¿Qué puedo lograr con esto?&lt;/h2>
&lt;p>Con &lt;strong>Fluent&lt;/strong> se puede lograr lo siguiente:&lt;/p>
&lt;ul>
&lt;li>Crear experiencias de producto coherentes, de calidad y alineadas con la plataforma Microsoft.&lt;/li>
&lt;li>Extender y personalizar sus proyectos con una base sólida y flexible.&lt;/li>
&lt;li>Aplicar los principios de accesibilidad, internacionalización y rendimiento a sus diseños.&lt;/li>
&lt;/ul>
&lt;h2 id="conclusión">Conclusión&lt;/h2>
&lt;p>Como conclusión podemos menciona que:&lt;/p>
&lt;ul>
&lt;li>Ayuda a crear experiencias naturales y productivas en cada dispositivo.&lt;/li>
&lt;li>Ofrece recursos para diseñar interfaces de usuario en &lt;strong>Windows&lt;/strong>, &lt;strong>Web&lt;/strong>, &lt;strong>Móvil&lt;/strong> y &lt;strong>Multiplataforma&lt;/strong>.&lt;/li>
&lt;li>Proporciona un sistema de diseño inclusivo y diverso que se adapta a las necesidades de los usuarios.&lt;/li>
&lt;li>Facilita el trabajo en equipo con una fuente única de verdad para los componentes y herramientas de diseño.&lt;/li>
&lt;/ul>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Instalar aplicaciones Android desde APK en Windows 11</title><link>https://cmas.dev/posts/2022-04-20-install-android-apps-from-apk/</link><pubDate>Wed, 20 Apr 2022 13:01:14 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-04-20-install-android-apps-from-apk/</guid><description>&lt;p>En este artículo mostraré cómo instalar aplicaciones Android en Windows 11 gracias a &lt;strong>Windows Subsystem for Android&lt;/strong> utilizando herramientas del propio Android y habilitando ciertas opciones. En un &lt;a href="https://cmas.dev/posts/2022-04-13-enable-wsa/">artículo anterior&lt;/a> hemos visto cómo habilitar la plataforma desde &lt;strong>Microsoft Store&lt;/strong>.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22598&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Debemos seguir algunos pasos para poder tener cualquier aplicación Android directamente en Windows 11, recordando que para habilitar esto debemos tener la región indicada como Estados Unidos.&lt;/p>
&lt;h2 id="preparar-windows-subsystem-for-android">Preparar Windows Subsystem for Android&lt;/h2>
&lt;p>Para preparar la plataforma debemos seguir estos pasos:&lt;/p>
&lt;ol>
&lt;li>Iniciar la aplicación &lt;strong>Windows Subsystem for Android&lt;/strong>&lt;/li>
&lt;li>Establecer el &lt;strong>Modo desarrollador&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/04/20/adb1.png" alt="">&lt;/li>
&lt;li>Hacemos clic en la opción &lt;strong>Gestionar configuración de desarrollador&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/04/20/adb2.png" alt="">&lt;/li>
&lt;li>Habilitamos la opción de &lt;strong>Depuración USB&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/04/20/adb3.png" alt="">&lt;/li>
&lt;/ol>
&lt;h2 id="preparar-herramientas-de-android-sdk">Preparar herramientas de Android SDK&lt;/h2>
&lt;h3 id="preparar-android-sdk-platform-tools">Preparar Android SDk Platform Tools&lt;/h3>
&lt;blockquote>
&lt;p>Las Herramientas de la plataforma del SDK de Android son un componente del SDK de Android. Se incluyen herramientas que interactúan con la plataforma de Android, principalmente, &lt;em>adb&lt;/em> y &lt;em>fastboot&lt;/em>. Si bien adb es obligatorio en el desarrollo de apps para Android, por lo general, los desarrolladores de apps solo usarán la copia que instala Studio. Esta descarga es útil si deseas usar adb directamente desde la línea de comandos, y no tienes instalado Studio. (Si tienes instalado Studio, recomendamos que uses la copia que se instaló, ya que Studio lo actualizará automáticamente). Se necesita fastboot si deseas desbloquear el bootloader de tu dispositivo y actualizarlo con una nueva imagen del sistema. Este paquete solía contener &lt;em>systrace&lt;/em>, pero quedó obsoleto y se reemplazó por el generador de perfiles de Android Studio, &lt;em>gpuinspector.dev&lt;/em>, o &lt;em>Perfetto&lt;/em>.&lt;/p>
&lt;/blockquote>
&lt;p>Para esto debemos descargar la última versión disponible para Windows desde &lt;a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">aquí&lt;/a>&lt;/p>
&lt;h3 id="ubicar-los-archivos">Ubicar los archivos&lt;/h3>
&lt;ol>
&lt;li>Debemos crear una nueva carpeta en el directorio principal de Windows y copiar la carpeta descomprimida. Quedaría así:
&lt;img src="https://cmas.dev/img/posts/2022/04/20/adb4.png" alt="">&lt;/li>
&lt;li>Hacemos clic derecho en el icono de Windows en la barra de tareas o &lt;strong>Win&lt;/strong>+&lt;strong>i&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/04/20/adb5.png" alt="">&lt;/li>
&lt;li>Seleccionamos &lt;strong>Variables de entorno&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/04/20/adb6.png" alt="">&lt;/li>
&lt;li>Seleccionamos la variable &lt;strong>Path&lt;/strong> y agregamos un nuevo registro:
&lt;img src="https://cmas.dev/img/posts/2022/04/20/adb7.png" alt="">&lt;/li>
&lt;li>Agregamos la ubicación del ejecutable que queremos agregar a la variable:
&lt;img src="https://cmas.dev/img/posts/2022/04/20/adb8.png" alt="">&lt;/li>
&lt;li>Abrimos el comando de windows &lt;strong>CMD&lt;/strong> o &lt;strong>PowerShell&lt;/strong> y probamos el comando &lt;strong>adb&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">adb devices
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cmas.dev/img/posts/2022/04/20/adb9.png" alt="">&lt;/p>
&lt;h3 id="conexión-al-dispositivo">Conexión al dispositivo&lt;/h3>
&lt;ol>
&lt;li>Verificamos la IP del dispositivo (en la configuración de &lt;strong>Windows Subsystem for Android&lt;/strong>):
&lt;img src="https://cmas.dev/img/posts/2022/04/20/adb10.png" alt="">&lt;/li>
&lt;li>Nos conectamos a la IP y al puerto correspondiente:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">adb connect 172.18.136.138:5555
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="instalación-en-el-dispositivo">Instalación en el dispositivo&lt;/h3>
&lt;ol>
&lt;li>Descargamos un archivo apk, en este caso la última versión de Angry Birds Dream Blast &lt;a href="https://www.apkmirror.com/apk/rovio-entertainment-corporation/angry-birds-dream-blast/angry-birds-dream-blast-1-40-1-release/angry-birds-dream-blast-1-40-1-android-apk-download/">aquí&lt;/a>&lt;/li>
&lt;li>Instalamos el paquete descargado:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">adb install &amp;#34;C:\Users\chris\Downloads\andry.apk&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Veremos el icono anclado al menú inicio:
&lt;img src="https://cmas.dev/img/posts/2022/04/20/adb11.png" alt="">&lt;/li>
&lt;li>La aplicación se verá así:
&lt;img src="https://cmas.dev/img/posts/2022/04/20/adb12.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>Para cualquier aplicación que funcione para Android debemos repetir estos 4 pasos anteriores. Aprovecharé &lt;em>HBO Max&lt;/em> para ver el nuevo Batman&amp;hellip;&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Habilitar Windows Subsystem for Android™️</title><link>https://cmas.dev/posts/2022-04-13-enable-wsa/</link><pubDate>Wed, 13 Apr 2022 13:41:27 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-04-13-enable-wsa/</guid><description>&lt;p>En este artículo mostraré paso a paso como habilitar el &lt;strong>Windows Subsystem for Android&lt;/strong> en nuestro sistema operativo favorito. Tener en cuenta que al momento de escribir este artículo no está disponible fuera de EEUU.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22598&lt;/strong>&lt;/em>&lt;/p>
&lt;h2 id="qué-es-wsa">¿Qué es WSA?&lt;/h2>
&lt;p>Windows Subsystem for Android™ permite que un dispositivo con Windows 11 ejecute aplicaciones de Android que están disponibles en Amazon Appstore. Android es una marca comercial de Google LLC. Si es desarrollador y le interesa apuntar a dispositivos de escritorio Windows y optimizar para el sistema operativo Windows, esta guía es para usted.&lt;/p>
&lt;h2 id="configuraciones-previas">Configuraciones previas&lt;/h2>
&lt;p>En el momento que estoy escribiendo este artículo no funciona esto fuera de Estados Unidos, pero cambiando la región lo podemos lograr.&lt;/p>
&lt;p>Para eso, debemos ir a &lt;em>Configuración&lt;/em> &amp;gt; &lt;em>Tiempo y Región&lt;/em>:
&lt;img src="https://cmas.dev/img/posts/2022/04/13/wsa1.png" alt="">&lt;/p>
&lt;h2 id="habilitación-de-windows-subsystem-for-android">Habilitación de Windows Subsystem for Android&lt;/h2>
&lt;p>Debemos dirigirnos a &lt;strong>Microsoft Store&lt;/strong>, buscar e instalar &lt;strong>Amazon Appstore&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/04/13/wsa2.png" alt="">&lt;/p>
&lt;p>El sistema nos pedirá hacer clic en &lt;strong>Descargar&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/04/13/wsa3.png" alt="">&lt;/p>
&lt;p>Veremos el progreso de descarga:
&lt;img src="https://cmas.dev/img/posts/2022/04/13/wsa4.png" alt="">&lt;/p>
&lt;p>Abrimos la nueva aplicación:
&lt;img src="https://cmas.dev/img/posts/2022/04/13/wsa5.png" alt="">&lt;/p>
&lt;p>Se inicia el &lt;strong>Windows Subsystem for Android&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/04/13/wsa6.png" alt="">&lt;/p>
&lt;p>Iniciamos sesión (o creamos una nueva cuenta) en Amazon y listo.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Crear acceso directo a máquina virtual</title><link>https://cmas.dev/posts/2022-04-06-windows-11-shortcut-vm/</link><pubDate>Wed, 06 Apr 2022 19:21:43 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-04-06-windows-11-shortcut-vm/</guid><description>&lt;p>Lo más práctico y útil para un usuario es encontrar lo que busca de manera rápida y sencilla. Es por eso que mostraré los pasos a seguir para crear un acceso directo a una máquina virtual en Hyper-V.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22593&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Primero debemos dirigirnos a nuestro gestor de máquinas virtuales de Hyper-V y obtener el nombre de la máquina virtual en cuestión (Ubuntu, en este caso):
&lt;img src="https://cmas.dev/img/posts/2022/04/06/hyperv1.png" alt="">&lt;/p>
&lt;p>Nos dirigimos al escritorio de Windows, &lt;em>clic derecho&lt;/em> &amp;gt; &lt;em>Nuevo&lt;/em> &amp;gt; &lt;em>Crear acceso directo&lt;/em>:
&lt;img src="https://cmas.dev/img/posts/2022/04/06/hyperv2.png" alt="">&lt;/p>
&lt;p>Agregamos la siguiente ubicación de archivo:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">vmconnect.exe localhost &amp;#34;Ubuntu&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>El nombre de programa es &lt;strong>vmconnect.exe&lt;/strong>&lt;/li>
&lt;li>&lt;strong>localhost&lt;/strong> porque se trata de nuestra máquina virtual local&lt;/li>
&lt;li>&lt;strong>Ubuntu&lt;/strong> es el nombre de la máquina virtual&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cmas.dev/img/posts/2022/04/06/hyperv3.png" alt="">&lt;/p>
&lt;p>Colocamos un nombre descriptivo a nuestro acceso directo:
&lt;img src="https://cmas.dev/img/posts/2022/04/06/hyperv4.png" alt="">&lt;/p>
&lt;p>Veremos en el escritorio el acceso directo creado:
&lt;img src="https://cmas.dev/img/posts/2022/04/06/hyperv5.png" alt="">&lt;/p>
&lt;p>Por último, hacemos la prueba del acceso directo:
&lt;img src="https://cmas.dev/img/posts/2022/04/06/hyperv6.png" alt="">&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item></channel></rss>