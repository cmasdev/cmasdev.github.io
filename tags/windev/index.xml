<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WinDev on Blog de Christian Amado</title><link>https://cmas.dev/tags/windev/</link><description>Recent content in WinDev on Blog de Christian Amado</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>biz@cmas.dev (Christian Amado)</managingEditor><webMaster>biz@cmas.dev (Christian Amado)</webMaster><lastBuildDate>Wed, 14 Sep 2022 23:18:00 -0400</lastBuildDate><atom:link href="https://cmas.dev/tags/windev/index.xml" rel="self" type="application/rss+xml"/><item><title>Primeros pasos con XAML en MAUI</title><link>https://cmas.dev/posts/2022-09-14-first-step-xaml-in-maui/</link><pubDate>Wed, 14 Sep 2022 23:18:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-09-14-first-step-xaml-in-maui/</guid><description>&lt;p>En este artículo mostraré cómo iniciar los pasos con el lenguaje &lt;strong>XAML&lt;/strong> en &lt;strong>.NET MAUI&lt;/strong>.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25201&lt;/strong>&lt;/em>&lt;/p>
&lt;p>En este pequeño artículo vamos a utilizar controles de Telerik para &lt;strong>.NET MAUI&lt;/strong>. En un &lt;a href="">artículo anterior&lt;/a> vimos cómo crear una aplicación &lt;strong>.NET MAUI&lt;/strong> y aquí haremos otra basada en otra plantilla (&lt;a href="https://www.telerik.com/support/whats-new/maui-ui/release-history/telerik-ui-for-net-maui-(version-3-0-0)">Telerik&lt;/a>).
&lt;img src="https://cmas.dev/img/posts/2022/09/14/1.png" alt="">&lt;/p>
&lt;h2 id="telerik-sidedrawer">Telerik SideDrawer&lt;/h2>
&lt;p>Este control (conocido como Menú Hamburguesa) se utiliza para hacer la navegación muy amigable debido a que el menú queda al costado de nuestro diseño y permite una visualización completa del mismo. En Windows 11 se refiere a &lt;a href="https://learn.microsoft.com/en-us/windows/apps/design/controls/navigationview">NavigationView&lt;/a>.&lt;/p>
&lt;p>La definición del control, en lenguaje &lt;strong>XAML&lt;/strong>, sería:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;ContentPage xmlns=&amp;#34;http://schemas.microsoft.com/dotnet/2021/maui&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2009/xaml&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:telerik=&amp;#34;http://schemas.telerik.com/2022/xaml/maui&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Class=&amp;#34;TelerikMauiApp1.MainPage&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;ScrollView&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;telerik:RadSideDrawer x:Name=&amp;#34;drawer&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DrawerLength=&amp;#34;200&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;telerik:RadSideDrawer.MainContent&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Grid&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Label Text=&amp;#34;Main content on CMASDEV BLOG&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/Grid&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/telerik:RadSideDrawer.MainContent&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;telerik:RadSideDrawer.DrawerContent&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;VerticalStackLayout Spacing=&amp;#34;10&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Padding=&amp;#34;10, 10, 0, 0&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;VerticalStackLayout.Resources&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Style x:Key=&amp;#34;DefaultButtonStyle&amp;#34; TargetType=&amp;#34;Button&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Setter Property=&amp;#34;WidthRequest&amp;#34; Value=&amp;#34;180&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Setter Property=&amp;#34;HeightRequest&amp;#34; Value=&amp;#34;40&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Setter Property=&amp;#34;BackgroundColor&amp;#34; Value=&amp;#34;#b1b1b1&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Setter Property=&amp;#34;TextColor&amp;#34; Value=&amp;#34;Black&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/Style&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/VerticalStackLayout.Resources&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Button Text=&amp;#34;Mail&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Style=&amp;#34;{StaticResource DefaultButtonStyle}&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Button Text=&amp;#34;Calendar&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Style=&amp;#34;{StaticResource DefaultButtonStyle}&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Button Text=&amp;#34;People&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Style=&amp;#34;{StaticResource DefaultButtonStyle}&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Button Text=&amp;#34;Tasks&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Style=&amp;#34;{StaticResource DefaultButtonStyle}&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/VerticalStackLayout&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/telerik:RadSideDrawer.DrawerContent&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/telerik:RadSideDrawer&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/ScrollView&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/ContentPage&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Con esta definición declarativa logramos que el control tenga todos los detalles necesarios para su funcionamiento.&lt;/p>
&lt;p>Visualmente, el resultado del código XAML es:
&lt;img src="https://cmas.dev/img/posts/2022/09/14/2.png" alt="">&lt;br>
&lt;img src="https://cmas.dev/img/posts/2022/09/14/3.png" alt="">&lt;/p>
&lt;p>Si realmente necesitas aprender &lt;strong>XAML&lt;/strong>, la documentación de Microsft &lt;a href="https://learn.microsoft.com/es-es/dotnet/maui/xaml/fundamentals/get-started?view=net-maui-7.0">aquí&lt;/a> está muy completa.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Mi primera aplicación con Windows App SDK</title><link>https://cmas.dev/posts/2022-09-07-first-windows-app-reactjs/</link><pubDate>Wed, 07 Sep 2022 19:14:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-09-07-first-windows-app-reactjs/</guid><description>&lt;p>En este artículo mostraré cómo crear una aplicación con &lt;strong>Windows App SDK&lt;/strong> en &lt;strong>React&lt;/strong>. &lt;em>Ojo&lt;/em>: Es mi primera prueba con React (nunca lo he usado).&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25188&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Existen algunas opciones válidas para crear aplicaciones para Windows 11, entre ellas, las siguientes:&lt;/p>
&lt;ul>
&lt;li>WinUI (más adelante entraremos en detalle en esto).&lt;/li>
&lt;li>.NET MAUI (que me agrada bastante)&lt;/li>
&lt;li>PWA (Progressive WEb Applications)&lt;/li>
&lt;li>React para Windows (que usaremos en este artículo)&lt;/li>
&lt;/ul>
&lt;p>Como es la primera vez que trabaremos con React, debemos preparar el entorno.&lt;/p>
&lt;h2 id="instalación-de-react-native-for-windows">Instalación de React Native for Windows&lt;/h2>
&lt;ol>
&lt;li>Creamos la carpeta en el directorio de preferencia.&lt;/li>
&lt;li>Accedemos a él desde Power Shell:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd C:\Users\chris\source\repos\LocalOnly\ReactNativeWin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">npx react-native init TestApp --template react-native@^0.70.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>La instalación quedará algo así:
&lt;img src="https://cmas.dev/img/posts/2022/09/07/1.png" alt="">&lt;/li>
&lt;li>Ir a la carpeta creada:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd TestApp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Instalar la extensión de Windows:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">npx react-native-windows-init --overwrite
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>Creamos el enlace con las dependencias:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">npx react-native autolink-windows
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="7">
&lt;li>Fin de la instalación&lt;/li>
&lt;/ol>
&lt;h2 id="creación-de-aplicación">Creación de aplicación&lt;/h2>
&lt;ol>
&lt;li>Abrir un proyecto existente desde Visual studoo 2022:
&lt;img src="https://cmas.dev/img/posts/2022/09/07/2.png" alt="">&lt;/li>
&lt;li>En Power Shell, escribir lo siguiente (para arrancar el servidorcillo):&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">npm start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Ejecutamos la aplicación desde Visual Studio 2022 (la compilación demora un poco dependiendo de la capacidad del equipo de desarrollo):
&lt;img src="https://cmas.dev/img/posts/2022/09/07/3.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>Y con esto tenemos nuestra primera aplciación &lt;strong>Windows App SDK&lt;/strong> con &lt;strong>React&lt;/strong>.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Preparando entorno para desarrollo con Windows App SDK</title><link>https://cmas.dev/posts/2022-08-31-preparing-windows-app-sdk/</link><pubDate>Wed, 31 Aug 2022 22:36:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-08-31-preparing-windows-app-sdk/</guid><description>&lt;p>En este artículo mostraré cómo preparar el entorno para el desarrollo de aplicaciones con &lt;strong>Windows App SDK&lt;/strong>.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25188&lt;/strong>&lt;/em>&lt;/p>
&lt;p>La preparación del entorno es simple para este caso, sólo debemos instalar el SDK como tal y la extensión para Visual Studio 2022 (para C# en este caso).&lt;/p>
&lt;h2 id="pasos-para-la-instalación">Pasos para la instalación&lt;/h2>
&lt;p>Primeramente, debemos instalar el SDK desde el sitio oficial de Microsoft:&lt;/p>
&lt;ol>
&lt;li>Descargamos el SDK (la versión actual es 1.1.5) desde &lt;a href="https://aka.ms/windowsappsdk/1.1/1.1.5/windowsappruntimeinstall-x64.exe">aquí&lt;/a>&lt;/li>
&lt;li>Descargamos la extensión de C# para Visual Studio 2022 desde &lt;a href="https://aka.ms/windowsappsdk/1.1/1.1.5/WindowsAppSDK.Cs.Extension.Dev17.Standalone.vsix">aquí&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>Con estos pasos hemos cumplido el objetivo, pero para asegurarnos debemos ir al instalador de Visual Studio 2022 y verificar que esté seleccionada la opción de .NET Desktop Applications:
&lt;img src="https://cmas.dev/img/posts/2022/08/31/1.png" alt="">&lt;/p>
&lt;p>Con esta opción podemos empezar a desarrollar aplicaciones para Windows 11 (10 también pero ya es obsoleto jaja)&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Mi Primera Aplicación MAUI</title><link>https://cmas.dev/posts/2022-08-24-first-app-in-maui/</link><pubDate>Wed, 24 Aug 2022 21:04:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-08-24-first-app-in-maui/</guid><description>&lt;p>En este artículo mostraré cómo crear la primera aplicación &lt;strong>.NET MAUI&lt;/strong> preparada para Android y Windows 11.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25188&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Para crear un proyecto .NET MAUI no se necesitan demasiados pasos para lograr el objetivo, basta con seguir estos sencillos pasos que se muestran a continuación.&lt;/p>
&lt;ol>
&lt;li>Crear un nuevo proyecto:
&lt;img src="https://cmas.dev/img/posts/2022/08/24/1.png" alt="">&lt;/li>
&lt;li>Colocar un nombre descriptivo:
&lt;img src="https://cmas.dev/img/posts/2022/08/24/2.png" alt="">&lt;/li>
&lt;li>Seleccionar el Framework y creamos el proyecto:
&lt;img src="https://cmas.dev/img/posts/2022/08/24/3.png" alt="">&lt;/li>
&lt;li>Verificamos la estructura del proyecto y las plataformas habilitadas:
&lt;img src="https://cmas.dev/img/posts/2022/08/24/4.png" alt="">&lt;/li>
&lt;li>Ejecutamos la aplicación en Windows (usa Windows App SDK):
&lt;img src="https://cmas.dev/img/posts/2022/08/24/5.png" alt="">&lt;/li>
&lt;li>Cambiamos el escenario a un emulador Android:
&lt;img src="https://cmas.dev/img/posts/2022/08/24/6.png" alt="">&lt;/li>
&lt;li>Lo ejecutamos para probar:
&lt;img src="https://cmas.dev/img/posts/2022/08/24/7.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>¡Listo! Así hemos creado nuestro proyecto &lt;strong>.NET MAUI&lt;/strong> sin demasiado esfuerzo.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Estructura básica de un proyecto MAUI</title><link>https://cmas.dev/posts/2022-08-17-basic-struct-of-maui-project/</link><pubDate>Wed, 17 Aug 2022 18:07:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-08-17-basic-struct-of-maui-project/</guid><description>&lt;p>En este artículo mostraré cómo es la estructura básica de un proyecto &lt;strong>.NET MAUI&lt;/strong> .&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25179&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Primeramente, debemos conocer la estructura en sí de &lt;strong>.NET MAUI&lt;/strong> que se encuentra en el sitio oficial de Microsoft. La documentación oficial se encuentra &lt;a href="https://learn.microsoft.com/es-es/dotnet/maui/what-is-maui?view=net-maui-7.0">aquí&lt;/a>&lt;/p>
&lt;p>Funcionalmente, .NET MAUI opera de la siguiente manera:
&lt;img src="https://cmas.dev/img/posts/2022/08/17/1.png" alt="">&lt;/p>
&lt;h2 id="estructura-del-proyecto-net-maui">Estructura del proyecto .NET MAUI&lt;/h2>
&lt;p>El proyecto que se crea en &lt;strong>.NET MAUI&lt;/strong> posee la siguiente estructura:
&lt;img src="https://cmas.dev/img/posts/2022/08/17/2.png" alt="">&lt;/p>
&lt;h3 id="dependencias-dependencies">Dependencias (Dependencies)&lt;/h3>
&lt;p>Las dependencias son los paquetes (librerías) disponibles para cada plataforma soportada en &lt;strong>.NET MAUI&lt;/strong>.&lt;/p>
&lt;p>En este caso serían:&lt;/p>
&lt;ul>
&lt;li>Android.&lt;/li>
&lt;li>iOS.&lt;/li>
&lt;li>Mac Catalyst.&lt;/li>
&lt;li>Windows 10 (pues tiene en cuenta la versión mínima soportada).&lt;/li>
&lt;/ul>
&lt;h3 id="plataformas-platforms">Plataformas (Platforms)&lt;/h3>
&lt;p>Esta carpeta indica las configuraciones específicas de cada plataforma. Cada una de ellas posee su propia configuración dependiendo de las necesidades de la aplicación.&lt;/p>
&lt;h3 id="recursos-resources">Recursos (Resources)&lt;/h3>
&lt;p>Son los recursos compartidos entre las plataformas, de esta manera se pueden reutilizar elementos en todas las plataformas sin repetirlos.)&lt;/p>
&lt;p>Con esta estructura definida, creamos y desarrollamos las aplicaciones en &lt;strong>.NET MAUI&lt;/strong>&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Instalando .NET MAUI en Visual Studio 2022</title><link>https://cmas.dev/posts/2022-08-10-installing-maui-on-visual-studio-2022/</link><pubDate>Wed, 10 Aug 2022 19:19:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-08-10-installing-maui-on-visual-studio-2022/</guid><description>&lt;p>En este artículo mostraré cómo instalar los componentes necesarios para el desarrollo en &lt;strong>.NET MAUI&lt;/strong> para Windows 11 y Android.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25179&lt;/strong>&lt;/em>&lt;/p>
&lt;p>La instalación de componentes en Visual Studio siempre ha sido sencilla y esta no es la excepción.&lt;/p>
&lt;h2 id="desinstalar-visual-studio-2022-preview">Desinstalar Visual Studio 2022 Preview&lt;/h2>
&lt;p>Ya estuvimos probando .NET MAUI desde hace rato así que es tiempo de eliminar la versión Preview e instalar la versión oficial. Para ellos debemos realizar dos pasos sencillos:&lt;/p>
&lt;ol>
&lt;li>Ir a &lt;strong>Panel de control&lt;/strong> &amp;gt; &lt;strong>Desinstalar programas&lt;/strong>.&lt;/li>
&lt;li>Seleccionar &lt;strong>Microsoft Visual Studio 2022 Preview&lt;/strong> y listo.&lt;/li>
&lt;/ol>
&lt;h2 id="instalar-visual-studio-2022">Instalar Visual Studio 2022&lt;/h2>
&lt;p>Instalar Visual Studio 2022 es bien sencillo.&lt;/p>
&lt;ol>
&lt;li>Descargar el instalador nuevo &lt;a href="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=Professional&amp;amp;channel=Release&amp;amp;version=VS2022&amp;amp;source=VSLandingPage&amp;amp;cid=2030&amp;amp;passive=false">aquí&lt;/a>&lt;/li>
&lt;li>Ejecutar el instalador y seguir los pasos en pantalla hasta la selección de componente, allí debemos seleccionar la opción correspondiente a &lt;strong>.NET MAUI&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/08/10/1.png" alt="">&lt;/li>
&lt;li>Aguardamos que finalice la instalación y listo.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>.NET MAUI&lt;/strong> instalará la última API de Android disponible y preparará Windows 11 para que podamos ejecutar nuestra Applicación.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>MAUI ¿Qué? ¿Por qué? ¿Para qué?</title><link>https://cmas.dev/posts/2022-08-03-maui-some-questions/</link><pubDate>Wed, 03 Aug 2022 22:12:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-08-03-maui-some-questions/</guid><description>&lt;p>En este artículo intentaré explicar o dar a entender que es &lt;strong>.NET MAUI&lt;/strong> y otras cuestiones relacionada a esta plaforma que básicamente reemplaza al viejo conocido de &lt;strong>Xamarin.Forms&lt;/strong>.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25174&lt;/strong>&lt;/em>&lt;/p>
&lt;h2 id="qué-es-net-maui-flutter-es-mejor">¿Qué es .NET MAUI? Flutter es mejor&amp;hellip;&lt;/h2>
&lt;p>&lt;strong>.NET MAUI&lt;/strong> es un marco de trabajo multiplataforma para crear aplicaciones nativas móviles y de escritorio con C# y XAML. Con &lt;strong>.NET MAUI&lt;/strong>, se puede desarrollar aplicaciones que pueden ejecutarse en &lt;em>&lt;strong>Android&lt;/strong>&lt;/em>, &lt;em>&lt;strong>iOS&lt;/strong>&lt;/em>, &lt;em>&lt;strong>macOS&lt;/strong>&lt;/em> y &lt;em>&lt;strong>Windows&lt;/strong>&lt;/em> desde un solo código compartido. Es la evolución de &lt;em>Xamarin.Forms&lt;/em> que amplía las capacidades más allá de los dispositivos móviles.&lt;/p>
&lt;p>&lt;strong>.NET MAUI&lt;/strong> es para desarrolladores que quieren:&lt;/p>
&lt;ol>
&lt;li>Escribir aplicaciones multiplataforma en XAML y C#, desde un solo código compartido en Visual Studio.&lt;/li>
&lt;li>Compartir el diseño y la disposición de la interfaz de usuario entre plataformas.&lt;/li>
&lt;li>Compartir código, pruebas y lógica de negocio entre plataformas.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>.NET MAUI&lt;/strong> proporciona una colección de controles que se pueden usar para mostrar datos, iniciar acciones, indicar actividad, mostrar colecciones, elegir datos y más. Además de una colección de controles, &lt;strong>.NET MAUI&lt;/strong> también ofrece: Un motor de diseño elaborado para diseñar páginas. Un proyecto único compartido que puede apuntar a &lt;em>&lt;strong>Android&lt;/strong>&lt;/em>, &lt;em>&lt;strong>iOS&lt;/strong>&lt;/em>, &lt;em>&lt;strong>macOS&lt;/strong>&lt;/em> y &lt;em>&lt;strong>Windows&lt;/strong>&lt;/em>. Una selección simplificada del objetivo de depuración para ejecutar las aplicaciones &lt;strong>.NET MAUI&lt;/strong>.&lt;/p>
&lt;p>Ya escuché comentarios sobre ¡&lt;em>Flutter&lt;/em> es mucho mejor!. Pero ¿Es realmente así?&lt;/p>
&lt;p>No hay una respuesta definitiva a esta pregunta, ya que depende de las preferencias y necesidades de cada desarrollador y proyecto. Sin embargo, se pueden mencionar algunas diferencias y ventajas de cada plataforma:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Flutter&lt;/strong> usa &lt;strong>Dart&lt;/strong>, un lenguaje desarrollado por &lt;em>Google&lt;/em>, mientras que &lt;strong>.NET MAUI&lt;/strong> usa &lt;strong>C#&lt;/strong>, un lenguaje ampliamente usado en el ecosistema &lt;strong>.NET&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Flutter&lt;/strong> ofrece una interfaz de usuario más rápida y fluida, gracias a su compilación anticipada que reduce el tamaño del código compilado. Además, &lt;strong>Flutter&lt;/strong> soporta &lt;em>Material Design&lt;/em> para &lt;em>&lt;strong>Android&lt;/strong>&lt;/em> y &lt;em>Cupertino&lt;/em> para &lt;em>&lt;strong>iOS&lt;/strong>&lt;/em>, lo que permite crear aplicaciones con aspecto nativo para cada plataforma.&lt;/li>
&lt;li>&lt;strong>.NET MAUI&lt;/strong> es una buena opción para los desarrolladores que ya están familiarizados con la plataforma &lt;strong>.NET&lt;/strong> y quieren crear aplicaciones multiplataforma usando &lt;strong>C#&lt;/strong>. También ofrece una mayor integración con &lt;em>Visual Studio&lt;/em> y otras herramientas de desarrollo.&lt;/li>
&lt;li>&lt;strong>Flutter&lt;/strong> soporta el desarrollo web y &lt;em>Linux&lt;/em>, mientras que &lt;strong>.NET MAUI&lt;/strong> no. Sin embargo, los desarrolladores de &lt;strong>.NET MAUI&lt;/strong> pueden utilizar el marco &lt;em>&lt;strong>Blazor&lt;/strong>&lt;/em> para proporcionar un puente para usar recursos de &lt;strong>MAUI&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;p>En conclusión, ambas plataformas tienen sus pros y contras, y la elección dependerá de factores como el lenguaje de programación preferido, el tipo de aplicación que se quiere crear, el público objetivo y el presupuesto disponible.&lt;/p>
&lt;h2 id="qué-puedo-hacer-con-esto">¿Qué puedo hacer con esto?&lt;/h2>
&lt;p>Con &lt;strong>.NET MAUI&lt;/strong> se puede desarrollar aplicaciones nativas para &lt;strong>Windows&lt;/strong>, &lt;em>macOS&lt;/em>, &lt;em>iOS&lt;/em> y &lt;strong>Android&lt;/strong>, usando un solo código compartido en &lt;strong>C#&lt;/strong> y &lt;strong>XAML&lt;/strong>. Se puede crear aplicaciones que se adapten al aspecto y la funcionalidad de cada plataforma, aprovechando las últimas tecnologías de desarrollo.&lt;/p>
&lt;p>Algunos ejemplos de tipos de aplicaciones que se pueden crear con &lt;strong>.NET MAUI&lt;/strong> son:&lt;/p>
&lt;ul>
&lt;li>Aplicaciones de productividad que permitan gestionar tareas, calendarios, correos electrónicos, etc.&lt;/li>
&lt;li>Aplicaciones de entretenimiento que ofrezcan juegos, música, vídeos, etc.&lt;/li>
&lt;li>Aplicaciones de educación que faciliten el aprendizaje interactivo y el acceso a recursos didácticos.&lt;/li>
&lt;li>Aplicaciones de negocios que integren servicios web, bases de datos, análisis de datos, etc.&lt;/li>
&lt;/ul>
&lt;h2 id="un-poco-de-código">Un poco de código&lt;/h2>
&lt;p>Primero, veamos el código &lt;strong>XAML&lt;/strong> que se utiliza para la visual:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;ContentPage xmlns=&amp;#34;http://schemas.microsoft.com/dotnet/2021/maui&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2009/xaml&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Class=&amp;#34;ButtonSample.MainPage&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;StackLayout&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Button Text=&amp;#34;Click Me!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Clicked=&amp;#34;OnCounterClicked&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Label x:Name=&amp;#34;CounterLabel&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text=&amp;#34;Welcome to .NET MAUI!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HorizontalOptions=&amp;#34;Center&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> VerticalOptions=&amp;#34;CenterAndExpand&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/StackLayout&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/ContentPage&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Luego, vemos el código &lt;strong>C#&lt;/strong> para poder realizar las acciones necesarias:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">using Microsoft.Maui;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">using Microsoft.Maui.Controls;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">using Microsoft.Maui.Essentials;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">namespace ButtonSample
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public partial class MainPage : ContentPage
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int count = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public MainPage()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> InitializeComponent();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void OnCounterClicked(object sender, EventArgs e)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> count++;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CounterLabel.Text = $&amp;#34;Contador actual: {count}&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CounterLabel.FontSize = Device.GetNamedSize(NamedSize.Large, typeof(Label));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CounterLabel.TextColor = Color.FromHex(&amp;#34;#FF0000&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conclusión">Conclusión&lt;/h2>
&lt;p>&lt;strong>.NET MAUI&lt;/strong> es una plataforma multiplataforma que ofrece muchas ventajas para los desarrolladores que quieren crear aplicaciones nativas con un solo código compartido en &lt;strong>C#&lt;/strong> y &lt;strong>XAML&lt;/strong>. Sin embargo, también tiene algunos inconvenientes y limitaciones que se debe tener en cuenta.&lt;/p>
&lt;p>En este contexto, se recomienda &lt;strong>.NET MAUI&lt;/strong> si:&lt;/p>
&lt;ul>
&lt;li>Ya se tiene experiencia con la plataforma &lt;strong>.NET&lt;/strong> y el lenguaje &lt;strong>C#&lt;/strong>.&lt;/li>
&lt;li>Se quiere crear aplicaciones para &lt;strong>Windows&lt;/strong>, &lt;em>macOS&lt;/em>, &lt;em>iOS&lt;/em> y &lt;strong>Android&lt;/strong> con una interfaz de usuario consistente y personalizable.&lt;/li>
&lt;li>Se quiere aprovechar las herramientas de desarrollo de &lt;em>Visual Studio&lt;/em> y otras librerías del ecosistema &lt;strong>.NET&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>No se recomienda &lt;strong>.NET MAUI&lt;/strong> si:&lt;/p>
&lt;ul>
&lt;li>Se prefiere usar otro lenguaje de programación como &lt;em>Dart&lt;/em> o &lt;em>JavaScript&lt;/em>.&lt;/li>
&lt;li>Se quiere crear aplicaciones web o para &lt;em>Linux&lt;/em> sin usar &lt;strong>Blazor&lt;/strong>.&lt;/li>
&lt;li>Se quiere usar las últimas características y tecnologías de cada plataforma nativa.&lt;/li>
&lt;/ul>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>MAUI on WSA</title><link>https://cmas.dev/posts/2022-07-27-maui-in-wsa/</link><pubDate>Wed, 27 Jul 2022 19:16:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-07-27-maui-in-wsa/</guid><description>&lt;p>En este artículo mostraré cómo ejecutar una aplicación &lt;strong>.NET MAUI&lt;/strong> sobre &lt;strong>Windows Subsystem for Android&lt;/strong>.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25163&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Normalmente, utilizamos un emulador de Android para poder ejecutar y depurar nuestas aplicaciones para esta plataforma. En este caso, ejecutaremos nuestra aplicación en &lt;strong>WSA (Windows Subsystem for Android)&lt;/strong>.&lt;/p>
&lt;h2 id="preparar-el-proyecto">Preparar el proyecto&lt;/h2>
&lt;p>Primeramente, debemos crear el poryecto &lt;strong>.NET MAUI&lt;/strong> y tenerlo listo para la plataforma &lt;strong>Android&lt;/strong>:&lt;/p>
&lt;ol>
&lt;li>Creamos el proyecto en Visual Studio 2022:
&lt;img src="https://cmas.dev/img/posts/2022/07/27/1.png" alt="">&lt;/li>
&lt;li>Colocamos un nombre descriptivo al proyecto nuevo:
&lt;img src="https://cmas.dev/img/posts/2022/07/27/2.png" alt="">&lt;/li>
&lt;li>Seleccionamos el .NET Core que deseamos utilizar:
&lt;img src="https://cmas.dev/img/posts/2022/07/27/3.png" alt="">&lt;/li>
&lt;li>Verificamos las opciones habilitadas (nos interesa Android):
&lt;img src="https://cmas.dev/img/posts/2022/07/27/4.png" alt="">&lt;/li>
&lt;/ol>
&lt;h2 id="configurar-wsa">Configurar WSA&lt;/h2>
&lt;p>Procedemos a configurar la máquina virtual para poder utilizarla&lt;/p>
&lt;ol>
&lt;li>En la configuración de &lt;strong>WSA&lt;/strong>, verificamos la IP y puerto para conectarnos:
&lt;img src="https://cmas.dev/img/posts/2022/07/27/5.png" alt="">&lt;/li>
&lt;li>Ejecutamos la consola de Android desde Visual Studio:
&lt;img src="https://cmas.dev/img/posts/2022/07/27/6.png" alt="">&lt;/li>
&lt;li>Ejecutamos el siguiente comando:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">adb connect 127.0.0.1:58526
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Verificamos la conexión realizada:
&lt;img src="https://cmas.dev/img/posts/2022/07/27/7.png" alt="">&lt;/li>
&lt;li>En visual Studio, veremos el nuevo dispositivo:
&lt;img src="https://cmas.dev/img/posts/2022/07/27/8.png" alt="">&lt;/li>
&lt;li>Ejecutamos la aplicación y la veremos en &lt;strong>WSA&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/07/27/9.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Hospedar Web App en UWP</title><link>https://cmas.dev/posts/2022-07-20-host-web-app-in-uwp/</link><pubDate>Wed, 20 Jul 2022 23:01:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-07-20-host-web-app-in-uwp/</guid><description>&lt;p>En este artículo mostraré cómo hospedar/mostrar una aplicación &lt;strong>ASP.NET Core&lt;/strong> dentro de una aplicación &lt;strong>UWP&lt;/strong> en Windows.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25126&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Muchas veces ya tenemos una aplicación desarrollada utilizando todos los estándares posibles de su mundo (HTML, CSS, JavaScript, ASP.NET, etc.). Entonces, aquí veremos cómo reutilizar esto dentro de una app UWP (inclusive se podría publicar la app UWP con la URL publicada dentro).&lt;/p>
&lt;h2 id="aplicación-aspnet-core">Aplicación ASP.NET Core&lt;/h2>
&lt;p>Primeramente, crearemos la aplicación &lt;strong>ASP.NET Core&lt;/strong> básica y la ejecutaremos para verla en el navegador.&lt;/p>
&lt;ol>
&lt;li>Creamos un nuevo proyecto &lt;strong>ASP.NET Core&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/07/20/1.png" alt="">&lt;/li>
&lt;li>Colocamos un nombre al proyecto:
&lt;img src="https://cmas.dev/img/posts/2022/07/20/2.png" alt="">&lt;/li>
&lt;li>Seleccionamos el Framework que se ajusta a nuestras necesidades:
&lt;img src="https://cmas.dev/img/posts/2022/07/20/3.png" alt="">&lt;/li>
&lt;li>Ejecutamos la aplicación (presionando la tecla &lt;em>F5&lt;/em>), veremos el servidor y la web funcionando:
&lt;img src="https://cmas.dev/img/posts/2022/07/20/4.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>Listo, ya tenemos nuestra aplicación Web.&lt;/p>
&lt;h2 id="aplicación-uwp-univesal-windows-platform">Aplicación UWP (Univesal Windows Platform)&lt;/h2>
&lt;p>Crearemos la aplicación &lt;strong>UWP&lt;/strong> apuntando a &lt;strong>Windows 11&lt;/strong> como Sistema operativo.&lt;/p>
&lt;ol>
&lt;li>Creamos un nuevo proyecto &lt;strong>Universal Windows&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/07/20/5.png" alt="">&lt;/li>
&lt;li>Colocamos un nombre al proyecto:
&lt;img src="https://cmas.dev/img/posts/2022/07/20/6.png" alt="">&lt;/li>
&lt;li>Seleccionamos las versiones para Windows que estarán disponibles:
&lt;img src="https://cmas.dev/img/posts/2022/07/20/7.png" alt="">&lt;/li>
&lt;li>Escribimos el código necesario para que nuestra web app pueda verse:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;Page
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Class=&amp;#34;UWP_Emb.MainPage&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:local=&amp;#34;using:UWP_Emb&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:d=&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:mc=&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mc:Ignorable=&amp;#34;d&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Background=&amp;#34;{ThemeResource ApplicationPageBackgroundThemeBrush}&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Grid&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;WebView Source=&amp;#34;https://localhost:7106/&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/Grid&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/Page&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>
&lt;p>Ejecutamos la aplicación (presionando la tecla &lt;em>F5&lt;/em>), veremos&amp;hellip; nada:
&lt;img src="https://cmas.dev/img/posts/2022/07/20/8.png" alt="">&lt;br>
Esto debido a que la librería no está soportada y necesita la nueva versión (acaba de ser lanzada &lt;a href="https://www.nuget.org/packages/Microsoft.UI.Xaml/2.8.0">aquí&lt;/a>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Procedemos a cargar el nuevo paquete desde &lt;strong>Nuget&lt;/strong>, para ellos vamos a **** &amp;gt; &amp;gt; :
&lt;img src="https://cmas.dev/img/posts/2022/07/20/9.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Colocamos el código nuevo para que esto nos funcione:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;Page
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Class=&amp;#34;UWP_Emb.MainPage&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:local=&amp;#34;using:UWP_Emb&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:d=&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:mc=&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mc:Ignorable=&amp;#34;d&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:controls=&amp;#34;using:Microsoft.UI.Xaml.Controls&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Background=&amp;#34;{ThemeResource ApplicationPageBackgroundThemeBrush}&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Grid&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;controls:WebView2 Source=&amp;#34;https://localhost:7106/&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/Grid&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/Page&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="7">
&lt;li>Ejecutamos la aplicación (presionando la tecla &lt;em>F5&lt;/em>), veremos nuestra web app funcionando:
&lt;img src="https://cmas.dev/img/posts/2022/07/20/10.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>Parece algo muy sencillo, pero me tomó algunos días poder encontrar que el problema estaba en la actualización de la librería &lt;strong>Microsoft.UI&lt;/strong>&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>ASP.NET Core en Ubuntu</title><link>https://cmas.dev/posts/2022-06-15-aspnet-core-on-ubuntu/</link><pubDate>Wed, 15 Jun 2022 12:08:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-06-15-aspnet-core-on-ubuntu/</guid><description>&lt;p>En este artículo mostraré cómo ejecutar una aplicación &lt;strong>ASP.NET Core&lt;/strong> sobre &lt;strong>Windows Subsystem for Linux&lt;/strong>, es decir, alojar un servidor web en Ubuntu para ejecutar nuestra aplicación web.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25140&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Se habla mucho respecto a que .NET Core puede ejecutar aplicaciones nativamente en Linux (Ubuntu, en este caso) y es hora de hacer la prueba. En este caso, alojaremos la aplicación en un &amp;ldquo;servidor&amp;rdquo; Ubuntu para verificar su funcionamiento.&lt;/p>
&lt;h2 id="preparar-el-proyecto">Preparar el proyecto&lt;/h2>
&lt;p>Primeramente, debemos crear el poryecto &lt;strong>ASP.NET Core&lt;/strong>:&lt;/p>
&lt;ol>
&lt;li>Creamos el proyecto en Visual Studio 2022:
&lt;img src="https://cmas.dev/img/posts/2022/06/15/1.png" alt="">&lt;/li>
&lt;li>Colocamos un nombre descriptivo al proyecto nuevo:
&lt;img src="https://cmas.dev/img/posts/2022/06/15/2.png" alt="">&lt;/li>
&lt;li>Seleccionamos el .NET Core que deseamos utilizar:
&lt;img src="https://cmas.dev/img/posts/2022/06/15/3.png" alt="">&lt;/li>
&lt;li>Verificamos las opciones habilitadas para la ejecución (nos interesa &lt;strong>WSL&lt;/strong>):
&lt;img src="https://cmas.dev/img/posts/2022/06/15/4.png" alt="">&lt;/li>
&lt;/ol>
&lt;h2 id="ejecución-para-wsl">Ejecución para WSL&lt;/h2>
&lt;p>Empezamos a realizar las tareas relacionadas con la ejecución&lt;/p>
&lt;ol>
&lt;li>Hacemos clic en el botón de ejecución o presionamos la tecla &lt;em>F5&lt;/em>, saldrá un mensaje de error como este (si es que no tenemos instalado el dotnet en WSL):
&lt;img src="https://cmas.dev/img/posts/2022/06/15/5.png" alt="">&lt;/li>
&lt;li>SEguimos los pasos en la consola de WSL (para que se instale el motor de ejecución) y en Visual Studio aceptamos el mensaje:
&lt;img src="https://cmas.dev/img/posts/2022/06/15/6.png" alt="">&lt;/li>
&lt;li>Volvemos a ejecutar la aplicación (en este punto funciona):
&lt;img src="https://cmas.dev/img/posts/2022/06/15/7.png" alt="">&lt;/li>
&lt;li>Debemos agregar un poco de código para identificar en qué plataforma estamos (en la página index.cshtml agregamos la siguiente línea de código):&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;h2&amp;gt;@Environment.OsVersion&amp;lt;/h2&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Ejecutamos de nuevo la aplicación, pero seleccionamos la opción que tiene el nombre de nuestro proyecto, para poder usar el Web Server de Windows:
&lt;img src="https://cmas.dev/img/posts/2022/06/15/8.png" alt="">&lt;/li>
&lt;li>Cambiamos la configuración a &lt;strong>WSL&lt;/strong> nuevamente y ejecutamos para ver el cambio:
&lt;img src="https://cmas.dev/img/posts/2022/06/15/9.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>De esta manera hemos montado el servidor web directamente en &lt;strong>Ubuntu&lt;/strong> con &lt;strong>WSL&lt;/strong>.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Desarrollo de aplicaciones NodeJs en WSL</title><link>https://cmas.dev/posts/2022-06-08-app-nodejs-in-wsl/</link><pubDate>Wed, 08 Jun 2022 18:07:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-06-08-app-nodejs-in-wsl/</guid><description>&lt;p>En este artículo mostraré como instalar &lt;strong>Node.js&lt;/strong> en &lt;strong>WSL&lt;/strong>. También, veremos como escribir código, compilar y ejecutarlo en &lt;strong>WSL&lt;/strong> desde &lt;strong>Visual Studio Code&lt;/strong>.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25131&lt;/strong>&lt;/em>&lt;/p>
&lt;p>En Windows 11, especificamente gracias a &lt;strong>WSL - Windows Subssytem for Linux&lt;/strong> podemos instalar y ejecutar aplicaciones desarrolladas con &lt;strong>Node.js&lt;/strong> de manera bastante sencilla y rápida.&lt;/p>
&lt;h2 id="instalar-nodejs-en-wsl">Instalar Node.js en WSL&lt;/h2>
&lt;p>Preparamos WSL para la instalación de Node.js&lt;/p>
&lt;ol>
&lt;li>Verificamos las versiones de Node.js y NVM que tenemos instaladas (se supone que no las tenemos):
&lt;img src="https://cmas.dev/img/posts/2022/06/08/1.png" alt="">&lt;/li>
&lt;li>Procedemos a instalar NVM (Node Version Manager):&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Ahora, instalamos la última versión de Node.js:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">nvm install node
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Verificamos las versiones y listo:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/2.png" alt="">&lt;/li>
&lt;/ol>
&lt;h2 id="aplicacion-en-visual-studio-code">Aplicacion en Visual Studio Code&lt;/h2>
&lt;p>Dentro del Visual Studio Code creamos la aplicación y procedemos a ejecutarla normalmente.&lt;/p>
&lt;ol>
&lt;li>Creamos un archivo &lt;strong>app.js&lt;/strong>&lt;/li>
&lt;li>Escribimos las siguientes líneas de código:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">var http = require(&amp;#39;http&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">http.createServer(function (req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.writeHead(200, {&amp;#39;Content-Type&amp;#39;: &amp;#39;text/plain&amp;#39;});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.end(&amp;#39;Hola desde cmas.dev!&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}).listen(8080);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Presionamos la tecla &lt;em>F5&lt;/em> y seleccionamos la opción &lt;strong>Node.js&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/4.png" alt="">&lt;/li>
&lt;li>Veremos los controles de depuración y en la consola veremos que ha creado la aplicación:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/5.png" alt="">&lt;/li>
&lt;li>En el navegador de preferencia, colocamos la URL definida en el código y vermeos nuestro pequeña applicación:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/6.png" alt="">&lt;/li>
&lt;/ol>
&lt;h2 id="aplicacion-en-visual-studio-code-con-wsl">Aplicacion en Visual Studio Code con WSL&lt;/h2>
&lt;p>Dentro del Visual Studio Code creamos la aplicación y procedemos a ejecutarla en WSL.&lt;/p>
&lt;ol>
&lt;li>Descargar la extensión para desarrollo remoto &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">aquí&lt;/a>&lt;/li>
&lt;li>Abrimos una nueva ventana de Visual Studio Code y hacemos clicn en el icono de acceso remoto:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/7.png" alt="">&lt;/li>
&lt;li>Seleccionamos la opción de distro para WSL:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/8.png" alt="">&lt;/li>
&lt;li>Marcamos la opción Ubuntu:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/9.png" alt="">&lt;/li>
&lt;li>Abrimos la carpeta donde almacenaremos el proyecto (en Ubuntu):
&lt;img src="https://cmas.dev/img/posts/2022/06/08/10.png" alt="">&lt;/li>
&lt;li>Escribimos las siguientes líneas de código (con algunas diferencias del código anterior):&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">var http = require(&amp;#39;http&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">http.createServer(function (req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.writeHead(200, {&amp;#39;Content-Type&amp;#39;: &amp;#39;text/plain&amp;#39;});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.end(&amp;#39;¡Hola desde cmas.dev y WSL!&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}).listen(8081);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="7">
&lt;li>Ejecutamos la aplicación desde la Terminal de &lt;strong>Ubuntu&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/12.png" alt="">&lt;/li>
&lt;li>Abrimos el navegador y colocamos la dirección que especificamos en el código:
&lt;img src="https://cmas.dev/img/posts/2022/06/08/13.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>De esta manera hemos realizado una aplicación NodeJs en &lt;strong>Windows&lt;/strong> directamente así como en &lt;strong>WSL&lt;/strong>. Ambas opciones son válidas, nada más depende de la elección del desarrollador.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>WSL: Ejecutar aplicaciones con GUI Linux</title><link>https://cmas.dev/posts/2022-06-01-wsl-run-apps-gui-ubuntu/</link><pubDate>Wed, 01 Jun 2022 18:32:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-06-01-wsl-run-apps-gui-ubuntu/</guid><description>&lt;p>En este artículo mostraré cómo utilizar aplicaciones Linux (con interfaz de usuario) gracias a &lt;strong>Windows Subsystem for Linux&lt;/strong> .&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22621&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Es cierto que &lt;strong>Windows&lt;/strong> posee muchas y muy buenas aplicaciones gráficas (de hecho está basado en eso), pero Ubuntu también tiene aplicaciones muy buenas y con performance mejorada.&lt;/p>
&lt;h2 id="instalar-vlc">Instalar VLC&lt;/h2>
&lt;p>En este caso instalaremos el reproductor multimedia VLC:&lt;/p>
&lt;ol>
&lt;li>Nos dirigimos a Ubuntu &lt;strong>Windows Subsystem for Linux&lt;/strong>
&lt;img src="https://cmas.dev/img/posts/2022/06/01/1.png" alt="">&lt;/li>
&lt;li>Colocamos el comando que instala la aplicación con &lt;strong>apt&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt install vlc -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Procede a instalar y nos arroja el resultado:
&lt;img src="https://cmas.dev/img/posts/2022/06/01/2.png" alt="">&lt;/li>
&lt;li>Colocamos el comando que ejecuta la aplicación y&amp;hellip;&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">vlc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Veremos la aplicación ejecutada:
&lt;img src="https://cmas.dev/img/posts/2022/06/01/3.png" alt="">&lt;/li>
&lt;li>Si buscamos la App desde el Menú Inicio de &lt;strong>Windows&lt;/strong> la encontraremos:
&lt;img src="https://cmas.dev/img/posts/2022/06/01/4.png" alt="">&lt;/li>
&lt;li>La aplicación se ejecuta de manera nativa en &lt;strong>Windows&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/06/01/5.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Estructura básica de un proyecto con Windows App SDK</title><link>https://cmas.dev/posts/2022-05-25-basic-struct-of-windows-app-sdk-project/</link><pubDate>Wed, 25 May 2022 18:45:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-05-25-basic-struct-of-windows-app-sdk-project/</guid><description>&lt;p>En este artículo intentaré explicar lo que entiendo es la estructura básica de &lt;strong>Windows App SDK&lt;/strong>, pues resulta algo nuevo para mí (en el pasado desarrollaba con WPF y después con UWP en sus inicios). En un &lt;a href="https://cmas.dev/posts/2022-05-18-windows-app-sdk-development/">artículo anterior&lt;/a> hemos visto los primeros pasos en esta plataforma.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25126&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Según la definición tenemos que esta definición:&lt;/p>
&lt;blockquote>
&lt;p>Windows App SDK es un conjunto de nuevos componentes y herramientas para desarrolladores que representan la próxima evolución en la plataforma de desarrollo de aplicaciones de Windows. Windows App SDK proporciona un conjunto unificado de API y herramientas que se pueden usar de manera consistente por cualquier aplicación de escritorio en Windows 11 y versiones anteriores hasta Windows 10, versión 1809&lt;/p>
&lt;/blockquote>
&lt;p>Rápidamente podemos entender que su estructura básica se compone de:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Foundation&lt;/strong>: es la capa que ofrece las &lt;em>API&lt;/em> básicas para acceder a las características y servicios de &lt;em>Windows&lt;/em>, como la configuración del sistema, el almacenamiento de datos, la red y la seguridad.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>UI&lt;/strong>: es la capa que ofrece los controles y componentes de interfaz de usuario para crear aplicaciones modernas y atractivas en &lt;em>Windows&lt;/em>, como &lt;em>XAML Islands&lt;/em>, &lt;em>WinUI 3&lt;/em> y &lt;em>WebView2&lt;/em>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Frameworks&lt;/strong>: es la capa que ofrece los marcos de trabajo y patrones para facilitar el desarrollo de aplicaciones en &lt;em>Windows&lt;/em>, como &lt;em>App Lifecycle&lt;/em>, &lt;em>Push Notifications&lt;/em> y &lt;em>Reunion Windowing&lt;/em>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Tools&lt;/strong>: es la capa que ofrece las extensiones y plantillas para Visual Studio 2022 que permiten usar los componentes de &lt;strong>Windows App SDK&lt;/strong> en proyectos nuevos o existentes. También incluye un paquete &lt;em>NuGet&lt;/em> que contiene las bibliotecas de Windows App SDK.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="diferencias-entre-win32-apis-y-uwp-apis">Diferencias entre Win32 APIs y UWP APIs&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Win32 APIs&lt;/strong>: son las API de &lt;em>Windows&lt;/em> que se usan para crear aplicaciones de escritorio tradicionales en C++ o C#. Algunas de estas &lt;em>API&lt;/em> son: &lt;em>CreateWindowEx&lt;/em>, &lt;em>MessageBox&lt;/em>, &lt;em>ShellExecute&lt;/em>, etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>UWP APIs&lt;/strong>: son las API de &lt;em>Windows&lt;/em> que se usan para crear aplicaciones universales que pueden ejecutarse en diferentes dispositivos con &lt;strong>Windows 11&lt;/strong>. Algunas de estas API son: &lt;em>Windows.UI.Xaml.Controls&lt;/em>, &lt;em>Windows.Media.Capture&lt;/em>, &lt;em>Windows.Storage&lt;/em>, etc.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Windows App SDK&lt;/strong> permite usar ambas API en una misma aplicación, lo que ofrece más flexibilidad y compatibilidad a los desarrolladores1.&lt;/p>
&lt;p>Esta es una pequeña introducción (con sabor a trabajo práctico) sobre Windows App SDK. A partir de esto se vienen muchos artículos sobre este &lt;em>SDK&lt;/em>.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Desarrollo en Windows App SDK</title><link>https://cmas.dev/posts/2022-05-18-windows-app-sdk-development/</link><pubDate>Wed, 18 May 2022 21:56:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-05-18-windows-app-sdk-development/</guid><description>&lt;p>En este articulo, mostraré cómo empezar con el desarrollo con Windows App SDK especialmente diseñado para Widnows 11 y ciertas versiones de Windows 10 (superior a la versión 1809).&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22621&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Entresacando un poco las definiciones desde la &lt;a href="https://learn.microsoft.com/es-es/windows/apps/windows-app-sdk/">página oficial de Microsoft&lt;/a> encontramos este resumen:&lt;/p>
&lt;blockquote>
&lt;p>Windows App SDK es un conjunto de nuevas herramientas y componentes para desarrolladores que representa la próxima evolución en la plataforma de desarrollo de aplicaciones de Windows. Windows App SDK proporciona un conjunto unificado de API y herramientas que cualquier aplicación de escritorio puede usar de forma coherente en Windows 11 y niveles inferiores hasta Windows 10, versión 1809.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Windows App SDK complementa estas herramientas y tipos de aplicación existentes con un conjunto común de API que los desarrolladores pueden utilizar en estas plataformas.&lt;/p>
&lt;/blockquote>
&lt;p>Con todo esto podemos ver las &lt;a href="https://learn.microsoft.com/es-es/windows/apps/windows-app-sdk/#windows-app-sdk-features">&lt;strong>características de Windows App SDK&lt;/strong>&lt;/a>.&lt;/p>
&lt;h1 id="creación-de-un-proyecto-winui">Creación de un proyecto WinUI&lt;/h1>
&lt;p>Para empezar a utilizar Windows App SDK, debemos crear una interfaz de usuario y eso se explica en el sitio oficial de Microsoft:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>WinUI 3&lt;/strong> es el componente de la plataforma de interfaz de usuario nativa que se incluye con el SDK de Aplicaciones para Windows (completamente desacoplado de los SDK de Windows). El SDK de Aplicaciones para Windows proporciona un conjunto unificado de API y herramientas que se pueden usar para crear aplicaciones de escritorio de producción destinadas a Windows 10 y versiones posteriores que se pueden publicar en Microsoft Store.&lt;/p>
&lt;/blockquote>
&lt;p>Para la creación del proyecto debemos realizar los siguientes pasos:&lt;/p>
&lt;ol>
&lt;li>Crear un proyecto de tipo &lt;strong>WinUI 3&lt;/strong>
&lt;img src="https://cmas.dev/img/posts/2022/05/18/1.png" alt="">&lt;/li>
&lt;li>Se coloca un nombre descriptivo para el proyecto:
&lt;img src="https://cmas.dev/img/posts/2022/05/18/2.png" alt="">&lt;/li>
&lt;li>Se crea el proyecto con los siguientes archivos:
&lt;img src="https://cmas.dev/img/posts/2022/05/18/3.png" alt="">&lt;/li>
&lt;li>Procedemos a ejecutar la aplicación (y se ejecutará en nuestro &lt;strong>Windows 11&lt;/strong> directamente):
&lt;img src="https://cmas.dev/img/posts/2022/05/18/4.png" alt="">&lt;/li>
&lt;li>Veremos la aplicación ejecutada:
&lt;img src="https://cmas.dev/img/posts/2022/05/18/5.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>Con esto logramos crear nuestra primera aplicación &lt;strong>WinUI 3&lt;/strong>.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>UWP en Windows 11</title><link>https://cmas.dev/posts/2022-05-11-uwp-in-windows-11/</link><pubDate>Wed, 11 May 2022 19:53:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-05-11-uwp-in-windows-11/</guid><description>&lt;p>En este artículo mostraré cómo crear una aplicación UWP (Universal Windows Platform) en Windows 11 (aunque ya debemos ir dejándola ;)).&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22621&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Los prerrequisitos para poder crear son:&lt;/p>
&lt;ol>
&lt;li>Visual Studio 2022.&lt;/li>
&lt;li>UWP habilitado para el desarrollo sobre Windows 11.&lt;/li>
&lt;li>Windows 11 ;)&lt;/li>
&lt;/ol>
&lt;h2 id="crear-una-aplicación-uwp">Crear una aplicación UWP&lt;/h2>
&lt;p>Para la creación del proyecto debemos seguir los siguientes pasos:&lt;/p>
&lt;ol>
&lt;li>Crear una nueva aplicación en Visual Studio:
&lt;img src="https://cmas.dev/img/posts/2022/05/11/1.png" alt="">&lt;/li>
&lt;li>Colocamos el nombre descriptivo para el nuevo proyecto:
&lt;img src="https://cmas.dev/img/posts/2022/05/11/2.png" alt="">&lt;/li>
&lt;li>Seleccionamos la versión del destino (En Windows 11):
&lt;img src="https://cmas.dev/img/posts/2022/05/11/3.png" alt="">&lt;/li>
&lt;li>Verificamos que el proyecto se haya creado correctamente:
&lt;img src="https://cmas.dev/img/posts/2022/05/11/4.png" alt="">&lt;/li>
&lt;li>Agregamos un control de prueba para poder ejecutarlo:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;Page
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Class=&amp;#34;UWP_Blog.MainPage&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:local=&amp;#34;using:UWP_Blog&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:d=&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:mc=&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mc:Ignorable=&amp;#34;d&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Background=&amp;#34;{ThemeResource ApplicationPageBackgroundThemeBrush}&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Grid&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;TextBlock Text=&amp;#34;Hola mundo, desde UWP y el Blog de Christian&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/Grid&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/Page&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>Ejecutamos la aplicación:
&lt;img src="https://cmas.dev/img/posts/2022/05/11/5.png" alt="">&lt;/li>
&lt;li>Voilá, tenemos nuestra primera app UWP para Windows 11:
&lt;img src="https://cmas.dev/img/posts/2022/05/11/6.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>Si bien es cierto, se recomienda que las aplicaciones para Windows sean creadas con WinUI, aún es posible desarrollarlas con UWP (pero es recomendable hacer la migración correspondiente).&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Git y WSL</title><link>https://cmas.dev/posts/2022-05-04-git-and-wsl/</link><pubDate>Wed, 04 May 2022 13:48:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-05-04-git-and-wsl/</guid><description>&lt;p>En este artículo mostraré cómo instalar o actualizar git dentro de &lt;strong>Windows Subsystem for Linux&lt;/strong> de modo a poder clonar repositorio desde y hacia &lt;strong>GitHub&lt;/strong>. En un &lt;a href="https://cmas.dev/posts/2022-04-26-configuring-my-wsl-environment/">artículo anterior&lt;/a> hemos visto cómo habilitar la plataforma &lt;strong>Windows Subsystem for Linux&lt;/strong>.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22610&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Debemos seguir algunos pasos para poder isntalar/actualizar &lt;em>Git&lt;/em> dentro de &lt;strong>WSL&lt;/strong> en &lt;em>Windows 11&lt;/em>.&lt;/p>
&lt;h2 id="instalar-git-en-wsl">Instalar Git en WSL&lt;/h2>
&lt;p>Realmente, resulta muy complicado que &lt;strong>WSL&lt;/strong> no traiga instalado &lt;strong>Git&lt;/strong> (lo considera una herramienta indispensable para los desarrolladores), pero si es el caso debemos seguir estos pasos:&lt;/p>
&lt;ol>
&lt;li>Iniciar la aplicación &lt;strong>Windows Subsystem for Linux (Ubuntu)&lt;/strong>.&lt;/li>
&lt;li>Verificamos la versión de Git instalada:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git --version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Asumimos que no tenemos instalado &lt;strong>Git&lt;/strong> (aunque es difícil), entonces procedemos a instalarlo con el comenado &lt;strong>apt-get&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt install git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Veremos la versión actual instalada(Ojo: no es lo mismo Git en Windows que Git en WSL, pueden ser versiones distintas):
&lt;img src="https://cmas.dev/img/posts/2022/05/04/1.png" alt="">&lt;/li>
&lt;/ol>
&lt;h2 id="actualizar-git-en-wsl">Actualizar Git en WSL&lt;/h2>
&lt;p>Debemos seguir algunos pasos sencillos para lograrlos. Estos serían:&lt;/p>
&lt;ol>
&lt;li>Verificamos la versión de Git instalada:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git --version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Actualizamos Git utilizando el mismo comando de instalación:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt install git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Luego de actualizar tendremos la última versión disponible&lt;/li>
&lt;/ol>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>WSL sin internet</title><link>https://cmas.dev/posts/2022-04-27-wsl-no-internet/</link><pubDate>Wed, 27 Apr 2022 12:26:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-04-27-wsl-no-internet/</guid><description>&lt;p>En este artículo mostraré cómo conectar a internet en &lt;strong>Windows Subsystem for Linux&lt;/strong> para cualquier distro (pero aquí siempre con Ubuntu) utilizando &lt;strong>Windows Terminal&lt;/strong>.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22598&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Debemos seguir algunos pasos sencillos para poder habilitar internet de manera permanente en nuestra distro preferida.&lt;/p>
&lt;h2 id="conexión-a-internet-en-windows-subsystem-for-linux">Conexión a internet en Windows Subsystem for Linux&lt;/h2>
&lt;p>Primero, hacemos ping a algún DNS (que tenga salida a internet):
&lt;img src="https://cmas.dev/img/posts/2022/04/27/wsl1.png" alt="">&lt;/p>
&lt;p>Entonces, debemos abrirl el archivo &lt;strong>resolv.conf&lt;/strong> que se encuentra en nuestro distro WSL:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">nano /etc/resolv.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Abrirá el editor y procedemos a verificar el dato presente allí:
&lt;img src="https://cmas.dev/img/posts/2022/04/27/wsl3.png" alt="">&lt;/p>
&lt;p>Esa IP es privada. ¡Quítala de allí! y usemos el DNS de Google:
&lt;img src="https://cmas.dev/img/posts/2022/04/27/wsl4.png" alt="">&lt;/p>
&lt;p>Probemos nuestro comando &lt;strong>ping&lt;/strong> a ver que ocurre:
&lt;img src="https://cmas.dev/img/posts/2022/04/27/wsl5.png" alt="">&lt;/p>
&lt;h2 id="configuración-permanente-para-acceso-a-internet">Configuración permanente para acceso a Internet&lt;/h2>
&lt;p>Como paso de prueba podemos salir de Ubuntu (emular el apagado de equipo desde &lt;strong>Windows Terminal&lt;/strong>, no desde Ubuntu):
&lt;img src="https://cmas.dev/img/posts/2022/04/27/wsl6.png" alt="">&lt;/p>
&lt;p>Iniciamos Ubuntu nuevamente y probamos &lt;strong>ping&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/04/27/wsl1.png" alt="">&lt;/p>
&lt;p>¡BOOM!&lt;/p>
&lt;p>Corregimos esto al estilo Ubuntu, con &lt;strong>Terminal&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo bash -c &amp;#39;echo -e &amp;#34;[network]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">generateResolvConf = false&amp;#34; &amp;gt; /etc/wsl.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -e &amp;#34;options timeout:1 attempts:1 rotate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nameserver 8.8.8.8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nameserver 8.8.4.4&amp;#34; &amp;gt; /etc/resolv.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chattr -f +i /etc/resolv.conf&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Con esto, logramos que todo funcione correctamente&amp;gt;
&lt;img src="https://cmas.dev/img/posts/2022/04/27/wsl5.png" alt="">&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Configurando mi ambiente WSL</title><link>https://cmas.dev/posts/2022-04-26-configuring-my-wsl-environment/</link><pubDate>Tue, 26 Apr 2022 20:41:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-04-26-configuring-my-wsl-environment/</guid><description>&lt;p>En este artículo mostraré cómo configurar un ambiente de desarrollo WSL (Windows Subsystem Linux) dentro de Windows para el desarrollo de aplicaciones en múltiples plataformas (que en el futuro iré asociando a este artículo). Para este artículo ya tenemos disponible la nueva distro de Ubuntu 22.04 (recientemente lanzada).&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22598&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Debemos seguir algunos pasos para poder habilitar el WSL (Windows Subsystem for Linux) en Windows 11. Es excelente esto para probar todo tipo de aplicaciones sin salir de Windows. Especialmente preparado para .NET Core :)&lt;/p>
&lt;h2 id="preparar-windows-subsystem-for-linux">Preparar Windows Subsystem for Linux&lt;/h2>
&lt;p>Para preparar la plataforma debemos seguir estos pasos:&lt;/p>
&lt;ol>
&lt;li>Nos dirigimos a &lt;strong>Panel de Control&lt;/strong> &amp;gt; &lt;strong>Programas&lt;/strong> &amp;gt; &lt;strong>Habilitar funcionalidades de Windows&lt;/strong>.&lt;/li>
&lt;li>Buscar la opción &lt;strong>Windows Subsystem for Linux&lt;/strong>, marcamos la opción y hacemos clic en &lt;strong>Aceptar&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/04/26/Wsl1.png" alt="">&lt;/li>
&lt;li>Cuando termine la instalación debemos reiniciar el sistema operativo y veremos este nuevo enlace en el &lt;strong>Explorador de archivos&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/04/26/Wsl2.png" alt="">&lt;/li>
&lt;/ol>
&lt;h2 id="instalamos-la-distro-de-preferencia">Instalamos la distro de preferencia&lt;/h2>
&lt;p>En mi caso selecciono Ubuntu, pero existen otras que se encuentran disponibles para su instalación. Aquí procedemos a instalar desde &lt;strong>Microsoft Store&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/04/26/Wsl3.png" alt="">&lt;/p>
&lt;p>Una vez que haya culminado la instalación, procedemos a abrir la nueva App (sí, se encuentra como una App):
&lt;img src="https://cmas.dev/img/posts/2022/04/26/Wsl4.png" alt="">&lt;/p>
&lt;h2 id="windows-terminal">Windows Terminal&lt;/h2>
&lt;p>Aquí es donde empezamos a disfrutar de nuestra distro de Linux favorita para empezar a jugar con ella.&lt;/p>
&lt;p>Creamos un usuario para nuestro sistema operativo Ubuntu (puede o no ser igual al usuario de Windows):
&lt;img src="https://cmas.dev/img/posts/2022/04/26/Wsl5.png" alt="">&lt;/p>
&lt;p>Por último, accedemos a la terminal de Ubuntu y realizamos las tareas que queramos dentro de Ubuntu, que está dentro de Windows 11.
&lt;img src="https://cmas.dev/img/posts/2022/04/26/Wsl6.png" alt="">&lt;/p>
&lt;p>Podemos verificar que distro estamos ejecutando:
&lt;img src="https://cmas.dev/img/posts/2022/04/26/Wsl7.png" alt="">&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Integración de Azure DevOps con GitHub</title><link>https://cmas.dev/posts/2022-04-18-azure-devops-integration-with-github/</link><pubDate>Mon, 18 Apr 2022 23:24:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-04-18-azure-devops-integration-with-github/</guid><description>&lt;p>En este artículo mostraré cómo integrar un repositorio GitHub, que lo hemos visto en &lt;a href="https://cmas.dev/posts/2022-04-04-create-repository-github">este artículo&lt;/a>, con Azure DevOps que lo hemos visto &lt;a href="https://cmas.dev/posts/2022-04-11-create-project-azure-devops/">aquí&lt;/a>.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22598&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Primeramente, debemos ingresar a la configuración del proyecto:
&lt;img src="https://cmas.dev/img/posts/2022/04/18/1.png" alt="">&lt;/p>
&lt;p>Nos dirigmos a la sección &lt;strong>Boards&lt;/strong> &amp;gt; &lt;strong>GitHub connections&lt;/strong> y hacemos clic en el botón correspondiente:
&lt;img src="https://cmas.dev/img/posts/2022/04/18/2.png" alt="">&lt;/p>
&lt;p>Como toda aplicación tercerizada, debemos autorizar su uso:
&lt;img src="https://cmas.dev/img/posts/2022/04/18/3.png" alt="">&lt;/p>
&lt;p>Agregamos los repositorios necesarios:
&lt;img src="https://cmas.dev/img/posts/2022/04/18/4.png" alt="">&lt;/p>
&lt;p>Autorizamos a Azure Boards para el acceso a GitHub:
&lt;img src="https://cmas.dev/img/posts/2022/04/18/5.png" alt="">&lt;/p>
&lt;p>Verificamos que la conexión esté activa y funcional:
&lt;img src="https://cmas.dev/img/posts/2022/04/18/6.png" alt="">&lt;/p>
&lt;p>Tenemos lista la integración entre Azure DevOps y GitHub para proceder con la automatización de procesos. En artículos posteriores iremos avanzando con el CI/CD para sacarle el jugo a esta configuración.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Crear un proyecto en Azure DevOps</title><link>https://cmas.dev/posts/2022-04-11-create-project-azure-devops/</link><pubDate>Mon, 11 Apr 2022 18:01:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-04-11-create-project-azure-devops/</guid><description>&lt;p>En este artículo mostraré cómo crear un proyecto en Microsoft Azure DevOps para realizar todas las tareas relacionadas a CI/CD (Integración Contínua/Entrega Contíuna) con la plataforma Windows, sobre todo con UWP (Universal Windows Platform).&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22593&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Debemos ingresar a la plataforma de Azure DevOps &lt;a href="https://dev.azure.com/">aquí&lt;/a> y accederá al perfil (sino tienes una cuenta creada, es el momento de hacerlo).&lt;/p>
&lt;p>Procedemos a crear el proyecto:
&lt;img src="https://cmas.dev/img/posts/2022/04/11/1.png" alt="">&lt;/p>
&lt;p>Completamos los campos necesarios para la creación del proyecto y completamos las necesidades:
&lt;img src="https://cmas.dev/img/posts/2022/04/11/2.png" alt="">&lt;/p>
&lt;p>Una vez creado el proyecto veremos los accesos necesarios para la implementación de CI/CD:
&lt;img src="https://cmas.dev/img/posts/2022/04/11/3.png" alt="">&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Crear un repositorio en GitHub</title><link>https://cmas.dev/posts/2022-04-04-create-repository-github/</link><pubDate>Mon, 04 Apr 2022 22:13:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-04-04-create-repository-github/</guid><description>&lt;p>En este artículo mostraré cómo crear un repositorio en GitHub para poder integrarlo en el futuro con Azure DevOps.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22581&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Crear un repositorio en GitHub es un proceso muy sencillo. La documentación es muy completa y se encuentra &lt;a href="https://docs.github.com/es/repositories">aquí&lt;/a>. Este artículo sólo busca acortar el proceso de creación de un repositorio que lo utilizaremos las próximas semanas.&lt;/p>
&lt;h2 id="crear-nuevo-repositorio">Crear nuevo repositorio&lt;/h2>
&lt;p>Para crear el nuevo repositorio buscamos el menú &lt;strong>New&lt;/strong>
&lt;img src="https://cmas.dev/img/posts/2022/04/04/0.png" alt="">&lt;/p>
&lt;p>Luego, procedemos a cargar los datos necesarios para la creación del repositorio:
&lt;img src="https://cmas.dev/img/posts/2022/04/04/1.png" alt="">&lt;/p>
&lt;p>Por último, verificamos el repositorio creado:
&lt;img src="https://cmas.dev/img/posts/2022/04/04/2.png" alt="">&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>VS: Instalando Visual Studio 2022 Preview 1</title><link>https://cmas.dev/posts/2021-06-19-instalando-visual-studio-2022-preview/</link><pubDate>Sat, 19 Jun 2021 11:56:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2021-06-19-instalando-visual-studio-2022-preview/</guid><description>&lt;p>El pasado 17 de junio, Microsoft ha lanzado la versión Preview del nuevo Visual Studio 2022, el cual posee muchas mejoras en cuanto a productividad se refiere. En este artículo mostraré el proceso de instalación de Visual Studio 2022 Preview 1.&lt;/p>
&lt;p>Para mayor detalle de las características del producto puedes ver &lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-preview-1-now-available/">aquí&lt;/a>&lt;/p>
&lt;h1 id="instalación-de-visual-studio-2022-preview-1">Instalación de Visual Studio 2022 Preview 1&lt;/h1>
&lt;p>Para la instalación del nuevo Visual Studio debemos realizar las siguientes tareas:
0. En mi caso, procedí a desinstalar todas las versiones de Visual Studio que tenía instaladas:&lt;br>
&lt;img src="https://cmas.dev/img/posts/visualstudio/visual-studio-2022-preview-1_1.png" alt="">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Seleccionar la versión de Visual Studio que necesitamos (siempre elijo Professional):&lt;br>
&lt;img src="https://cmas.dev/img/posts/visualstudio/visual-studio-2022-preview-1_2.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Veremos la ventana principal del instalador y hacemos clic en &amp;ldquo;Continuar&amp;rdquo;:&lt;br>
&lt;img src="https://cmas.dev/img/posts/visualstudio/visual-studio-2022-preview-1_3.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Seleccionamos los componentes necesarios para los desarrollos que haremos (como mi foco es Windows y WSL seleccioné estos):&lt;br>
&lt;img src="https://cmas.dev/img/posts/visualstudio/visual-studio-2022-preview-1_4.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Leemos el &lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-preview-1-now-available/">blog&lt;/a> indicado más arriba mientras esperamos al instalador que termine su trabajo:&lt;br>
&lt;img src="https://cmas.dev/img/posts/visualstudio/visual-studio-2022-preview-1_5.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Listo. Estamos listos para la primera experiencia Visual Studio 2022 Preview 1:&lt;br>
&lt;img src="https://cmas.dev/img/posts/visualstudio/visual-studio-2022-preview-1_6.png" alt="">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="primera-vez-con-visual-studio-2022-preview-1">Primera vez con Visual Studio 2022 Preview 1&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>Una vez instalado procedemos a iniciar el nuevo programa instalado:&lt;br>
&lt;img src="https://cmas.dev/img/posts/visualstudio/visual-studio-2022-preview-1_7.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pantalla principal del Visual Studio:&lt;br>
&lt;img src="https://cmas.dev/img/posts/visualstudio/visual-studio-2022-preview-1_8.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Creación de un nuevo proyecto:&lt;br>
&lt;img src="https://cmas.dev/img/posts/visualstudio/visual-studio-2022-preview-1_9.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Entorno de desarrollo UWP (Universal Windows Platform):&lt;br>
&lt;img src="https://cmas.dev/img/posts/visualstudio/visual-studio-2022-preview-1_10.png" alt="">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>De esta manera, hemos visto cómo instalar Visual Studio 2022 Preview 1 y hemos dado un vistazo general en su primer uso.&lt;/p>
&lt;p>Espero que lo puedan probar y dejen su feedback. ¡A disfrutarlo!&lt;/p></description></item></channel></rss>