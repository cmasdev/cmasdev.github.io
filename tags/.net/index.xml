<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.NET on Christian Amado</title><link>https://cmas.dev/tags/.net/</link><description>Recent content in .NET on Christian Amado</description><generator>Hugo</generator><language>es</language><lastBuildDate>Tue, 29 Apr 2025 00:00:00 -0300</lastBuildDate><atom:link href="https://cmas.dev/tags/.net/index.xml" rel="self" type="application/rss+xml"/><item><title>Creando analizadores personalizados en C# con Roslyn</title><link>https://cmas.dev/posts/2025-04-29-creating-analizers-in-csharp/</link><pubDate>Tue, 29 Apr 2025 00:00:00 -0300</pubDate><guid>https://cmas.dev/posts/2025-04-29-creating-analizers-in-csharp/</guid><description>&lt;p>Mantener un código limpio, coherente y alineado con estándares internos es clave en proyectos profesionales. Aunque herramientas como &lt;strong>SonarQube&lt;/strong>, &lt;strong>StyleCop&lt;/strong> o &lt;strong>ReSharper&lt;/strong> ayudan, a veces es necesario ir más allá y crear reglas personalizadas que se adapten a las necesidades específicas del equipo o la arquitectura.&lt;/p>
&lt;p>Con &lt;strong>Roslyn&lt;/strong>, el compilador de &lt;strong>C#&lt;/strong> y &lt;strong>VB.NET&lt;/strong>, es posible crear analizadores (analyzers) que inspeccionen el código fuente, detecten patrones y ofrezcan sugerencias o advertencias en tiempo de compilación. En este artículo se muestra cómo crear, probar e integrar un analizador personalizado en un proyecto C#.&lt;/p></description></item><item><title>Native AOT en .NET 9</title><link>https://cmas.dev/posts/2025-04-22-aot-nativo-dotnet-9/</link><pubDate>Tue, 22 Apr 2025 00:00:00 -0300</pubDate><guid>https://cmas.dev/posts/2025-04-22-aot-nativo-dotnet-9/</guid><description>&lt;p>Con cada nueva versión de &lt;strong>.NET&lt;/strong>, &lt;strong>Microsoft&lt;/strong> ha trabajado activamente en mejorar el rendimiento, el tamaño de despliegue y la experiencia en entornos de bajo consumo. Uno de los avances más importantes en este sentido es &lt;strong>Native AOT&lt;/strong> (&lt;em>Ahead-of-Time Compilation&lt;/em>). Introducido como parte estable en &lt;strong>.NET 7&lt;/strong>, y refinado aún más en &lt;strong>.NET 8&lt;/strong> y &lt;strong>.NET 9&lt;/strong>, &lt;strong>Native AOT&lt;/strong> permite compilar aplicaciones directamente a código nativo, eliminando por completo la dependencia del &lt;strong>CLR&lt;/strong> en tiempo de ejecución.&lt;/p>
&lt;p>Este artículo explora cómo utilizar &lt;strong>Native AOT&lt;/strong> en aplicaciones de consola en &lt;strong>.NET 9&lt;/strong>, con un enfoque práctico para reducir significativamente el tiempo de arranque y el consumo de memoria.&lt;/p></description></item><item><title>Despliegue continuo de Blazor con Azure DevOps</title><link>https://cmas.dev/posts/2025-03-26-blazor-azure-devops/</link><pubDate>Wed, 26 Mar 2025 00:00:00 -0300</pubDate><guid>https://cmas.dev/posts/2025-03-26-blazor-azure-devops/</guid><description>&lt;p>La automatización del proceso de construcción, prueba y despliegue de aplicaciones &lt;strong>Blazor&lt;/strong> es esencial para mantener un ciclo de desarrollo ágil, confiable y repetible. &lt;strong>Azure DevOps&lt;/strong> proporciona un conjunto completo de herramientas que permiten implementar pipelines de integración y entrega continua (CI/CD) para aplicaciones &lt;strong>Blazor Server&lt;/strong> o &lt;strong>Blazor WebAssembly&lt;/strong>.&lt;/p>
&lt;p>Este artículo explica cómo configurar un pipeline de CI/CD para una aplicación &lt;strong>Blazor Server&lt;/strong>, incluyendo la integración con un repositorio Git, la definición del proceso de build y el despliegue automático a &lt;strong>Azure App Service&lt;/strong>.&lt;/p></description></item><item><title>Dashboards interactivos con Blazor y gráficos dinámicos</title><link>https://cmas.dev/posts/2025-03-19-blazor-dashboard/</link><pubDate>Wed, 19 Mar 2025 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2025-03-19-blazor-dashboard/</guid><description>&lt;p>Los dashboards interactivos se han convertido en herramientas esenciales para visualizar grandes volúmenes de información en tiempo real. &lt;strong>Blazor&lt;/strong>, como framework moderno para construir aplicaciones web con C#, permite crear interfaces ricas que se ejecutan directamente en el navegador o en el servidor. Cuando se combina con bibliotecas de gráficos dinámicos como Chart.js o ApexCharts, Blazor ofrece una experiencia visual potente y altamente personalizable.&lt;/p>
&lt;p>Este artículo explora cómo construir un dashboard interactivo en &lt;strong>Blazor Server&lt;/strong> utilizando datos dinámicos y gráficos en tiempo real, abordando tanto el diseño del componente visual como la lógica de actualización de datos.&lt;/p></description></item><item><title>Integración de Blazor con bases de datos SQL en Azure</title><link>https://cmas.dev/posts/2025-03-12-blazor-sql-azure/</link><pubDate>Wed, 12 Mar 2025 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2025-03-12-blazor-sql-azure/</guid><description>&lt;p>El desarrollo de aplicaciones web modernas con &lt;strong>Blazor&lt;/strong> permite aprovechar el poder de .NET para construir interfaces interactivas del lado cliente utilizando &lt;strong>C#&lt;/strong>. A su vez, las bases de datos SQL en &lt;strong>Azure&lt;/strong> ofrecen una solución altamente escalable, segura y gestionada para el almacenamiento de datos. Integrar ambas tecnologías representa una solución robusta para proyectos empresariales que requieren rendimiento, fiabilidad y facilidad de mantenimiento.&lt;/p>
&lt;p>Este artículo detalla cómo conectar una aplicación Blazor Server con una base de datos SQL en &lt;strong>Azure&lt;/strong>, utilizando &lt;strong>Entity Framework Core&lt;/strong> como ORM (Object-Relational Mapping). Se cubre desde la creación de la base de datos hasta la implementación de operaciones CRUD básicas.&lt;/p></description></item><item><title>Optimización de rendimiento en Blazor WebAssembly</title><link>https://cmas.dev/posts/2025-01-06-performance-optimization-blazor-webassembly/</link><pubDate>Mon, 06 Jan 2025 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2025-01-06-performance-optimization-blazor-webassembly/</guid><description>&lt;p>&lt;strong>Blazor WebAssembly&lt;/strong> es una tecnología poderosa que permite a los desarrolladores crear aplicaciones web interactivas utilizando &lt;strong>C#&lt;/strong> y &lt;strong>.NET&lt;/strong> en lugar de &lt;strong>JavaScript&lt;/strong>. Sin embargo, debido a las características inherentes de su arquitectura, la optimización del rendimiento puede ser un desafío crítico. En este artículo, exploraremos técnicas, estrategias y mejores prácticas para optimizar el rendimiento en aplicaciones &lt;strong>Blazor WebAssembly&lt;/strong>.&lt;/p></description></item><item><title>Usando Blazor para crear Progressive Web Apps (PWA)</title><link>https://cmas.dev/posts/2024-12-24-blazor-pwa/</link><pubDate>Tue, 24 Dec 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-12-24-blazor-pwa/</guid><description>&lt;p>&lt;strong>Blazor&lt;/strong>, el framework moderno basado en &lt;strong>.NET&lt;/strong>, ha demostrado ser una herramienta poderosa para el desarrollo de aplicaciones web interactivas. Combinado con las capacidades de &lt;strong>Progressive Web Apps (PWA)&lt;/strong>, ofrece una forma innovadora de construir aplicaciones que funcionan offline. Se pueden instalar en dispositivos y ofrecen una experiencia similar a las aplicaciones nativas. En este artículo, exploraremos cómo usar &lt;strong>Blazor&lt;/strong> para crear &lt;strong>PWAs&lt;/strong>, centrándonos en las nuevas capacidades introducidas con &lt;strong>.NET 9&lt;/strong>, buenas prácticas y ejemplos detallados.&lt;/p></description></item><item><title>Testing unitario en Blazor: Herramientas y estrategias</title><link>https://cmas.dev/posts/2024-10-16-testing-unitario-in-blazor/</link><pubDate>Wed, 16 Oct 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-10-16-testing-unitario-in-blazor/</guid><description>&lt;p>El desarrollo de aplicaciones robustas y fiables en &lt;strong>Blazor&lt;/strong> requiere un enfoque disciplinado hacia las pruebas unitarias. Las pruebas unitarias no solo garantizan que los componentes y servicios funcionen como se espera, sino que también facilitan el mantenimiento, la detección temprana de errores y la calidad del software. En este artículo, exploraremos en detalle cómo realizar pruebas unitarias en Blazor utilizando herramientas modernas, estrategias eficaces y ejemplos prácticos.&lt;/p></description></item><item><title>Uso de Azure Cosmos DB en aplicaciones Blazor</title><link>https://cmas.dev/posts/2024-10-09-azure-cosmos-in-blazor/</link><pubDate>Wed, 09 Oct 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-10-09-azure-cosmos-in-blazor/</guid><description>&lt;p>&lt;strong>Azure Cosmos DB&lt;/strong> es una base de datos distribuida globalmente y altamente escalable que permite almacenar y consultar datos de forma rápida y segura. Al integrarla con aplicaciones &lt;strong>Blazor&lt;/strong>, puedes construir soluciones web modernas y dinámicas con acceso a datos en tiempo real. Este artículo ofrece un instructivo paso a paso para usar &lt;strong>Azure Cosmos DB&lt;/strong> con &lt;strong>Blazor&lt;/strong>, incluyendo ejemplos de código prácticos y buenas prácticas.&lt;/p></description></item><item><title>Blazor WebAssembly vs Blazor Server: ¿Cuál elegir?</title><link>https://cmas.dev/posts/2024-10-02-blazor-webassembly-vs-server/</link><pubDate>Wed, 02 Oct 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-10-02-blazor-webassembly-vs-server/</guid><description>&lt;p>&lt;strong>Blazor&lt;/strong>, el framework de desarrollo de aplicaciones web basado en &lt;strong>.NET&lt;/strong>, ofrece dos opciones principales para crear aplicaciones interactivas: &lt;strong>Blazor WebAssembly&lt;/strong> y &lt;strong>Blazor Server&lt;/strong>. Ambas tecnologías tienen sus propias fortalezas, debilidades y casos de uso ideales. En este artículo, exploraremos en detalle estas dos modalidades para ayudarte a decidir cuál se adapta mejor a tu proyecto.&lt;/p></description></item><item><title>.NET Web API con Proyecto IDX</title><link>https://cmas.dev/posts/2024-07-17-dotnet-project-idx/</link><pubDate>Wed, 17 Jul 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-07-17-dotnet-project-idx/</guid><description>&lt;p>En este artículo veremos cómo crear una Web API básica con el nuevo &lt;strong>Proyecto IDX&lt;/strong> de &lt;strong>Google&lt;/strong>, totalmente desde el navegador sin la necesidad de instalar absolutamente nada en él.&lt;/p>
&lt;p>El &lt;strong>Proyecto IDX&lt;/strong>, según &lt;strong>Google&lt;/strong> es:&lt;/p>
&lt;blockquote>
&lt;p>Project IDX es un espacio de trabajo asistido por IA para el desarrollo de aplicaciones multiplataforma y de pila completa en la nube.
Con soporte para una amplia gama de marcos, lenguajes y servicios, además de integraciones con sus productos favoritos de Google, IDX optimiza su flujo de trabajo de desarrollo para que pueda crear y enviar aplicaciones entre plataformas con velocidad, facilidad y calidad.&lt;/p>&lt;/blockquote>
&lt;p>Más info &lt;a href="https://idx.dev/" class="external-link" target="_blank" rel="noopener">aquí&lt;/a>&lt;/p></description></item><item><title>Blazor WebAssembly con .NET 9: Nuevas características y mejoras</title><link>https://cmas.dev/posts/2024-07-10-blazor-wa-dotnet-9/</link><pubDate>Wed, 10 Jul 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-07-10-blazor-wa-dotnet-9/</guid><description>&lt;p>&lt;strong>Blazor WebAssembly&lt;/strong> ha sido una de las tecnologías más populares en el desarrollo de aplicaciones web interactivas con &lt;strong>C#&lt;/strong> en lugar de &lt;strong>JavaScript&lt;/strong>. Con la llegada de &lt;strong>.NET 9&lt;/strong>, &lt;strong>Blazor WebAssembly&lt;/strong> ha incorporado nuevas características y mejoras que optimizan tanto el rendimiento como la experiencia de desarrollo. En este artículo, exploraremos estas nuevas capacidades con ejemplos prácticos y detallaremos cómo sacarles el máximo provecho.&lt;/p></description></item><item><title>Optimización de rendimiento en Blazor WebAssembly: Estrategias y buenas prácticas con .NET</title><link>https://cmas.dev/posts/2024-07-03-blazor-performance-optimization/</link><pubDate>Wed, 03 Jul 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-07-03-blazor-performance-optimization/</guid><description>&lt;p>&lt;strong>Blazor WebAssembly&lt;/strong> ha revolucionado el desarrollo de aplicaciones web modernas, permitiendo ejecutar aplicaciones &lt;strong>.NET&lt;/strong> directamente en el navegador utilizando &lt;strong>WebAssembly&lt;/strong>. Aunque &lt;strong>Blazor WebAssembly&lt;/strong> ofrece una excelente experiencia de usuario y una integración perfecta con &lt;strong>.NET&lt;/strong>, es crucial aplicar estrategias y buenas prácticas de optimización para asegurar que nuestras aplicaciones funcionen de manera eficiente, especialmente cuando se trata de aplicaciones grandes y complejas.&lt;/p>
&lt;p>En este artículo, exploraremos estrategias y técnicas de optimización para mejorar el rendimiento de aplicaciones &lt;strong>Blazor WebAssembly&lt;/strong> usando &lt;strong>.NET 8&lt;/strong>, con ejemplos prácticos de código y buenas prácticas.&lt;/p></description></item><item><title>Autenticación y autorización en Blazor WebAssembly con Microsoft Entra ID</title><link>https://cmas.dev/posts/2024-06-26-identity-blazor-wa-entra/</link><pubDate>Wed, 26 Jun 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-06-26-identity-blazor-wa-entra/</guid><description>&lt;p>&lt;strong>Blazor WebAssembly&lt;/strong> es una tecnología poderosa dentro del ecosistema &lt;strong>.NET&lt;/strong> que permite construir aplicaciones web interactivas completamente en C#. Para aplicaciones empresariales y seguras, la autenticación y autorización son aspectos fundamentales. &lt;strong>Microsoft Entra ID&lt;/strong> (anteriormente Azure Active Directory) proporciona una solución confiable y escalable para la gestión de identidad. En este artículo, exploraremos cómo integrar autenticación y autorización en una aplicación &lt;strong>Blazor WebAssembly&lt;/strong> utilizando &lt;strong>.NET 8&lt;/strong> y &lt;strong>Microsoft Entra ID&lt;/strong>.&lt;/p></description></item><item><title>Despliegue de aplicaciones Blazor en Azure App Services</title><link>https://cmas.dev/posts/2024-04-17-deploy-blazor-apps-azure/</link><pubDate>Wed, 17 Apr 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-04-17-deploy-blazor-apps-azure/</guid><description>&lt;p>El despliegue de aplicaciones Blazor en Azure App Services ofrece una forma rápida y eficiente de llevar tus proyectos al entorno de producción. Azure proporciona escalabilidad, seguridad y opciones flexibles para automatizar el flujo de trabajo de despliegue. En este artículo, exploramos tres métodos clave: usando Visual Studio, la CLI de Azure, y GitHub Actions, con pasos prácticos y ejemplos detallados. Con las mejoras de .NET 8, las aplicaciones Blazor ahora son más rápidas y optimizadas para la nube, lo que facilita la entrega de soluciones web escalables y modernas.&lt;/p></description></item><item><title>Creación de componentes reutilizables en Blazor para aplicaciones escalables</title><link>https://cmas.dev/posts/2024-04-10-blazor-reusable-components/</link><pubDate>Wed, 10 Apr 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-04-10-blazor-reusable-components/</guid><description>&lt;p>Los componentes reutilizables son esenciales para construir aplicaciones Blazor escalables y mantenibles. Este artículo explora cómo aprovechar las capacidades de .NET 8 para crear componentes modulares que mejoren la eficiencia y la reutilización en proyectos de cualquier tamaño. Además, aprenderás las mejores prácticas y técnicas clave para optimizar la construcción de interfaces dinámicas con Blazor.&lt;/p></description></item><item><title>Introducción a Blazor: Cambiando el paradigma del desarrollo web</title><link>https://cmas.dev/posts/2024-04-03-intro-blazor/</link><pubDate>Wed, 03 Apr 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-04-03-intro-blazor/</guid><description>&lt;p>El framework de Microsoft, está transformando el desarrollo web al permitir crear aplicaciones interactivas con C# y .NET, eliminando la necesidad de JavaScript. Con las mejoras de .NET 8, ofrece mayor rendimiento y flexibilidad, facilitando la creación de aplicaciones tanto en el cliente como en el servidor. Este artículo explora cómo Blazor redefine el desarrollo web y muestra cómo empezar a usarlo.&lt;/p></description></item><item><title>Incrustar página web externa en Power Apps</title><link>https://cmas.dev/posts/2023-09-20-embed-external-page-in-power-apps/</link><pubDate>Wed, 20 Sep 2023 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2023-09-20-embed-external-page-in-power-apps/</guid><description>&lt;p>En este artículo veremos cómo incrustar oáginas web externas en &lt;strong>Microsoft Power Apps&lt;/strong> como si incluyeramos un IFrame dentro de nuestra App.&lt;/p></description></item><item><title>Desarrollo en Windows App SDK</title><link>https://cmas.dev/posts/2022-05-18-windows-app-sdk-development/</link><pubDate>Wed, 18 May 2022 21:56:00 -0400</pubDate><guid>https://cmas.dev/posts/2022-05-18-windows-app-sdk-development/</guid><description>&lt;p>En este articulo, mostraré cómo empezar con el desarrollo con Windows App SDK especialmente diseñado para Widnows 11 y ciertas versiones de Windows 10 (superior a la versión 1809).&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22621&lt;/strong>&lt;/em>&lt;/p></description></item></channel></rss>