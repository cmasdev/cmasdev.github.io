<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.NET on Christian Amado's Blog</title><link>https://cmas.dev/tags/.net/</link><description>Recent content in .NET on Christian Amado's Blog</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Tue, 24 Dec 2024 00:00:00 -0400</lastBuildDate><atom:link href="https://cmas.dev/tags/.net/index.xml" rel="self" type="application/rss+xml"/><item><title>Usando Blazor para crear Progressive Web Apps (PWA)</title><link>https://cmas.dev/posts/2024-12-24-blazor-pwa/</link><pubDate>Tue, 24 Dec 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-12-24-blazor-pwa/</guid><description>&lt;p>&lt;strong>Blazor&lt;/strong>, el framework moderno basado en &lt;strong>.NET&lt;/strong>, ha demostrado ser una herramienta poderosa para el desarrollo de aplicaciones web interactivas. Combinado con las capacidades de &lt;strong>Progressive Web Apps (PWA)&lt;/strong>, ofrece una forma innovadora de construir aplicaciones que funcionan offline. Se pueden instalar en dispositivos y ofrecen una experiencia similar a las aplicaciones nativas. En este artículo, exploraremos cómo usar &lt;strong>Blazor&lt;/strong> para crear &lt;strong>PWAs&lt;/strong>, centrándonos en las nuevas capacidades introducidas con &lt;strong>.NET 9&lt;/strong>, buenas prácticas y ejemplos detallados.&lt;/p>
&lt;h2 id="qué-es-una-progressive-web-app-pwa">¿Qué es una Progressive Web App (PWA)?&lt;/h2>
&lt;p>Las &lt;strong>PWAs&lt;/strong> son aplicaciones web que combinan las mejores características de las aplicaciones web y las nativas. Algunas de sus características clave incluyen:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Capacidad offline&lt;/strong>: Funcionan sin conexión a internet mediante el uso de &lt;em>Service Workers&lt;/em>.&lt;/li>
&lt;li>&lt;strong>Instalables&lt;/strong>: Se pueden agregar a la pantalla de inicio de un dispositivo.&lt;/li>
&lt;li>&lt;strong>Rápidas y responsivas&lt;/strong>: Optimizadas para ofrecer un rendimiento similar al de las aplicaciones nativas.&lt;/li>
&lt;li>&lt;strong>Seguras&lt;/strong>: Utilizan &lt;em>HTTPS&lt;/em> para garantizar conexiones seguras.&lt;/li>
&lt;/ol>
&lt;h2 id="por-qué-usar-blazor-para-pwas">¿Por qué usar Blazor para PWAs?&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>Reutilización de código&lt;/strong>: Con &lt;strong>Blazor&lt;/strong>, puedes usar &lt;strong>C#&lt;/strong> y &lt;strong>.NET&lt;/strong> tanto en el cliente como en el servidor.&lt;/li>
&lt;li>&lt;strong>Ecosistema robusto&lt;/strong>: Accede a las bibliotecas de .&lt;strong>NET&lt;/strong> y herramientas modernas.&lt;/li>
&lt;li>&lt;strong>Soporte para WebAssembly&lt;/strong>: &lt;strong>Blazor WebAssembly&lt;/strong> permite ejecutar aplicaciones completas en el navegador.&lt;/li>
&lt;li>&lt;strong>Integración nativa de PWA&lt;/strong>: Con configuraciones simples, &lt;strong>Blazor&lt;/strong> puede transformar una aplicación en una &lt;strong>PWA&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;h2 id="configuración-inicial">Configuración inicial&lt;/h2>
&lt;h3 id="requisitos-previos">Requisitos previos&lt;/h3>
&lt;ol>
&lt;li>Tener instalado &lt;strong>.NET 9 SDK&lt;/strong>:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">dotnet --version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Editor de código, como &lt;strong>Visual Studio 2022&lt;/strong> o &lt;strong>Visual Studio Code&lt;/strong>.&lt;/li>
&lt;li>Navegador moderno compatible con &lt;strong>PWAs&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;h3 id="crear-un-proyecto-blazor-webassembly">Crear un proyecto Blazor WebAssembly&lt;/h3>
&lt;ol>
&lt;li>Ejecutar el comando para crear un proyecto &lt;strong>PWA&lt;/strong>:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">dotnet new blazorwasm -o BlazorPwaApp --pwa
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Navegar al directorio del proyecto:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd BlazorPwaApp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Ejecutar la aplicación:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">dotnet run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>Al usar la opción &lt;code>--pwa&lt;/code>, el proyecto incluye configuraciones predeterminadas para convertirlo en una &lt;strong>PWA&lt;/strong>.&lt;/p>
&lt;h2 id="entender-los-archivos-clave-de-una-pwa">Entender los archivos clave de una PWA&lt;/h2>
&lt;h3 id="manifestjson">&lt;code>manifest.json&lt;/code>&lt;/h3>
&lt;p>El archivo &lt;code>manifest.json&lt;/code> proporciona metadatos sobre la aplicación, como el nombre, íconos y configuraciones de inicio.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;short_name&amp;#34;: &amp;#34;BlazorPWA&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;Blazor Progressive Web App&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;start_url&amp;#34;: &amp;#34;/&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;display&amp;#34;: &amp;#34;standalone&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;background_color&amp;#34;: &amp;#34;#ffffff&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;theme_color&amp;#34;: &amp;#34;#0078D7&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;icons&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;src&amp;#34;: &amp;#34;icons/icon-192.png&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;sizes&amp;#34;: &amp;#34;192x192&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;image/png&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;src&amp;#34;: &amp;#34;icons/icon-512.png&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;sizes&amp;#34;: &amp;#34;512x512&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;image/png&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="service-worker">Service Worker&lt;/h3>
&lt;p>El &lt;em>Service Worker&lt;/em> gestiona el almacenamiento en caché y las funcionalidades offline. En &lt;strong>Blazor&lt;/strong>, el archivo predeterminado es &lt;code>service-worker.published.js&lt;/code>.&lt;/p>
&lt;h4 id="ejemplo-de-manejo-de-caché">Ejemplo de manejo de caché&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">self.addEventListener(&amp;#39;install&amp;#39;, event =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> event.waitUntil(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> caches.open(&amp;#39;blazor-cache&amp;#39;).then(cache =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return cache.addAll([
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;/&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;index.html&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;manifest.json&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;_framework/blazor.webassembly.js&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">self.addEventListener(&amp;#39;fetch&amp;#39;, event =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> event.respondWith(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> caches.match(event.request).then(response =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return response || fetch(event.request);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="crear-una-experiencia-offline">Crear una experiencia offline&lt;/h2>
&lt;h3 id="habilitar-funcionalidad-offline">Habilitar funcionalidad offline&lt;/h3>
&lt;ol>
&lt;li>Actualizar el &lt;em>Service Worker&lt;/em> para gestionar recursos adicionales.&lt;/li>
&lt;li>Configurar rutas en &lt;code>manifest.json&lt;/code> y asegurarse de incluir recursos clave.&lt;/li>
&lt;/ol>
&lt;h4 id="ejemplo">Ejemplo&lt;/h4>
&lt;p>Agrega un mensaje personalizado para los usuarios sin conexión:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">@if (isOffline)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;p&amp;gt;No tienes conexión a internet. Algunas funcionalidades pueden no estar disponibles.&amp;lt;/p&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@code {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private bool isOffline;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> protected override void OnInitialized()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> isOffline = !navigator.onLine;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> window.addEventListener(&amp;#39;online&amp;#39;, () =&amp;gt; isOffline = false);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> window.addEventListener(&amp;#39;offline&amp;#39;, () =&amp;gt; isOffline = true);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="buenas-prácticas-para-pwas-con-blazor">Buenas prácticas para PWAs con Blazor&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>Optimizar recursos&lt;/strong>:
&lt;ul>
&lt;li>Usa herramientas como &lt;code>dotnet publish&lt;/code> con opciones para reducir el tamaño de los archivos.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Usar HTTPS&lt;/strong>:
&lt;ul>
&lt;li>Las &lt;strong>PWAs&lt;/strong> requieren &lt;em>HTTPS&lt;/em> para funcionar correctamente.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Pruebas regulares&lt;/strong>:
&lt;ul>
&lt;li>Prueba la aplicación en diferentes navegadores y dispositivos.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Actualizar el Service Worker&lt;/strong>:
&lt;ul>
&lt;li>Implementa una estrategia para actualizar el &lt;em>Service Worker&lt;/em> cuando haya cambios significativos.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Diseño responsivo&lt;/strong>:
&lt;ul>
&lt;li>Asegúrate de que la interfaz funcione en diferentes tamaños de pantalla.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="ventajas-y-limitaciones-de-blazor-para-pwas">Ventajas y limitaciones de Blazor para PWAs&lt;/h2>
&lt;h3 id="ventajas">Ventajas&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Reutilización de código&lt;/strong> entre plataformas.&lt;/li>
&lt;li>&lt;strong>Integración nativa con .NET&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Compatibilidad con WebAssembly&lt;/strong> para un rendimiento eficiente en el cliente.&lt;/li>
&lt;/ol>
&lt;h3 id="limitaciones">Limitaciones&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Tamaño inicial&lt;/strong> alto en &lt;strong>Blazor WebAssembly&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Dependencia del ecosistema .NET&lt;/strong> para ciertos escenarios.&lt;/li>
&lt;li>&lt;strong>Curva de aprendizaje&lt;/strong> para desarrolladores nuevos en &lt;strong>.NET&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;h2 id="conclusión">Conclusión&lt;/h2>
&lt;p>Combinar las capacidades de &lt;strong>Blazor&lt;/strong> y &lt;strong>PWAs&lt;/strong> permite a los desarrolladores crear aplicaciones modernas y escalables que funcionan offline, se pueden instalar y ofrecen una experiencia de usuario mejorada. Aunque existen algunas limitaciones, las ventajas de usar &lt;strong>Blazor&lt;/strong> con &lt;strong>PWA&lt;/strong> superan ampliamente los desafíos, especialmente para equipos que ya utilizan &lt;strong>.NET&lt;/strong> en su flujo de desarrollo. ¡Explora las posibilidades de &lt;strong>Blazor&lt;/strong> para &lt;strong>PWAs&lt;/strong> y lleva tus aplicaciones web al siguiente nivel!&lt;/p></description></item><item><title>.NET Web API con Proyecto IDX</title><link>https://cmas.dev/posts/2024-07-17-dotnet-project-idx/</link><pubDate>Wed, 17 Jul 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-07-17-dotnet-project-idx/</guid><description>&lt;p>En este artículo veremos cómo crear una Web API básica con el nuevo &lt;strong>Proyecto IDX&lt;/strong> de &lt;strong>Google&lt;/strong>, totalmente desde el navegador sin la necesidad de instalar absolutamente nada en él.&lt;/p>
&lt;p>El &lt;strong>Proyecto IDX&lt;/strong>, según &lt;strong>Google&lt;/strong> es:&lt;/p>
&lt;blockquote>
&lt;p>Project IDX es un espacio de trabajo asistido por IA para el desarrollo de aplicaciones multiplataforma y de pila completa en la nube.
Con soporte para una amplia gama de marcos, lenguajes y servicios, además de integraciones con sus productos favoritos de Google, IDX optimiza su flujo de trabajo de desarrollo para que pueda crear y enviar aplicaciones entre plataformas con velocidad, facilidad y calidad.&lt;/p>
&lt;/blockquote>
&lt;p>Más info &lt;a href="https://idx.dev/">aquí&lt;/a>&lt;/p>
&lt;p>En este artículo veremos cómo crear una app backend con .NET, bien sencilla a modo de demostración. Para ello, seguiremos los siguientes pasos:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Ingresamos al IDE (web) &lt;a href="https://idx.google.com/?pli=1">aquí&lt;/a>. Se necesita iniciar sesión con una cuenta &lt;strong>Google&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Buscamos más plantillas (la idea es encontrar a .NET):
&lt;img src="https://i.ibb.co/ZWH4KVc/idx-1.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>En la sección &lt;strong>Backend&lt;/strong>, buscamos a &lt;strong>.NET&lt;/strong> y la seleccionamos:
&lt;img src="https://i.ibb.co/w0WTPFy/idx-2.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Colocamos un nombre descriptivo, seleccionamos el ambiente ideal y creamos el proyecto:
&lt;img src="https://i.ibb.co/WcJ8hx2/idx-3.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nos mostrará el indicador de creación del proyecto:
&lt;img src="https://i.ibb.co/Stb8CYR/idx-4.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nos abre el IDX (hasta ahora vi que es un Visual Studio Code en la nube, tal como GitHub Codespace) y miramos el código de ejemplo:
&lt;img src="https://i.ibb.co/zQjNKYp/idx-5.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Procedemos a ejecutar al aplicación en cuestión:
&lt;img src="https://i.ibb.co/r6CNSTQ/idx-6.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nos ofrece opciones para abrir la web:
&lt;img src="https://i.ibb.co/yFQkkGD/idx-7.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>En una nueva pestaña, nos muestra la web App.
&lt;img src="https://i.ibb.co/ngHNgCv/idx-8.png" alt="">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Algo que noté es que la plantilla figura en &lt;strong>Backend&lt;/strong>, pero tranquilamente podemos crear una aplicación Full Stack con .NET de base para cubrir nuestras necesidades.&lt;/p>
&lt;p>Al momento de escribir este artículo noto que &lt;strong>Proyecto IDX&lt;/strong> = &lt;strong>GitHub Codespace&lt;/strong>. La base es Visual Studio Code.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Despliegue de aplicaciones Blazor en Azure App Services</title><link>https://cmas.dev/posts/2024-07-10-deploy-blazor-azure-app-services/</link><pubDate>Wed, 10 Jul 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-07-10-deploy-blazor-azure-app-services/</guid><description>&lt;p>&lt;strong>Blazor&lt;/strong>, el framework moderno basado en &lt;strong>.NET&lt;/strong>, permite a los desarrolladores crear aplicaciones web interactivas utilizando &lt;strong>C#&lt;/strong>. Combinado con &lt;strong>Azure App Services&lt;/strong>, puedes desplegar aplicaciones de manera sencilla, escalable y segura. En este artículo, exploraremos los pasos para desplegar aplicaciones &lt;strong>Blazor (Server y WebAssembly)&lt;/strong> en &lt;strong>Azure App Services&lt;/strong>, acompañado de ejemplos detallados y buenas prácticas para garantizar un despliegue óptimo.&lt;/p>
&lt;h2 id="qué-es-azure-app-services">¿Qué es Azure App Services?&lt;/h2>
&lt;p>&lt;strong>Azure App Services&lt;/strong> es una plataforma de alojamiento en la nube totalmente administrada que soporta aplicaciones web, móviles y &lt;em>API&lt;/em>. Sus principales características incluyen:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Despliegue rápido&lt;/strong>: Permite subir aplicaciones directamente desde tu entorno de desarrollo.&lt;/li>
&lt;li>&lt;strong>Escalabilidad&lt;/strong>: Ajusta los recursos según la demanda.&lt;/li>
&lt;li>&lt;strong>Seguridad&lt;/strong>: Ofrece integración con certificados SSL y autenticación.&lt;/li>
&lt;li>&lt;strong>Compatibilidad con varias tecnologías&lt;/strong>: Soporta .NET, Node.js, Python, Java y más.&lt;/li>
&lt;/ol>
&lt;h2 id="crear-y-configurar-un-azure-app-service">Crear y configurar un Azure App Service&lt;/h2>
&lt;h3 id="paso-1-crear-un-recurso-en-azure">Paso 1: Crear un recurso en Azure&lt;/h3>
&lt;ol>
&lt;li>Inicia sesión en el &lt;a href="https://portal.azure.com">portal de Azure&lt;/a>.&lt;/li>
&lt;li>Selecciona &lt;strong>Crear un recurso&lt;/strong> y busca &lt;strong>App Service&lt;/strong>.&lt;/li>
&lt;li>Completa los detalles:
&lt;ul>
&lt;li>&lt;strong>Nombre&lt;/strong>: &lt;code>blazor-app-service&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Pila de runtime&lt;/strong>: .NET 9.&lt;/li>
&lt;li>&lt;strong>Sistema operativo&lt;/strong>: Windows o Linux.&lt;/li>
&lt;li>&lt;strong>Plan de App Service&lt;/strong>: Selecciona un plan según tus necesidades (recomendado: Plan de consumo para pruebas o B1 para producción).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="paso-2-configurar-el-entorno-de-despliegue">Paso 2: Configurar el entorno de despliegue&lt;/h3>
&lt;ol>
&lt;li>Habilita la autenticación si es necesario.&lt;/li>
&lt;li>Configura las variables de entorno requeridas por la aplicación.&lt;/li>
&lt;/ol>
&lt;h2 id="despliegue-de-blazor-server-en-azure-app-services">Despliegue de Blazor Server en Azure App Services&lt;/h2>
&lt;h3 id="paso-1-crear-una-aplicación-blazor-server">Paso 1: Crear una aplicación Blazor Server&lt;/h3>
&lt;ol>
&lt;li>Genera un nuevo proyecto Blazor Server:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">dotnet new blazorserver -o BlazorServerApp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Navega al directorio del proyecto:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd BlazorServerApp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Ejecuta la aplicación localmente:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">dotnet run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="paso-2-publicar-la-aplicación">Paso 2: Publicar la aplicación&lt;/h3>
&lt;ol>
&lt;li>Publica la aplicación:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">dotnet publish -c Release -o ./publish
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Verifica los archivos generados en el directorio &lt;code>publish&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h3 id="paso-3-desplegar-a-azure">Paso 3: Desplegar a Azure&lt;/h3>
&lt;ol>
&lt;li>Usa el CLI de Azure para iniciar sesión:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">az login
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Despliega la aplicación:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">az webapp deploy --resource-group MyResourceGroup --name blazor-app-service --src-path ./publish
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="despliegue-de-blazor-webassembly-en-azure-app-services">Despliegue de Blazor WebAssembly en Azure App Services&lt;/h2>
&lt;h3 id="paso-1-crear-una-aplicación-blazor-webassembly">Paso 1: Crear una aplicación Blazor WebAssembly&lt;/h3>
&lt;ol>
&lt;li>Genera un nuevo proyecto:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">dotnet new blazorwasm -o BlazorWebAssemblyApp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Habilita el modo PWA si es necesario:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">dotnet new blazorwasm -o BlazorPWA --pwa
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Ejecuta la aplicación localmente:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">dotnet run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="paso-2-publicar-la-aplicación-1">Paso 2: Publicar la aplicación&lt;/h3>
&lt;ol>
&lt;li>Publica la aplicación:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">dotnet publish -c Release -o ./publish
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="paso-3-configurar-y-desplegar">Paso 3: Configurar y desplegar&lt;/h3>
&lt;ol>
&lt;li>Asegúrate de que el servidor web esté configurado para servir contenido estático desde el directorio &lt;code>wwwroot&lt;/code>.&lt;/li>
&lt;li>Usa Azure CLI o el portal de Azure para subir los archivos.&lt;/li>
&lt;/ol>
&lt;h4 id="subir-archivos-usando-azure-storage">Subir archivos usando Azure Storage&lt;/h4>
&lt;ol>
&lt;li>Crea una cuenta de almacenamiento:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">az storage account create --name mystorageaccount --resource-group MyResourceGroup --location eastus --sku Standard_LRS
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Usa &lt;code>azcopy&lt;/code> para subir los archivos:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">azcopy copy ./publish/wwwroot https://mystorageaccount.blob.core.windows.net/$web --recursive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="buenas-prácticas-para-despliegues-en-azure-app-services">Buenas prácticas para despliegues en Azure App Services&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>Configurar entornos&lt;/strong>:
&lt;ul>
&lt;li>Usa &lt;code>appsettings.json&lt;/code> para gestionar configuraciones por entorno.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Escalabilidad&lt;/strong>:
&lt;ul>
&lt;li>Configura escalado automático para manejar incrementos de tráfico.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Seguridad&lt;/strong>:
&lt;ul>
&lt;li>Habilita HTTPS y usa certificados SSL.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Monitorización&lt;/strong>:
&lt;ul>
&lt;li>Usa Application Insights para supervisar el rendimiento.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Optimizar el tamaño de la aplicación&lt;/strong>:
&lt;ul>
&lt;li>Habilita compresión y minimización de archivos.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="resolución-de-problemas-comunes">Resolución de problemas comunes&lt;/h2>
&lt;h3 id="error-500-internal-server-error">Error 500: &amp;ldquo;Internal Server Error&amp;rdquo;&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Causa&lt;/strong>: Configuraciones incorrectas en &lt;code>appsettings.json&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Solución&lt;/strong>: Verifica las rutas y las claves de configuración.&lt;/li>
&lt;/ul>
&lt;h3 id="failed-to-start-en-blazor-server">&amp;ldquo;Failed to Start&amp;rdquo; en Blazor Server&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Causa&lt;/strong>: Problemas de dependencias no satisfechas.&lt;/li>
&lt;li>&lt;strong>Solución&lt;/strong>: Revisa las dependencias en el archivo &lt;code>csproj&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="archivos-estáticos-no-encontrados-en-blazor-webassembly">Archivos estáticos no encontrados en Blazor WebAssembly&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Causa&lt;/strong>: Configuración errónea del servidor.&lt;/li>
&lt;li>&lt;strong>Solución&lt;/strong>: Asegúrate de que el servidor apunte al directorio &lt;code>wwwroot&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h2 id="conclusión">Conclusión&lt;/h2>
&lt;p>Desplegar aplicaciones &lt;strong>Blazor&lt;/strong> en &lt;strong>Azure App Services&lt;/strong> es un proceso directo que se beneficia de las capacidades robustas de Azure para escalar, monitorear y proteger aplicaciones. Siguiendo las mejores prácticas y resolviendo problemas comunes, puedes garantizar un despliegue exitoso y mantener tus aplicaciones funcionando de manera eficiente. ¡Explora &lt;strong>Azure App Services&lt;/strong> y lleva tus aplicaciones &lt;strong>Blazor&lt;/strong> al siguiente nivel!&lt;/p></description></item><item><title>Creación de componentes reutilizables en Blazor para aplicaciones escalables</title><link>https://cmas.dev/posts/2024-07-03-components-blazor/</link><pubDate>Wed, 03 Jul 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-07-03-components-blazor/</guid><description>&lt;p>&lt;strong>Blazor&lt;/strong> es un framework poderoso que permite a los desarrolladores construir aplicaciones web modernas utilizando &lt;strong>C#&lt;/strong>. Una de sus características clave es la capacidad de crear componentes reutilizables que promueven la modularidad, escalabilidad y mantenibilidad de las aplicaciones. En este artículo, exploraremos cómo diseñar y desarrollar componentes reutilizables en Blazor, acompañado de ejemplos prácticos y mejores prácticas.&lt;/p>
&lt;h2 id="qué-son-los-componentes-en-blazor">¿Qué son los componentes en Blazor?&lt;/h2>
&lt;p>Los componentes en Blazor son unidades reutilizables de la interfaz de usuario que combinan lógica y presentación. Cada componente se define en un archivo &lt;code>.razor&lt;/code> y puede incluir código C#, HTML y CSS.&lt;/p>
&lt;h3 id="características-principales">Características principales&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Encapsulación&lt;/strong>: Los componentes encapsulan la lógica y el diseño, promoviendo la reutilización.&lt;/li>
&lt;li>&lt;strong>Reactividad&lt;/strong>: Pueden responder a eventos y actualizarse dinámicamente.&lt;/li>
&lt;li>&lt;strong>Comunicación entre componentes&lt;/strong>: Soportan la transferencia de datos a través de propiedades y eventos.&lt;/li>
&lt;li>&lt;strong>Renderizado eficiente&lt;/strong>: Blazor optimiza el renderizado para minimizar los cambios en el DOM.&lt;/li>
&lt;/ol>
&lt;h2 id="crear-un-componente-básico">Crear un componente básico&lt;/h2>
&lt;h3 id="ejemplo-componente-de-botón">Ejemplo: Componente de Botón&lt;/h3>
&lt;p>Archivo: &lt;code>ButtonComponent.razor&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;button class=&amp;#34;btn btn-primary&amp;#34; @onclick=&amp;#34;OnClick&amp;#34;&amp;gt;@Label&amp;lt;/button&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@code {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [Parameter]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public string Label { get; set; } = &amp;#34;Click Me&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [Parameter]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public EventCallback OnClick { get; set; }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="uso-del-componente">Uso del componente&lt;/h4>
&lt;p>Archivo: &lt;code>MainLayout.razor&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;ButtonComponent Label=&amp;#34;Guardar&amp;#34; OnClick=&amp;#34;SaveData&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@code {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private void SaveData()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Console.WriteLine(&amp;#34;Datos guardados correctamente.&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="componentes-parametrizables">Componentes parametrizables&lt;/h2>
&lt;h3 id="paso-1-definir-propiedades-con-parameter">Paso 1: Definir propiedades con &lt;code>[Parameter]&lt;/code>&lt;/h3>
&lt;p>Las propiedades con el atributo &lt;code>[Parameter]&lt;/code> permiten a los componentes recibir datos externos.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;h3&amp;gt;@Title&amp;lt;/h3&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;p&amp;gt;@Description&amp;lt;/p&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@code {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [Parameter]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public string Title { get; set; }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [Parameter]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public string Description { get; set; }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="paso-2-render-fragment">Paso 2: Render Fragment&lt;/h3>
&lt;p>Render Fragment permite pasar bloques de contenido al componente.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;div class=&amp;#34;card&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;div class=&amp;#34;card-header&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Header
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/div&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;div class=&amp;#34;card-body&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Body
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/div&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/div&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@code {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [Parameter]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public RenderFragment Header { get; set; }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [Parameter]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public RenderFragment Body { get; set; }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="ejemplo-de-uso">Ejemplo de uso&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;CardComponent&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Header&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;h3&amp;gt;Mi Título&amp;lt;/h3&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/Header&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Body&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;p&amp;gt;Este es el contenido del cuerpo.&amp;lt;/p&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/Body&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/CardComponent&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="mejores-prácticas-para-componentes-reutilizables">Mejores prácticas para componentes reutilizables&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>Evitar lógica compleja&lt;/strong>:
&lt;ul>
&lt;li>Divide la funcionalidad compleja en varios componentes más simples.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Documentar parámetros&lt;/strong>:
&lt;ul>
&lt;li>Proporciona descripciones claras de los parámetros y su uso.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Usar estilos modulares&lt;/strong>:
&lt;ul>
&lt;li>Utiliza CSS aislado para evitar conflictos de estilos.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Validar entradas&lt;/strong>:
&lt;ul>
&lt;li>Asegúrate de validar los datos recibidos a través de los parámetros.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Seguir el principio DRY (Don&amp;rsquo;t Repeat Yourself)&lt;/strong>:
&lt;ul>
&lt;li>Reutiliza componentes siempre que sea posible.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="componentes-avanzados">Componentes avanzados&lt;/h2>
&lt;h3 id="componentes-genéricos">Componentes genéricos&lt;/h3>
&lt;p>Blazor soporta componentes genéricos que permiten trabajar con diferentes tipos de datos.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">div&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">foreach&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">var&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">Items&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">div&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="n">code&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="n">Parameter&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public&lt;/span> &lt;span class="n">IEnumerable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">Items&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="uso-del-componente-genérico">Uso del componente genérico&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;GenericComponent Items=&amp;#34;new List&amp;lt;int&amp;gt; { 1, 2, 3 }&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="componentes-dinámicos">Componentes dinámicos&lt;/h3>
&lt;p>Permiten renderizar diferentes componentes basados en datos o estados.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="n">foreach&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">var&lt;/span> &lt;span class="n">component&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">Components&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DynamicComponent&lt;/span> &lt;span class="n">Type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;component&amp;#34;&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="n">code&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="n">Parameter&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">Components&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nb">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ButtonComponent&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CardComponent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="pruebas-de-componentes">Pruebas de componentes&lt;/h2>
&lt;h3 id="framework-recomendado-bunit">Framework recomendado: &lt;code>bUnit&lt;/code>&lt;/h3>
&lt;h4 id="configurar-bunit">Configurar &lt;code>bUnit&lt;/code>&lt;/h4>
&lt;ol>
&lt;li>Instalar la biblioteca:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">dotnet&lt;/span> &lt;span class="nx">add&lt;/span> &lt;span class="kn">package&lt;/span> &lt;span class="nx">Bunit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Escribir pruebas:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">Fact&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">public&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="n">ButtonComponent_DisplaysCorrectLabel&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">using&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">TestContext&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="n">cut&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">RenderComponent&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ButtonComponent&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parameters&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">parameters&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Label&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Test Button&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Test Button&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cut&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Markup&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="conclusión">Conclusión&lt;/h2>
&lt;p>La creación de componentes reutilizables en &lt;strong>Blazor&lt;/strong> es clave para construir aplicaciones escalables y mantenibles. Siguiendo las buenas prácticas y aprovechando las características avanzadas del framework, los desarrolladores pueden maximizar la productividad y garantizar la calidad de sus aplicaciones. ¡Empieza a diseñar tus propios componentes reutilizables hoy mismo y lleva tus habilidades de desarrollo web al siguiente nivel!&lt;/p></description></item><item><title>Introducción a Blazor: Cambiando el paradigma del desarrollo web</title><link>https://cmas.dev/posts/2024-06-26-intro-blazor/</link><pubDate>Wed, 26 Jun 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-06-26-intro-blazor/</guid><description>&lt;p>&lt;strong>Blazor&lt;/strong> es una tecnología desarrollada por &lt;strong>Microsoft&lt;/strong> que está transformando la forma en que se crean aplicaciones web modernas. Basado en &lt;strong>.NET&lt;/strong>, &lt;strong>Blazor&lt;/strong> permite a los desarrolladores escribir aplicaciones web interactivas utilizando &lt;strong>C#&lt;/strong> en lugar de &lt;strong>JavaScript&lt;/strong>, ofreciendo una solución innovadora para quienes buscan aprovechar las ventajas del ecosistema &lt;strong>.NET&lt;/strong> en el desarrollo web. En este artículo, exploraremos las bases de Blazor, sus ventajas, desventajas y cómo empezar a utilizarlo, acompañado de ejemplos y buenas prácticas.&lt;/p>
&lt;h2 id="qué-es-blazor">¿Qué es Blazor?&lt;/h2>
&lt;p>Blazor es un framework de desarrollo web que permite construir aplicaciones interactivas del lado del cliente y del servidor utilizando C#. Se basa en WebAssembly para ejecutar código .NET directamente en el navegador, eliminando la necesidad de JavaScript para muchas funcionalidades.&lt;/p>
&lt;h3 id="tipos-de-blazor">Tipos de Blazor&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Blazor Server&lt;/strong>: La aplicación se ejecuta en el servidor y utiliza SignalR para comunicarse con el cliente. Ideal para aplicaciones con requisitos de tiempo real o cuando se desea un inicio rápido.&lt;/li>
&lt;li>&lt;strong>Blazor WebAssembly&lt;/strong>: Ejecuta el código directamente en el navegador utilizando WebAssembly. Ofrece una experiencia completamente del lado del cliente.&lt;/li>
&lt;li>&lt;strong>Blazor Hybrid&lt;/strong>: Integra Blazor con plataformas como MAUI para crear aplicaciones multiplataforma.&lt;/li>
&lt;/ol>
&lt;h2 id="ventajas-de-blazor">Ventajas de Blazor&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>Reutilización de código&lt;/strong>: Usa el mismo lenguaje, C#, tanto para el cliente como para el servidor.&lt;/li>
&lt;li>&lt;strong>Ecosistema unificado&lt;/strong>: Aprovecha las herramientas y bibliotecas de .NET.&lt;/li>
&lt;li>&lt;strong>Soporte a largo plazo&lt;/strong>: Microsoft ofrece soporte continuo para Blazor como parte del ecosistema .NET.&lt;/li>
&lt;li>&lt;strong>Sin JavaScript adicional&lt;/strong>: Aunque puedes integrarlo, no es necesario para funciones comunes.&lt;/li>
&lt;li>&lt;strong>Componentes reutilizables&lt;/strong>: Facilita la modularidad y la organización del código.&lt;/li>
&lt;/ol>
&lt;h2 id="desventajas-de-blazor">Desventajas de Blazor&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>Tamaño inicial&lt;/strong>: En Blazor WebAssembly, el tamaño de descarga inicial puede ser considerable.&lt;/li>
&lt;li>&lt;strong>Soporte limitado en navegadores antiguos&lt;/strong>: Requiere navegadores modernos con soporte para WebAssembly.&lt;/li>
&lt;li>&lt;strong>Latencia en Blazor Server&lt;/strong>: La comunicación constante con el servidor puede introducir latencia.&lt;/li>
&lt;li>&lt;strong>Curva de aprendizaje&lt;/strong>: Aunque es similar a .NET, puede ser desafiante para desarrolladores sin experiencia previa en el ecosistema.&lt;/li>
&lt;/ol>
&lt;h2 id="configuración-inicial">Configuración inicial&lt;/h2>
&lt;h3 id="requisitos-previos">Requisitos previos&lt;/h3>
&lt;ol>
&lt;li>Tener instalado .NET SDK:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">dotnet --version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Instalar un editor de código, como Visual Studio o Visual Studio Code.&lt;/li>
&lt;/ol>
&lt;h3 id="crear-un-proyecto-blazor-server">Crear un proyecto Blazor Server&lt;/h3>
&lt;ol>
&lt;li>Ejecutar el comando para crear un proyecto:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">dotnet new blazorserver -o BlazorServerApp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Navegar al directorio del proyecto:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd BlazorServerApp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Ejecutar la aplicación:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">dotnet run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="crear-un-proyecto-blazor-webassembly">Crear un proyecto Blazor WebAssembly&lt;/h3>
&lt;ol>
&lt;li>Crear un proyecto WebAssembly:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">dotnet new blazorwasm -o BlazorWebAssemblyApp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Navegar al directorio del proyecto y ejecutarlo:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd BlazorWebAssemblyApp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dotnet run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="conceptos-fundamentales">Conceptos fundamentales&lt;/h2>
&lt;h3 id="componentes">Componentes&lt;/h3>
&lt;p>Los componentes son la unidad básica en Blazor. Se crean utilizando archivos &lt;code>.razor&lt;/code> y combinan C# con HTML.&lt;/p>
&lt;h4 id="ejemplo-básico">Ejemplo básico&lt;/h4>
&lt;p>Archivo: &lt;code>Counter.razor&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">@page &amp;#34;/counter&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;h3&amp;gt;Contador&amp;lt;/h3&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;p&amp;gt;Valor actual: @currentCount&amp;lt;/p&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;button @onclick=&amp;#34;IncrementCount&amp;#34;&amp;gt;Incrementar&amp;lt;/button&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@code {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private int currentCount = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private void IncrementCount()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> currentCount++;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="inyección-de-dependencias">Inyección de dependencias&lt;/h3>
&lt;p>Blazor soporta inyección de dependencias a través del contenedor de servicios.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">@inject WeatherService WeatherService
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;h3&amp;gt;Clima actual&amp;lt;/h3&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;p&amp;gt;@WeatherService.GetCurrentWeather()&amp;lt;/p&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="buenas-prácticas">Buenas prácticas&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>Organización del proyecto&lt;/strong>: Divide la aplicación en módulos y componentes reutilizables.&lt;/li>
&lt;li>&lt;strong>Manejo de estado&lt;/strong>: Usa librerías como &lt;code>Fluxor&lt;/code> o servicios para manejar el estado de la aplicación.&lt;/li>
&lt;li>&lt;strong>Optimizar el tamaño&lt;/strong>: Para Blazor WebAssembly, minimiza los recursos y activa la compresión.&lt;/li>
&lt;li>&lt;strong>Seguridad&lt;/strong>: Implementa protección contra ataques XSS y valida todas las entradas de usuario.&lt;/li>
&lt;li>&lt;strong>Pruebas&lt;/strong>: Usa frameworks como &lt;code>bUnit&lt;/code> para pruebas unitarias de componentes.&lt;/li>
&lt;/ol>
&lt;h2 id="conclusión">Conclusión&lt;/h2>
&lt;p>&lt;strong>Blazor&lt;/strong> representa un cambio significativo en el desarrollo web al permitir que los desarrolladores utilicen C# para crear aplicaciones interactivas. Su capacidad para aprovechar el ecosistema de .NET lo hace una opción atractiva para equipos que ya trabajan con esta tecnología. Aunque tiene limitaciones, las ventajas que ofrece son significativas, especialmente en proyectos donde la reutilización de código y la integración con .NET son esenciales. ¡Explora Blazor y lleva tus habilidades de desarrollo web al siguiente nivel!&lt;/p></description></item><item><title>Despliegue de aplicaciones Blazor en Azure App Services</title><link>https://cmas.dev/posts/2024-04-17-deploy-blazor-apps-azure/</link><pubDate>Wed, 17 Apr 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-04-17-deploy-blazor-apps-azure/</guid><description>&lt;p>El despliegue de aplicaciones Blazor en Azure App Services ofrece una forma rápida y eficiente de llevar tus proyectos al entorno de producción. Azure proporciona escalabilidad, seguridad y opciones flexibles para automatizar el flujo de trabajo de despliegue. En este artículo, exploramos tres métodos clave: usando Visual Studio, la CLI de Azure, y GitHub Actions, con pasos prácticos y ejemplos detallados. Con las mejoras de .NET 8, las aplicaciones Blazor ahora son más rápidas y optimizadas para la nube, lo que facilita la entrega de soluciones web escalables y modernas.&lt;/p>
&lt;h2 id="introducción">Introducción&lt;/h2>
&lt;p>Desplegar aplicaciones Blazor en &lt;strong>Azure App Services&lt;/strong> es una solución sencilla y eficiente para llevar tus aplicaciones web al entorno de producción. Azure proporciona escalabilidad, seguridad y herramientas integradas para un despliegue rápido. En este artículo, exploraremos cómo configurar y desplegar una aplicación Blazor, incluyendo pasos prácticos y ejemplos detallados. Con &lt;strong>.NET 8&lt;/strong>, el rendimiento y la optimización de aplicaciones Blazor han mejorado significativamente, facilitando el despliegue en la nube.&lt;/p>
&lt;hr>
&lt;h2 id="prerrequisitos">Prerrequisitos&lt;/h2>
&lt;p>Antes de comenzar, asegúrate de contar con lo siguiente:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>.NET SDK 8&lt;/strong> instalado en tu máquina.&lt;/li>
&lt;li>Una cuenta de &lt;strong>Azure&lt;/strong>.&lt;/li>
&lt;li>Azure CLI instalada y configurada.&lt;/li>
&lt;li>Una aplicación Blazor lista para ser desplegada.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="paso-1-crear-una-aplicación-blazor">Paso 1: Crear una aplicación Blazor&lt;/h2>
&lt;p>Primero, crea una aplicación Blazor WebAssembly básica si no tienes una ya:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">dotnet new blazorwasm -o BlazorApp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> BlazorApp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dotnet build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ejecuta el proyecto para verificar que funciona correctamente:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">dotnet run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Accede a &lt;code>http://localhost:5000&lt;/code> para comprobar que la aplicación se ejecuta correctamente.&lt;/p>
&lt;hr>
&lt;h2 id="paso-2-configurar-azure-app-service">Paso 2: Configurar Azure App Service&lt;/h2>
&lt;h3 id="21-acceder-al-portal-de-azure">&lt;strong>2.1 Acceder al portal de Azure&lt;/strong>&lt;/h3>
&lt;ol>
&lt;li>Ve al &lt;a href="https://portal.azure.com">Portal de Azure&lt;/a> e inicia sesión con tu cuenta.&lt;/li>
&lt;li>En la barra de búsqueda superior, escribe &amp;ldquo;App Services&amp;rdquo; y selecciona la opción &lt;strong>App Services&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;h3 id="22-crear-un-nuevo-app-service">&lt;strong>2.2 Crear un nuevo App Service&lt;/strong>&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Haz clic en el botón &lt;strong>Crear&lt;/strong> en la parte superior.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Aparecerá un formulario de configuración donde debes proporcionar la siguiente información:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Suscripción&lt;/strong>: Selecciona tu suscripción activa.&lt;/li>
&lt;li>&lt;strong>Grupo de recursos&lt;/strong>: Crea uno nuevo o elige un grupo existente.&lt;/li>
&lt;li>&lt;strong>Nombre de la aplicación&lt;/strong>: Introduce un nombre único, por ejemplo, &lt;code>blazor-app-deploy&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Publicación&lt;/strong>: Selecciona &lt;strong>Código&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Pila de ejecución&lt;/strong>: Elige &lt;strong>.NET 8&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Sistema operativo&lt;/strong>: Selecciona &lt;strong>Windows&lt;/strong> o &lt;strong>Linux&lt;/strong> según tu preferencia.&lt;/li>
&lt;li>&lt;strong>Plan de App Service&lt;/strong>: Crea uno nuevo o selecciona un plan existente.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Haz clic en &lt;strong>Revisar + Crear&lt;/strong> y luego en &lt;strong>Crear&lt;/strong> para iniciar la implementación del App Service.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="23-validar-la-creación-del-app-service">&lt;strong>2.3 Validar la creación del App Service&lt;/strong>&lt;/h3>
&lt;ol>
&lt;li>Una vez creada, verás un mensaje de confirmación en la parte superior del portal.&lt;/li>
&lt;li>Haz clic en &lt;strong>Ir al recurso&lt;/strong> para acceder al panel del App Service.&lt;/li>
&lt;/ol>
&lt;h3 id="24-configurar-las-opciones-del-app-service">&lt;strong>2.4 Configurar las opciones del App Service&lt;/strong>&lt;/h3>
&lt;ol>
&lt;li>En el panel del App Service, selecciona &lt;strong>Configuración&lt;/strong> en el menú lateral.&lt;/li>
&lt;li>Verifica que la versión de .NET sea la correcta (&lt;strong>.NET 8&lt;/strong>).&lt;/li>
&lt;li>Configura las variables de entorno necesarias para tu aplicación (si aplica) en la pestaña &lt;strong>Configuración de aplicaciones&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;h3 id="25-obtener-la-url-del-app-service">&lt;strong>2.5 Obtener la URL del App Service&lt;/strong>&lt;/h3>
&lt;ol>
&lt;li>En el panel principal del App Service, encuentra el enlace de &lt;strong>URL predeterminada&lt;/strong>.&lt;/li>
&lt;li>Esta será la dirección donde se alojará tu aplicación una vez desplegada.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="paso-3-publicar-la-aplicación-desde-visual-studio">Paso 3: Publicar la aplicación desde Visual Studio&lt;/h2>
&lt;ol>
&lt;li>Abre tu proyecto Blazor en &lt;strong>Visual Studio&lt;/strong>.&lt;/li>
&lt;li>Haz clic derecho en el proyecto y selecciona &lt;strong>Publicar&lt;/strong>.&lt;/li>
&lt;li>Selecciona &lt;strong>App Service (Windows)&lt;/strong> o &lt;strong>App Service (Linux)&lt;/strong> según tu configuración.&lt;/li>
&lt;li>Inicia sesión en tu cuenta de Azure.&lt;/li>
&lt;li>Selecciona el App Service creado previamente.&lt;/li>
&lt;li>Haz clic en &lt;strong>Publicar&lt;/strong> y espera a que finalice el proceso.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="paso-4-usar-azure-cli-para-el-despliegue">Paso 4: Usar Azure CLI para el despliegue&lt;/h2>
&lt;p>Si prefieres usar la CLI, sigue estos pasos:&lt;/p>
&lt;ol>
&lt;li>Publica la aplicación localmente:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">dotnet publish -c Release
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Crea un recurso de App Service en Azure si aún no lo has hecho:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">az webapp create --name blazor-app-deploy --resource-group &amp;lt;tu-grupo&amp;gt; --plan &amp;lt;tu-plan&amp;gt; --runtime &lt;span class="s2">&amp;#34;DOTNET-8.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Despliega la aplicación:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">az webapp deploy --resource-group &amp;lt;tu-grupo&amp;gt; --name blazor-app-deploy --src-path ./bin/Release/net8.0/publish
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Accede a la URL proporcionada por Azure para ver tu aplicación.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="paso-5-configurar-cicd-con-github-actions">Paso 5: Configurar CI/CD con GitHub Actions&lt;/h2>
&lt;p>Automatiza el despliegue utilizando GitHub Actions:&lt;/p>
&lt;ol>
&lt;li>Crea un archivo llamado &lt;code>.github/workflows/azure-webapp.yml&lt;/code> en tu repositorio.&lt;/li>
&lt;li>Añade la siguiente configuración:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy Blazor App to Azure&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">main&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">build-and-deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setup .NET&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/setup-dotnet@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">dotnet-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;8.0&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Build Project&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dotnet build --configuration Release&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy to Azure&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">azure/webapps-deploy@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app-name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">blazor-app-deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">slot-name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">production&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">publish-profile&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Configura el secreto &lt;code>AZURE_WEBAPP_PUBLISH_PROFILE&lt;/code> en los ajustes de tu repositorio.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="conclusión">Conclusión&lt;/h2>
&lt;p>Desplegar aplicaciones Blazor en Azure App Services es un proceso flexible y eficiente. Ya sea utilizando Visual Studio, la CLI de Azure o GitHub Actions, Azure ofrece las herramientas necesarias para simplificar el flujo de trabajo de desarrollo y despliegue. Con las mejoras de &lt;strong>.NET 8&lt;/strong>, tus aplicaciones serán más rápidas y escalables que nunca. ¡Empieza hoy mismo a aprovechar el poder de Blazor en la nube!&lt;/p></description></item><item><title>Creación de componentes reutilizables en Blazor para aplicaciones escalables</title><link>https://cmas.dev/posts/2024-04-10-blazor-reusable-components/</link><pubDate>Wed, 10 Apr 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-04-10-blazor-reusable-components/</guid><description>&lt;p>Los componentes reutilizables son esenciales para construir aplicaciones Blazor escalables y mantenibles. Este artículo explora cómo aprovechar las capacidades de .NET 8 para crear componentes modulares que mejoren la eficiencia y la reutilización en proyectos de cualquier tamaño. Además, aprenderás las mejores prácticas y técnicas clave para optimizar la construcción de interfaces dinámicas con Blazor.&lt;/p>
&lt;h2 id="introducción">Introducción&lt;/h2>
&lt;p>Blazor permite a los desarrolladores de .NET construir aplicaciones web interactivas con componentes reutilizables, un enfoque que no solo mejora la eficiencia del desarrollo, sino que también facilita la escalabilidad de las aplicaciones. Con &lt;strong>.NET 8&lt;/strong>, Blazor incluye mejoras significativas en el rendimiento y capacidades avanzadas para la creación de componentes, lo que lo convierte en una herramienta ideal para construir aplicaciones mantenibles y modulares.&lt;/p>
&lt;p>En este artículo, exploraremos cómo crear componentes reutilizables en Blazor y cómo organizarlos de manera eficiente para aplicaciones escalables.&lt;/p>
&lt;hr>
&lt;h2 id="qué-son-los-componentes-en-blazor">¿Qué son los componentes en Blazor?&lt;/h2>
&lt;p>Un componente en Blazor es una unidad modular de interfaz de usuario (UI) que encapsula lógica, datos y presentación. Los componentes son la base de cualquier aplicación Blazor y permiten construir UI dinámicas de forma sencilla.&lt;/p>
&lt;p>Un componente puede incluir:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>HTML y Razor&lt;/strong>: Para definir la estructura y el diseño.&lt;/li>
&lt;li>&lt;strong>C#&lt;/strong>: Para la lógica y el manejo de eventos.&lt;/li>
&lt;li>&lt;strong>CSS&lt;/strong>: Para el estilo.&lt;/li>
&lt;/ul>
&lt;p>Estos componentes son reutilizables, lo que significa que pueden ser compartidos en diferentes partes de la aplicación o incluso entre diferentes proyectos.&lt;/p>
&lt;hr>
&lt;h2 id="beneficios-de-los-componentes-reutilizables">Beneficios de los componentes reutilizables&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Eficiencia en el desarrollo&lt;/strong>:&lt;br>
Reduce la duplicación de código al centralizar funcionalidades comunes en un único componente.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Facilidad de mantenimiento&lt;/strong>:&lt;br>
Los cambios realizados en un componente se reflejan automáticamente donde sea utilizado.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Escalabilidad&lt;/strong>:&lt;br>
Una arquitectura basada en componentes facilita la expansión de la aplicación.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Reutilización entre proyectos&lt;/strong>:&lt;br>
Los componentes pueden empaquetarse como bibliotecas para su uso en múltiples aplicaciones.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="creación-de-un-componente-reutilizable-ejemplo-práctico">Creación de un componente reutilizable: Ejemplo práctico&lt;/h2>
&lt;h3 id="escenario-botón-genérico-reutilizable">&lt;strong>Escenario: Botón genérico reutilizable&lt;/strong>&lt;/h3>
&lt;p>Vamos a crear un botón genérico que se pueda reutilizar en diferentes partes de la aplicación. Este botón incluirá propiedades configurables para el texto, el estilo y la acción que ejecuta al ser clicado.&lt;/p>
&lt;h3 id="paso-1-crear-el-componente">Paso 1: Crear el componente&lt;/h3>
&lt;p>Crea un archivo llamado &lt;code>ReusableButton.razor&lt;/code> en tu proyecto Blazor:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;button class=&amp;#34;@ButtonClass&amp;#34; @onclick=&amp;#34;HandleClick&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @ButtonText
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/button&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@code {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [Parameter]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public string ButtonText { get; set; } = &amp;#34;Click me&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [Parameter]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public string ButtonClass { get; set; } = &amp;#34;btn btn-primary&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [Parameter]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public EventCallback OnClick { get; set; }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private async Task HandleClick()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (OnClick.HasDelegate)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> await OnClick.InvokeAsync();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="paso-2-explicación-del-código">Paso 2: Explicación del código&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>[Parameter]&lt;/strong>:&lt;br>
Los parámetros permiten que las propiedades del componente sean configurables desde su punto de uso.&lt;/p>
&lt;ul>
&lt;li>&lt;code>ButtonText&lt;/code>: El texto que aparecerá en el botón.&lt;/li>
&lt;li>&lt;code>ButtonClass&lt;/code>: Las clases CSS para personalizar el estilo.&lt;/li>
&lt;li>&lt;code>OnClick&lt;/code>: Un delegado para manejar la acción al hacer clic en el botón.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>EventCallback&lt;/strong>:&lt;br>
Es la forma recomendada en Blazor para manejar eventos como clics de botón.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="paso-3-uso-del-componente">Paso 3: Uso del componente&lt;/h3>
&lt;p>Ahora puedes utilizar este componente en cualquier parte de tu aplicación:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;ReusableButton
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ButtonText=&amp;#34;Guardar&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ButtonClass=&amp;#34;btn btn-success&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> OnClick=&amp;#34;GuardarCambios&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;ReusableButton
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ButtonText=&amp;#34;Eliminar&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ButtonClass=&amp;#34;btn btn-danger&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> OnClick=&amp;#34;EliminarRegistro&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@code {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private void GuardarCambios()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Console.WriteLine(&amp;#34;Cambios guardados&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private void EliminarRegistro()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Console.WriteLine(&amp;#34;Registro eliminado&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="resultado">Resultado&lt;/h3>
&lt;p>Los dos botones tendrán textos y estilos diferentes, pero comparten la misma lógica de interacción encapsulada en el componente &lt;code>ReusableButton&lt;/code>.&lt;/p>
&lt;hr>
&lt;h2 id="buenas-prácticas-para-componentes-reutilizables">Buenas prácticas para componentes reutilizables&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Modularidad&lt;/strong>:&lt;br>
Divide los componentes en unidades pequeñas y específicas que puedan ser fácilmente combinadas.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Evita la lógica excesiva&lt;/strong>:&lt;br>
Mantén los componentes centrados en la UI y delega la lógica compleja a servicios o clases separadas.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Uso de bibliotecas compartidas&lt;/strong>:&lt;br>
Empaqueta componentes comunes en una &lt;strong>librería Razor Class Library (RCL)&lt;/strong> para su reutilización entre proyectos.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Documentación clara&lt;/strong>:&lt;br>
Proporciona ejemplos de uso y documentación para que otros desarrolladores puedan integrarlos fácilmente.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="blazor-en-net-8-mejoras-para-componentes">Blazor en .NET 8: Mejoras para componentes&lt;/h2>
&lt;p>Con &lt;strong>.NET 8&lt;/strong>, Blazor introduce mejoras clave para el desarrollo basado en componentes:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Renderización condicional optimizada&lt;/strong>:&lt;br>
Reduce el impacto de cambios frecuentes en la UI.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Soporte para componentes híbridos (Blazor United)&lt;/strong>:&lt;br>
Combina los beneficios de Blazor Server y WebAssembly, facilitando la creación de componentes reutilizables en cualquier modelo.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Mejoras en la interoperabilidad con JavaScript&lt;/strong>:&lt;br>
Permite integrar bibliotecas externas en componentes Blazor de manera más eficiente.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="conclusión">Conclusión&lt;/h2>
&lt;p>Los componentes reutilizables son fundamentales para construir aplicaciones Blazor escalables y mantenibles. Al encapsular la lógica y la presentación en módulos independientes, puedes reducir la duplicación de código, mejorar la eficiencia y facilitar la expansión de tu aplicación.&lt;/p>
&lt;p>Con las mejoras introducidas en &lt;strong>.NET 8&lt;/strong>, crear componentes en Blazor es más poderoso que nunca. Ya sea que estés desarrollando una aplicación pequeña o un sistema complejo, el enfoque modular de Blazor te ayudará a mantener tu proyecto organizado y fácil de escalar.&lt;/p></description></item><item><title>Introducción a Blazor: Cambiando el paradigma del desarrollo web</title><link>https://cmas.dev/posts/2024-04-03-intro-blazor/</link><pubDate>Wed, 03 Apr 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-04-03-intro-blazor/</guid><description>&lt;p>El framework de Microsoft, está transformando el desarrollo web al permitir crear aplicaciones interactivas con C# y .NET, eliminando la necesidad de JavaScript. Con las mejoras de .NET 8, ofrece mayor rendimiento y flexibilidad, facilitando la creación de aplicaciones tanto en el cliente como en el servidor. Este artículo explora cómo Blazor redefine el desarrollo web y muestra cómo empezar a usarlo.&lt;/p>
&lt;h2 id="qué-es-blazor">¿Qué es Blazor?&lt;/h2>
&lt;p>Blazor es un framework de desarrollo web de &lt;strong>Microsoft&lt;/strong> que permite construir aplicaciones web interactivas utilizando &lt;strong>C# y .NET&lt;/strong> en lugar de depender exclusivamente de &lt;strong>JavaScript&lt;/strong>. Lanzado inicialmente como una alternativa a frameworks como Angular o React, Blazor ha evolucionado significativamente, y con la llegada de &lt;strong>.NET 8&lt;/strong>, sus capacidades y rendimiento han alcanzado nuevos niveles.&lt;/p>
&lt;h3 id="por-qué-blazor-es-revolucionario">¿Por qué Blazor es revolucionario?&lt;/h3>
&lt;p>Blazor introduce un cambio importante al permitir que los desarrolladores trabajen en aplicaciones web sin salir del ecosistema .NET. Esto reduce la necesidad de manejar múltiples lenguajes y frameworks en un solo proyecto. Además, Blazor está diseñado para cubrir diversos escenarios:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Blazor Server:&lt;/strong> Renderiza componentes en el servidor y envía actualizaciones al cliente a través de SignalR.&lt;/li>
&lt;li>&lt;strong>Blazor WebAssembly (WASM):&lt;/strong> Ejecuta la aplicación directamente en el navegador, utilizando WebAssembly para una experiencia completamente client-side.&lt;/li>
&lt;li>&lt;strong>Blazor en .NET MAUI:&lt;/strong> Permite usar Blazor para construir aplicaciones de escritorio y móviles.&lt;/li>
&lt;/ul>
&lt;p>Con &lt;strong>.NET 8&lt;/strong>, estas capacidades han sido optimizadas para ofrecer un mejor rendimiento y una experiencia de desarrollo más fluida.&lt;/p>
&lt;hr>
&lt;h2 id="ventajas-de-usar-blazor-en-net-8">Ventajas de usar Blazor en .NET 8&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Un único lenguaje para todo:&lt;/strong>&lt;br>
Con Blazor, puedes desarrollar aplicaciones completas utilizando &lt;strong>C#&lt;/strong>, eliminando la necesidad de escribir código en JavaScript para el frontend.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Rendimiento mejorado en WebAssembly:&lt;/strong>&lt;br>
La llegada de .NET 8 ha reducido los tiempos de carga inicial en Blazor WebAssembly, gracias a la optimización de su tamaño y mejor manejo de caché.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Integración con el ecosistema .NET:&lt;/strong>&lt;br>
Blazor se integra perfectamente con APIs .NET, Entity Framework, Azure, y bibliotecas de terceros.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Componentes reutilizables:&lt;/strong>&lt;br>
Blazor permite crear componentes UI que son reutilizables en distintas partes de una aplicación, similar a otros frameworks modernos como React.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Compatibilidad con JavaScript:&lt;/strong>&lt;br>
Aunque elimina la dependencia de JavaScript, Blazor permite interactuar con librerías JavaScript cuando sea necesario.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="blazor-en-acción-un-ejemplo-práctico">Blazor en acción: Un ejemplo práctico&lt;/h2>
&lt;h3 id="paso-1-creación-de-un-proyecto-blazor">Paso 1: Creación de un proyecto Blazor&lt;/h3>
&lt;p>Primero, asegúrate de tener instalada la última versión de .NET 8. Luego, crea un nuevo proyecto Blazor WebAssembly desde la CLI de .NET:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">dotnet new blazorwasm -o BlazorApp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> BlazorApp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dotnet run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Este comando genera una aplicación Blazor básica. Accede a &lt;code>http://localhost:5000&lt;/code> para verla en funcionamiento.&lt;/p>
&lt;h3 id="paso-2-crear-un-componente-de-contador">Paso 2: Crear un componente de contador&lt;/h3>
&lt;p>Edita el archivo &lt;code>Counter.razor&lt;/code> para personalizar el contador:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">@page &amp;#34;/counter&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;h3&amp;gt;Contador&amp;lt;/h3&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;p&amp;gt;Contador actual: @count&amp;lt;/p&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;button class=&amp;#34;btn btn-primary&amp;#34; @onclick=&amp;#34;IncrementarContador&amp;#34;&amp;gt;Incrementar&amp;lt;/button&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@code {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private int count = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private void IncrementarContador()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> count++;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="paso-3-agregar-estilos-personalizados">Paso 3: Agregar estilos personalizados&lt;/h3>
&lt;p>Puedes personalizar los estilos en el archivo &lt;code>wwwroot/css/app.css&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">button&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">font-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">1.2&lt;/span>&lt;span class="kt">rem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">margin-top&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Este simple ejemplo muestra cómo Blazor permite crear componentes interactivos utilizando únicamente C#.&lt;/p>
&lt;hr>
&lt;h2 id="blazor-y-el-futuro-del-desarrollo-web">Blazor y el futuro del desarrollo web&lt;/h2>
&lt;p>Con la llegada de &lt;strong>.NET 8&lt;/strong>, Microsoft ha reforzado su compromiso con Blazor como una herramienta clave para el desarrollo web. Algunas de las mejoras que destacan en esta versión incluyen:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Mejoras en el soporte de WebAssembly:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Reducción del tiempo de carga inicial.&lt;/li>
&lt;li>Implementación de AOT (Ahead-of-Time Compilation) para optimizar el rendimiento.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Blazor United:&lt;/strong>&lt;br>
Introducción de un enfoque híbrido que combina las ventajas de Blazor Server y WebAssembly, permitiendo cambiar dinámicamente entre ambos modelos según las necesidades de la aplicación.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Integración con .NET MAUI:&lt;/strong>&lt;br>
Blazor ahora puede usarse para desarrollar aplicaciones de escritorio y móviles con un solo código base.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="cuándo-elegir-blazor-para-tu-proyecto">Cuándo elegir Blazor para tu proyecto&lt;/h2>
&lt;p>Blazor es una excelente opción si:&lt;/p>
&lt;ol>
&lt;li>Tu equipo ya está familiarizado con el ecosistema .NET.&lt;/li>
&lt;li>Necesitas desarrollar aplicaciones web rápidamente sin aprender un nuevo lenguaje como JavaScript.&lt;/li>
&lt;li>Quieres aprovechar las capacidades de WebAssembly para mejorar la experiencia del cliente.&lt;/li>
&lt;li>Planeas integrar tu aplicación con otros servicios en Azure o APIs basadas en .NET.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="conclusión">Conclusión&lt;/h2>
&lt;p>Blazor está cambiando el paradigma del desarrollo web al eliminar la necesidad de separar el frontend y backend en lenguajes diferentes. Gracias a .NET 8, las aplicaciones Blazor son más rápidas, ligeras y fáciles de desarrollar que nunca.&lt;/p>
&lt;p>Si todavía no has probado Blazor, ahora es el momento perfecto para sumergirte en esta tecnología y descubrir cómo puede transformar tus proyectos web. Con un lenguaje unificado y un ecosistema robusto, Blazor está listo para liderar el futuro del desarrollo web.&lt;/p></description></item><item><title>Incrustar página web externa en Power Apps</title><link>https://cmas.dev/posts/2023-09-20-embed-external-page-in-power-apps/</link><pubDate>Wed, 20 Sep 2023 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2023-09-20-embed-external-page-in-power-apps/</guid><description>&lt;p>En este artículo veremos cómo incrustar oáginas web externas en &lt;strong>Microsoft Power Apps&lt;/strong> como si incluyeramos un IFrame dentro de nuestra App.&lt;/p>
&lt;p>Un cliente me ha solicitado hace poco que le incluya un sitio web dentro de su aplicación &lt;strong>Power Apps&lt;/strong> y no sabía cómo hacerlos, de hecho tenía entendido que no se podía hacerlo.&lt;/p>
&lt;p>Pero he encontrado una forma y el cliente quedó contento.&lt;/p>
&lt;h1 id="windows-y-powershell">Windows y PowerShell&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>Descargar los componentes de ejemplo desde aquí:
&lt;img src="https://i.ibb.co/3vjKfwD/external-web-pa-1.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Descargar el &lt;strong>Power Platform CLI&lt;/strong> desde &lt;a href="https://aka.ms/PowerAppsCLI">aquí&lt;/a> (en mi caso instalé la versión MSI).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Descomprimir el archivo descargado desde &lt;strong>GitHub&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>En &lt;strong>PowerShell&lt;/strong> empezar a jugar un poco con los comandos (siguiendo las instrucciones de &lt;a href="https://github.com/microsoft/PowerApps-Samples/blob/master/component-framework/README.md">aqui&lt;/a>):&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd C:\A\PowerApps-Samples-master\PowerApps-Samples-master\component-framework\IFrameControl\
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">mkdir IFrameSolution
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cd C:\A\PowerApps-Samples-master\PowerApps-Samples-master\component-framework\IFrameControl\IFrameSolution
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pac solution init --publisher-name powerapps_samples --publisher-prefix sample
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pac solution add-reference --path ../../IFrameControl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pac solution add-reference --path ../../IFrameControl/IFrameControl.pcfproj
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">msbuild /t:restore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">msbuild /t:rebuild /restore /p:Configuration=Release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">msbuild
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Con todo esto se debe crear un archivo &lt;strong>IFrameSolution.zip&lt;/strong> dentro de la carpeta &lt;em>bin/Release/&lt;/em>, el cual, llevaremos a &lt;strong>Power Apps&lt;/strong>.&lt;/p>
&lt;h1 id="power-apps">Power Apps&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>Procedemos a importar la solución generada en los pasos anteriores:
&lt;img src="https://i.ibb.co/gw2D1Pw/external-web-pa-2.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Verificamos si la importación fue correcta:
&lt;img src="https://i.ibb.co/RS07pgJ/external-web-pa-3.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Importamos el componente (en este caso, es un componente de tipo Código):
&lt;img src="https://i.ibb.co/D9TPFHL/external-web-pa-4.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Utilizamos el IFRAME&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Debemos tener en cuenta que el control de ejemplo sólo es un Mapa de Bing que permite latitud y longitud. Como en mi caso, se pueden agregar y/o modificar los parametros y volver a generar el control para cubrir nuestras necesidades.&lt;/p>
&lt;p>Se debe tener cuidado con ingresas &lt;strong>JavaScript&lt;/strong> pues el componente puede ser bloqueado por considerarse araque de &lt;strong>Cross-Site Scripting (XSS)&lt;/strong>.&lt;/p>
&lt;p>De esta manera, hemos visto como incrustar una página web dentro de &lt;strong>Microsoft Power Apps&lt;/strong>&lt;/p>
&lt;p>¡Espero resulte de utilidad!&lt;/p></description></item><item><title>Desarrollo en Windows App SDK</title><link>https://cmas.dev/posts/2022-05-18-windows-app-sdk-development/</link><pubDate>Wed, 18 May 2022 21:56:00 -0400</pubDate><guid>https://cmas.dev/posts/2022-05-18-windows-app-sdk-development/</guid><description>&lt;p>En este articulo, mostraré cómo empezar con el desarrollo con Windows App SDK especialmente diseñado para Widnows 11 y ciertas versiones de Windows 10 (superior a la versión 1809).&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22621&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Entresacando un poco las definiciones desde la &lt;a href="https://learn.microsoft.com/es-es/windows/apps/windows-app-sdk/">página oficial de Microsoft&lt;/a> encontramos este resumen:&lt;/p>
&lt;blockquote>
&lt;p>Windows App SDK es un conjunto de nuevas herramientas y componentes para desarrolladores que representa la próxima evolución en la plataforma de desarrollo de aplicaciones de Windows. Windows App SDK proporciona un conjunto unificado de API y herramientas que cualquier aplicación de escritorio puede usar de forma coherente en Windows 11 y niveles inferiores hasta Windows 10, versión 1809.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Windows App SDK complementa estas herramientas y tipos de aplicación existentes con un conjunto común de API que los desarrolladores pueden utilizar en estas plataformas.&lt;/p>
&lt;/blockquote>
&lt;p>Con todo esto podemos ver las &lt;a href="https://learn.microsoft.com/es-es/windows/apps/windows-app-sdk/#windows-app-sdk-features">&lt;strong>características de Windows App SDK&lt;/strong>&lt;/a>.&lt;/p>
&lt;h1 id="creación-de-un-proyecto-winui">Creación de un proyecto WinUI&lt;/h1>
&lt;p>Para empezar a utilizar Windows App SDK, debemos crear una interfaz de usuario y eso se explica en el sitio oficial de Microsoft:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>WinUI 3&lt;/strong> es el componente de la plataforma de interfaz de usuario nativa que se incluye con el SDK de Aplicaciones para Windows (completamente desacoplado de los SDK de Windows). El SDK de Aplicaciones para Windows proporciona un conjunto unificado de API y herramientas que se pueden usar para crear aplicaciones de escritorio de producción destinadas a Windows 10 y versiones posteriores que se pueden publicar en Microsoft Store.&lt;/p>
&lt;/blockquote>
&lt;p>Para la creación del proyecto debemos realizar los siguientes pasos:&lt;/p>
&lt;ol>
&lt;li>Crear un proyecto de tipo &lt;strong>WinUI 3&lt;/strong>
&lt;img src="https://cmas.dev/img/posts/2022/05/18/1.png" alt="">&lt;/li>
&lt;li>Se coloca un nombre descriptivo para el proyecto:
&lt;img src="https://cmas.dev/img/posts/2022/05/18/2.png" alt="">&lt;/li>
&lt;li>Se crea el proyecto con los siguientes archivos:
&lt;img src="https://cmas.dev/img/posts/2022/05/18/3.png" alt="">&lt;/li>
&lt;li>Procedemos a ejecutar la aplicación (y se ejecutará en nuestro &lt;strong>Windows 11&lt;/strong> directamente):
&lt;img src="https://cmas.dev/img/posts/2022/05/18/4.png" alt="">&lt;/li>
&lt;li>Veremos la aplicación ejecutada:
&lt;img src="https://cmas.dev/img/posts/2022/05/18/5.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>Con esto logramos crear nuestra primera aplicación &lt;strong>WinUI 3&lt;/strong>.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item></channel></rss>