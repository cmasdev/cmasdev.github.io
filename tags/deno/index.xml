<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Deno on Christian Amado</title><link>https://cmas.dev/tags/deno/</link><description>Recent content in Deno on Christian Amado</description><generator>Hugo</generator><language>es</language><lastBuildDate>Fri, 02 May 2025 00:00:00 -0300</lastBuildDate><atom:link href="https://cmas.dev/tags/deno/index.xml" rel="self" type="application/rss+xml"/><item><title>Mocks, cobertura y pruebas por capas en proyectos escalables</title><link>https://cmas.dev/posts/2025-05-02-advanced-testing-deno/</link><pubDate>Fri, 02 May 2025 00:00:00 -0300</pubDate><guid>https://cmas.dev/posts/2025-05-02-advanced-testing-deno/</guid><description>&lt;p>En el ecosistema moderno del desarrollo backend, el testing no es opcional: es esencial. En proyectos colaborativos y escalables, contar con pruebas automatizadas bien estructuradas marca la diferencia entre un código confiable y uno frágil. Deno 2 ofrece herramientas nativas poderosas para testear, pero muchas veces su uso avanzado no está del todo documentado. Este artículo muestra cómo implementar un enfoque de testing avanzado en Deno 2, incluyendo mocks manuales, cobertura de código y organización por capas.&lt;/p></description></item><item><title>Arquitectura limpia con Deno: estructuras escalables para proyectos open source</title><link>https://cmas.dev/posts/2025-04-24-deno-clean-architecture/</link><pubDate>Thu, 24 Apr 2025 00:00:00 -0300</pubDate><guid>https://cmas.dev/posts/2025-04-24-deno-clean-architecture/</guid><description>&lt;p>&lt;strong>Deno 2&lt;/strong> ha consolidado su lugar como una plataforma moderna para el desarrollo backend, enfocada en seguridad, rendimiento y simplicidad. Sin embargo, aún existe el desafío de estructurar proyectos de forma escalable y mantenible, especialmente cuando se busca colaborar en comunidad. Este artículo explora cómo aplicar los principios de &lt;strong>Clean Architecture&lt;/strong> en proyectos con &lt;strong>Deno 2&lt;/strong>, creando un código desacoplado, testable y abierto a contribuciones.&lt;/p></description></item><item><title>Migración de aplicaciones legacy a Deno</title><link>https://cmas.dev/posts/2025-03-05-migrate-legacy-apps-deno2/</link><pubDate>Wed, 05 Mar 2025 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2025-03-05-migrate-legacy-apps-deno2/</guid><description>&lt;p>La evolución de &lt;strong>Deno&lt;/strong> hacia su versión 2 representa un paso firme hacia una experiencia de desarrollo más coherente, segura y moderna en el ecosistema &lt;strong>JavaScript&lt;/strong> y &lt;strong>TypeScript&lt;/strong>. Si bien Deno 1 ya ofrecía ventajas importantes frente a &lt;strong>Node.js&lt;/strong>, &lt;strong>Deno 2&lt;/strong> consolida su propuesta con cambios significativos en la gestión de módulos, configuración del entorno y compatibilidad con estándares web. Este artículo describe cómo migrar una aplicación legacy —ya sea desarrollada en Node.js o en Deno 1— hacia Deno 2, abordando los desafíos técnicos y proponiendo una estrategia ordenada de transición.&lt;/p></description></item><item><title>Deploy automatizado de APIs Deno en Azure Functions</title><link>https://cmas.dev/posts/2025-02-05-automatized-deploy-api-deno/</link><pubDate>Wed, 05 Feb 2025 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2025-02-05-automatized-deploy-api-deno/</guid><description>&lt;p>El despliegue automatizado de APIs en la nube es una práctica esencial en el desarrollo moderno. &lt;strong>Deno&lt;/strong>, con su seguridad integrada y soporte nativo para TypeScript, es una excelente opción para construir APIs escalables y eficientes. &lt;strong>Azure Functions&lt;/strong>, por otro lado, permite ejecutar código sin preocuparse por la infraestructura subyacente.&lt;/p>
&lt;p>En este artículo, aprenderás cómo &lt;strong>desplegar automáticamente una API de Deno en Azure Functions&lt;/strong> usando GitHub Actions.&lt;/p></description></item><item><title>Diseño de APIs escalables con Deno y TypeScript</title><link>https://cmas.dev/posts/2025-01-15-scalable-design-apis/</link><pubDate>Wed, 15 Jan 2025 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2025-01-15-scalable-design-apis/</guid><description>&lt;p>El desarrollo de APIs escalables es un aspecto clave en la construcción de aplicaciones modernas. &lt;strong>Deno&lt;/strong>, un runtime moderno para JavaScript y TypeScript, ofrece una serie de características que lo convierten en una excelente alternativa para la creación de APIs seguras y eficientes. En este artículo, exploraremos cómo diseñar una API REST escalable utilizando &lt;strong>Deno y TypeScript&lt;/strong>, aplicando las mejores prácticas y optimizaciones.&lt;/p></description></item><item><title>Creación de aplicaciones serverless con Deno y Azure</title><link>https://cmas.dev/posts/2024-11-20-serverless-apps-deno-azure/</link><pubDate>Wed, 20 Nov 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-11-20-serverless-apps-deno-azure/</guid><description>&lt;p>El paradigma serverless permite construir aplicaciones sin necesidad de gestionar servidores, proporcionando escalabilidad automática y optimización de costos. En este artículo, exploraremos cómo crear aplicaciones serverless utilizando Deno y Azure Functions, combinando la eficiencia de Deno con la potencia de la nube de Azure.&lt;/p></description></item><item><title>Testing en Deno: Estrategias para Aplicaciones Grandes</title><link>https://cmas.dev/posts/2024-11-13-testing-strategies-in-deno/</link><pubDate>Wed, 13 Nov 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-11-13-testing-strategies-in-deno/</guid><description>&lt;p>El desarrollo de aplicaciones grandes con &lt;strong>Deno&lt;/strong> requiere un enfoque sólido en &lt;strong>pruebas automatizadas&lt;/strong> para garantizar su estabilidad y escalabilidad. Deno ofrece un sistema de testing integrado con herramientas modernas que facilitan la escritura y ejecución de pruebas unitarias, de integración y funcionales.&lt;/p>
&lt;p>En este artículo, exploraremos las &lt;strong>estrategias para testing en Deno&lt;/strong>, incluyendo fundamentos teóricos, mejores prácticas y ejemplos de código para aplicaciones a gran escala.&lt;/p></description></item><item><title>Integración de Angular con APIs RESTful en Deno</title><link>https://cmas.dev/posts/2024-10-30-angular-integration-with-api-rest-in-deno/</link><pubDate>Wed, 30 Oct 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-10-30-angular-integration-with-api-rest-in-deno/</guid><description>&lt;p>La integración entre &lt;strong>Angular&lt;/strong> y &lt;strong>APIs RESTful&lt;/strong> creadas con &lt;strong>Deno&lt;/strong> permite desarrollar aplicaciones modernas y escalables con una arquitectura limpia y basada en &lt;strong>TypeScript&lt;/strong>. En este artículo, exploraremos cómo conectar una aplicación Angular con un backend RESTful en Deno paso a paso, incluyendo fundamentos teóricos, ejemplos prácticos y buenas prácticas.&lt;/p></description></item><item><title>Desarrollo full-stack con Angular y Deno</title><link>https://cmas.dev/posts/2024-10-23-fullstack-development-with-angular-and-deno/</link><pubDate>Wed, 23 Oct 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-10-23-fullstack-development-with-angular-and-deno/</guid><description>&lt;p>El desarrollo full-stack ha evolucionado con nuevas tecnologías que permiten construir aplicaciones modernas, escalables y seguras. En este artículo, exploraremos cómo combinar Angular en el frontend y Deno en el backend para crear aplicaciones full-stack eficientes y bien estructuradas.&lt;/p></description></item><item><title>Mejores prácticas de modularidad con Deno 2</title><link>https://cmas.dev/posts/2024-09-11-best-practices-modularity-deno2/</link><pubDate>Wed, 11 Sep 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-09-11-best-practices-modularity-deno2/</guid><description>&lt;p>&lt;strong>Deno 2&lt;/strong> ha revolucionado el desarrollo con &lt;strong>JavaScript&lt;/strong> y &lt;strong>TypeScript&lt;/strong> al proporcionar un entorno moderno, seguro y modular. Su sistema de importación basado en URL y su soporte nativo para &lt;strong>TypeScript&lt;/strong> facilitan la creación de aplicaciones bien estructuradas y mantenibles. En este artículo, exploraremos las mejores prácticas para lograr modularidad en proyectos con &lt;strong>Deno 2&lt;/strong>.&lt;/p></description></item><item><title>Migración de Node.js a Deno: Caso práctico</title><link>https://cmas.dev/posts/2024-08-21-nodejs-migration-to-deno/</link><pubDate>Wed, 21 Aug 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-08-21-nodejs-migration-to-deno/</guid><description>&lt;p>En los últimos años, &lt;strong>Deno&lt;/strong> ha emergido como una alternativa moderna a &lt;strong>Node.js&lt;/strong>. Desarrollado por el mismo creador de &lt;strong>Node.js&lt;/strong>, &lt;strong>Deno&lt;/strong> busca abordar algunas de las limitaciones y problemas de diseño que han surgido con &lt;strong>Node.js&lt;/strong> a lo largo del tiempo. Este artículo presenta un caso práctico detallado sobre cómo migrar una aplicación existente de &lt;strong>Node.js&lt;/strong> a &lt;strong>Deno&lt;/strong>, destacando las diferencias clave, los desafíos y las soluciones.&lt;/p></description></item><item><title>Creación de microservicios con Deno y Azure Functions</title><link>https://cmas.dev/posts/2024-07-24-microservices-deno-azure/</link><pubDate>Wed, 24 Jul 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-07-24-microservices-deno-azure/</guid><description>&lt;p>En el mundo moderno del desarrollo de software, los microservicios han revolucionado la forma de construir y desplegar aplicaciones escalables. Al combinar &lt;strong>Deno&lt;/strong>, una plataforma de runtime moderna basada en &lt;strong>JavaScript&lt;/strong> y &lt;strong>TypeScript&lt;/strong>, con &lt;strong>Azure Functions&lt;/strong>, una solución serverless flexible de &lt;strong>Microsoft&lt;/strong>, los desarrolladores pueden crear microservicios rápidos, seguros y eficientes. Este artículo te guiará paso a paso en el proceso de crear microservicios utilizando estas tecnologías, destacando buenas prácticas, ejemplos prácticos y el uso de &lt;strong>Visual Studio Code&lt;/strong> como herramienta principal.&lt;/p></description></item><item><title>Deno, Go y Python en WSL2 para flujos mixtos de backend + AI</title><link>https://cmas.dev/posts/2024-06-14-wsl2-backend-ai/</link><pubDate>Fri, 14 Jun 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-06-14-wsl2-backend-ai/</guid><description>&lt;p>Combinar lenguajes modernos como &lt;strong>Deno&lt;/strong>, &lt;strong>Go&lt;/strong> y &lt;strong>Python&lt;/strong> permite crear soluciones backend de alto rendimiento con componentes de inteligencia artificial de forma modular y eficiente. Gracias a &lt;strong>WSL2&lt;/strong>, es posible configurar este stack en Linux desde Windows, integrando herramientas, librerías y entornos de ejecución en un mismo flujo de trabajo.&lt;/p></description></item><item><title>API RESTful con TypeScript y Deno: Guía completa</title><link>https://cmas.dev/posts/2024-05-29-api-restful-typescript-deno/</link><pubDate>Wed, 29 May 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-05-29-api-restful-typescript-deno/</guid><description>&lt;p>Deno, el moderno entorno de ejecución para JavaScript y TypeScript creado por Ryan Dahl, está transformando la manera en que se desarrollan aplicaciones backend. A diferencia de Node.js, Deno se centra en la seguridad, el rendimiento y una experiencia de desarrollo simplificada. En este artículo, exploraremos cómo construir una API RESTful utilizando &lt;strong>TypeScript&lt;/strong> y &lt;strong>Deno&lt;/strong> desde cero, cubriendo todas las operaciones CRUD (&lt;strong>POST, GET, PUT, DELETE&lt;/strong>) junto con buenas prácticas, seguridad y optimización&amp;hellip;&lt;/p></description></item><item><title>Seguridad en aplicaciones Deno: Autenticación y autorización</title><link>https://cmas.dev/posts/2024-05-08-deno-apps-security/</link><pubDate>Wed, 08 May 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-05-08-deno-apps-security/</guid><description>&lt;p>&lt;strong>Deno&lt;/strong>, como entorno de ejecución moderno para &lt;strong>JavaScript&lt;/strong> y &lt;strong>TypeScript&lt;/strong>, ofrece varias ventajas en términos de seguridad. Su enfoque en la seguridad por diseño incluye la gestión de permisos granular y un runtime sin acceso implícito al sistema. Sin embargo, la seguridad en aplicaciones Deno no solo depende del entorno, sino también de cómo se implementan funcionalidades clave como la autenticación y autorización. Este artículo explora cómo construir aplicaciones seguras en Deno con ejemplos prácticos y buenas prácticas.&lt;/p></description></item><item><title>¿Cómo configurar un proyecto TypeScript moderno con Deno?</title><link>https://cmas.dev/posts/2024-05-01-typescript-project-with-deno/</link><pubDate>Wed, 01 May 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-05-01-typescript-project-with-deno/</guid><description>&lt;h2 id="introducción">
 Introducción
 &lt;a class="heading-link" href="#introducci%c3%b3n">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Configurar un proyecto moderno en &lt;strong>TypeScript&lt;/strong> con &lt;strong>Deno&lt;/strong> permitirá aprovechar un entorno de desarrollo optimizado, seguro y compatible con los estándares más recientes, como &lt;strong>ES2024&lt;/strong>. Este artículo mostrará cómo realizar esta configuración tanto en &lt;strong>Visual Studio Code&lt;/strong> como en &lt;strong>JetBrains Rider&lt;/strong>, destacando buenas prácticas, incluyendo &lt;strong>testing&lt;/strong> con TypeScript, y proporcionando ejemplos prácticos de código.&lt;/p></description></item></channel></rss>