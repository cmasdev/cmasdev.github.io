<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MAUI on Blog de Christian Amado</title><link>https://cmas.dev/tags/maui/</link><description>Recent content in MAUI on Blog de Christian Amado</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>biz@cmas.dev (Christian Amado)</managingEditor><webMaster>biz@cmas.dev (Christian Amado)</webMaster><lastBuildDate>Wed, 02 Nov 2022 23:42:00 -0400</lastBuildDate><atom:link href="https://cmas.dev/tags/maui/index.xml" rel="self" type="application/rss+xml"/><item><title>Usando MAUI con Windows App SDK</title><link>https://cmas.dev/posts/2022-11-02-windows-app-using-maui/</link><pubDate>Wed, 02 Nov 2022 23:42:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-11-02-windows-app-using-maui/</guid><description>&lt;p>En este artículo veremos cómo &lt;strong>.NET MAUI&lt;/strong> interactúa con &lt;strong>Windows 11&lt;/strong> sin necesidad de funciones extras ni código para llegar a ese resultado.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25236&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Hemos visto en varios artículos anteriores, detalles sobre &lt;strong>.NET MAUI&lt;/strong>, pero aquí me surge la necesidad de saber qué pasa en el caso de Windows cuando, por ejemplo, necesitamos acceder al sistema de archivos. ¿Qué pasa? Comparando con &lt;strong>Android&lt;/strong> ¿Cómo se comporta? Seguí leyendo y veamos.&lt;/p>
&lt;h2 id="abrir-imagen-en-windows-11">Abrir imagen en Windows 11&lt;/h2>
&lt;p>Con estos pasos lograremos abrir un archivo y cargarlo en nuestro diseño.&lt;/p>
&lt;ol>
&lt;li>Creamos el método que permite abrir los archivos en el Windows:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">private async Task&amp;lt;FileResult&amp;gt; PickAndShow(PickOptions options)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> try
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var result = await FilePicker.Default.PickAsync(options);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (result != null)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (result.FileName.EndsWith(&amp;#34;jpg&amp;#34;, StringComparison.OrdinalIgnoreCase) ||
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> result.FileName.EndsWith(&amp;#34;png&amp;#34;, StringComparison.OrdinalIgnoreCase))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> using var stream = await result.OpenReadAsync();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var image = ImageSource.FromStream(() =&amp;gt; stream);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return result;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> catch (Exception ex)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> throw ex;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return null;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Hacemos la llamada al método y el resultado lo exponemos en la imagen principal:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">private async void OnCounterClicked(object sender, EventArgs e)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var resultado = await PickAndShow(PickOptions.Images);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> imgLogo.Source = (ImageSource) new ImageSourceConverter().ConvertFromString(resultado.FullPath);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Hicimos un cambio en el XAML, colocamos un nombre a la imagen para poder reemplazar el &lt;em>Source&lt;/em> de dicha imagen:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;Image
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Name=&amp;#34;imgLogo&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Source=&amp;#34;dotnet_bot.png&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SemanticProperties.Description=&amp;#34;Cute dot net bot waving hi to you!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HeightRequest=&amp;#34;200&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HorizontalOptions=&amp;#34;Center&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Ejecutamos la aplicación y vemos los resultados:
&lt;img src="https://cmas.dev/img/posts/2022/11/02/1.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cmas.dev/img/posts/2022/11/02/2.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://cmas.dev/img/posts/2022/11/02/3.png" alt="">&lt;/p>
&lt;h2 id="abrir-imagen-en-android">Abrir imagen en Android&lt;/h2>
&lt;p>Como todo esto lo hicimos con &lt;strong>.NET MAUI&lt;/strong>, debemos hacer ¡NADA!&lt;/p>
&lt;ol>
&lt;li>Ejecutamos en &lt;strong>Android&lt;/strong> y&amp;hellip;
&lt;img src="https://cmas.dev/img/posts/2022/11/02/4.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cmas.dev/img/posts/2022/11/02/5.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://cmas.dev/img/posts/2022/11/02/6.png" alt="">&lt;/p>
&lt;p>Con una única línea de código pudimos realizar esta tarea sencilla sin necesidad de solicitar permisos ni nada desde la aplicación. esa es una de las ventajas que me gusta de &lt;strong>.NET MAUI&lt;/strong>&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Aplicación multilingüe en MAUI</title><link>https://cmas.dev/posts/2022-10-05-multi-language-app-maui/</link><pubDate>Wed, 05 Oct 2022 17:48:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-10-05-multi-language-app-maui/</guid><description>&lt;p>En este artículo mostraré cómo crear una aplicación &lt;strong>.NET MAUI&lt;/strong> multilingüe sobre &lt;strong>Windows 11&lt;/strong> utilizando archivos de recursos.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 22621&lt;/strong>&lt;/em>&lt;/p>
&lt;p>En un &lt;a href="https://cmas.dev/posts/2022-09-21-data-binding-in-maui/">artículo anterior&lt;/a> hemos creado un proyecto donde vimos cómo utilizar la técnica de &lt;em>Data binding&lt;/em> (usaremos ese mismo proyecto).&lt;/p>
&lt;p>Necesitamos crear archivos de recuros y enlazarlos al XAML para que éstos funcionen. Vamos a enfocarnos en el idioma inglés (ya que el proyecto viene así).&lt;/p>
&lt;h2 id="crear-archivos-de-recursos">Crear archivos de recursos&lt;/h2>
&lt;p>Para empezar con la localización,&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Crear una carpeta con el nombre &lt;em>Localization&lt;/em> (puede tener cualquier nombre) y colocarla dentro de la carpeta &lt;em>Resources&lt;/em>:
&lt;img src="https://cmas.dev/img/posts/2022/10/05/1.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Dentro de dicha carpeta, se crear el archivo de tipo Recurso(.resx):&lt;br>
&lt;img src="https://cmas.dev/img/posts/2022/10/05/2.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Completamos las filas con los registros necesarios (deben ser nombres descriptivos sin espacios ni caracteres especiales):
&lt;img src="https://cmas.dev/img/posts/2022/10/05/3.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Repetimos el paso 2, pero le colocamos las iniciales del idioma que queremos utilizar (en mi caso &lt;strong>es&lt;/strong>) y completamos las fials con las traducciones:
&lt;img src="https://cmas.dev/img/posts/2022/10/05/4.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>¡Listo! Es hora de código &lt;strong>XAML&lt;/strong> y &lt;strong>C#&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="localizar-aplicaciones-net-maui">Localizar aplicaciones .NET MAUI&lt;/h2>
&lt;p>Aquí es donde se realiza el trabajo, los cuatro(4) primeros pasos corresponden a configuraciones generales, es decir, que se realizan de la misma forma para todos los proyectos multilingüe que queramos. Luego, el código &lt;strong>XAML&lt;/strong> ya puede variar según cada caso.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Instalar el paquete &lt;strong>NuGet&lt;/strong> con el nombre &lt;strong>Microsoft.Extensions.Localization&lt;/strong> (lo puedes descargar &lt;a href="https://www.nuget.org/packages/Microsoft.Extensions.Localization">aquí&lt;/a>):&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Crear (en la raíz del proyecto) el archivo &lt;strong>ServiceHelper.cs&lt;/strong> que permite identificar cada plataforma y obtener el servicio (relacionado a la &lt;em>Dependency Injection&lt;/em>):&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">namespace Maui_DataBinding
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public static class ServiceHelper
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public static TService GetService&amp;lt;TService&amp;gt;() =&amp;gt; Current.GetService&amp;lt;TService&amp;gt;();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public static IServiceProvider Current =&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#if WINDOWS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MauiWinUIApplication.Current.Services;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#elif ANDROID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MauiApplication.Current.Services;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#elif IOS || MACCATALYST
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MauiUIApplicationDelegate.Current.Services;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> null;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#endif
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Crear una extension de método para poder utilizarla en cualquier página &lt;strong>XAML&lt;/strong> que necesitemos:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">using Maui_DataBinding.Resources.Localization;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">using Microsoft.Extensions.Localization;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">namespace Maui_DataBinding
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [ContentProperty(nameof(Key))]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public class LocalizeExtension : IMarkupExtension
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IStringLocalizer&amp;lt;AppLocalize&amp;gt; _localizer;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public string Key { get; set; } = string.Empty;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public LocalizeExtension()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> _localizer = ServiceHelper.GetService&amp;lt;IStringLocalizer&amp;lt;AppLocalize&amp;gt;&amp;gt;();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public object ProvideValue(IServiceProvider serviceProvider)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> string localizedText = _localizer[Key];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return localizedText;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> object IMarkupExtension.ProvideValue(IServiceProvider serviceProvider) =&amp;gt; ProvideValue(serviceProvider);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Por último, el el archivo &lt;strong>MauiProgram.cs&lt;/strong> se agregar el servicio de Localización:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">builder.Services.AddLocalization();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>La clase completa, queda así:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">using Microsoft.Extensions.Logging;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">namespace Maui_DataBinding;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public static class MauiProgram
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public static MauiApp CreateMauiApp()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var builder = MauiApp.CreateBuilder();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .UseMauiApp&amp;lt;App&amp;gt;()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .ConfigureFonts(fonts =&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fonts.AddFont(&amp;#34;OpenSans-Regular.ttf&amp;#34;, &amp;#34;OpenSansRegular&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fonts.AddFont(&amp;#34;OpenSans-Semibold.ttf&amp;#34;, &amp;#34;OpenSansSemibold&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder.Services.AddLocalization();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#if DEBUG
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder.Logging.AddDebug();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#endif
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return builder.Build();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Modificamos nuestro código XAML, donde agregamos el espacio de nombre de nuestro proyecto y agregamos las extensiones en las propiedades de texto:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34; ?&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;ContentPage xmlns=&amp;#34;http://schemas.microsoft.com/dotnet/2021/maui&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2009/xaml&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:local=&amp;#34;clr-namespace:Maui_DataBinding&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Class=&amp;#34;Maui_DataBinding.MainPage&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;ScrollView&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;VerticalStackLayout
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Spacing=&amp;#34;25&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Padding=&amp;#34;30,0&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> VerticalOptions=&amp;#34;Center&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Image
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Source=&amp;#34;dotnet_bot.png&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SemanticProperties.Description=&amp;#34;{local:Localize Key=BotImage}&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HeightRequest=&amp;#34;200&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HorizontalOptions=&amp;#34;Center&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Label
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text=&amp;#34;{local:Localize Key=HelloText}&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SemanticProperties.HeadingLevel=&amp;#34;Level1&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FontSize=&amp;#34;32&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HorizontalOptions=&amp;#34;Center&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Label
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text=&amp;#34;{local:Localize Key=WelcomeText}&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SemanticProperties.HeadingLevel=&amp;#34;Level2&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SemanticProperties.Description=&amp;#34;{local:Localize Key=WelcomeDescriptionText}&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FontSize=&amp;#34;18&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HorizontalOptions=&amp;#34;Center&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Button
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Name=&amp;#34;CounterBtn&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text=&amp;#34;{Binding CounterBtnText}&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SemanticProperties.Hint=&amp;#34;{local:Localize Key=ButtonTextHint}&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Clicked=&amp;#34;OnCounterClicked&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HorizontalOptions=&amp;#34;Center&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Button
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Name=&amp;#34;LangBtn&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text=&amp;#34;Change language&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Clicked=&amp;#34;OnLangBtnClicked&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HorizontalOptions=&amp;#34;Center&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/VerticalStackLayout&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/ScrollView&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/ContentPage&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>En vista, que hemos modificado el código &lt;strong>C#&lt;/strong> para la técnica de &lt;em>Data Binding&lt;/em>, debemos modificarla también:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">public string CounterBtnText
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> get
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (Count == 0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return AppLocalize.ButtonTextInitial;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (Count == 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return AppLocalize.ButtonTextSingular.Replace(&amp;#34;{Count}&amp;#34;, Count.ToString());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return AppLocalize.ButtonTextPlural.Replace(&amp;#34;{Count}&amp;#34;, Count.ToString());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="7">
&lt;li>&lt;strong>EXTRA&lt;/strong> aquí se muestra como cambiar el idioma sin reiniciar la aplicación:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">private void OnLangBtnClicked(object sender, EventArgs e)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (App.Current as App).MainPage.Dispatcher.Dispatch(() =&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo(&amp;#34;es-PY&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo(&amp;#34;es-PY&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (App.Current as App).MainPage = new AppShell();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="8">
&lt;li>
&lt;p>Ejecutamos la aplicación presionando &lt;em>F5&lt;/em> y veremos en Inglés así:
&lt;img src="https://cmas.dev/img/posts/2022/10/05/5.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hacemo clic en el botón &amp;ldquo;Change language&amp;rdquo; y debemos ver el español:
&lt;img src="https://cmas.dev/img/posts/2022/10/05/6.png" alt="">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Aplicando modelo MVVM con MAUI</title><link>https://cmas.dev/posts/2022-09-28-mvvm-in-maui/</link><pubDate>Wed, 28 Sep 2022 21:06:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-09-28-mvvm-in-maui/</guid><description>&lt;p>En este artículo mostraré cómo aplicar el modelo MVVM en &lt;strong>.NET MAUI&lt;/strong> sobre &lt;strong>Windows 11&lt;/strong>.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25206&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;strong>MVVM&lt;/strong> en &lt;strong>.NET MAUI&lt;/strong> para &lt;strong>Windows&lt;/strong> es un patrón que permite crear aplicaciones de escritorio con una interfaz de usuario basada en &lt;strong>XAML&lt;/strong> y una lógica de negocio separada en el modelo de vista. &lt;strong>MVVM&lt;/strong> es un patrón bien establecido en &lt;strong>.NET&lt;/strong> y hay muchos marcos que facilitan su desarrollo. Uno de ellos es el &lt;strong>MVVM Toolkit&lt;/strong>, que es parte del &lt;strong>.NET Community Toolkit&lt;/strong>.&lt;/p>
&lt;p>Así que me puse a leer la documentación oficial (deberías hacer lo mismo) que se encuentra &lt;a href="https://learn.microsoft.com/es-es/dotnet/architecture/maui/mvvm">aquí&lt;/a>.&lt;/p>
&lt;p>Para el ejemplo, crearemos una lista de &amp;ldquo;Alumnos&amp;rdquo; (Nombre y Apellido con fotos) que aplicaremos en un modelo &lt;em>MVVM&lt;/em>.&lt;/p>
&lt;h2 id="creando-el-código">Creando el código&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Descargamos el paquete &lt;strong>NuGet&lt;/strong> para &lt;em>MVVM&lt;/em> que se encuentra &lt;a href="https://www.nuget.org/packages/CommunityToolkit.Mvvm/">aquí&lt;/a>(obviamente es mejor hacerlo desde Visual Studio 2022) y lo instalamos.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Agregamos una nueva clase con el nombre &lt;strong>Alumno.cs&lt;/strong> y lo colocamos en la raiz del proyecto con el siguiente código:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">namespace MauiMvvm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public class Alumno
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public string FirstName { get; set; }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public string LastName { get; set; }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public string ImageUrl { get; set; }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Agregamos una nueva clase con el nombre &lt;strong>AlumnoViewModel.cs&lt;/strong> y lo colocamos en la raiz del proyecto con el siguiente código:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">using CommunityToolkit.Mvvm.ComponentModel;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">namespace MauiMvvm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [INotifyPropertyChanged]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public partial class AlumnoViewModel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [ObservableProperty]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public List&amp;lt;Alumno&amp;gt; alumnos = new List&amp;lt;Alumno&amp;gt;();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public AlumnoViewModel()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> alumnos.Add(new Alumno() { FirstName = &amp;#34;Eliseo&amp;#34;, LastName = &amp;#34;Ortega&amp;#34;, ImageUrl = &amp;#34;mugpy.jpg&amp;#34; });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> alumnos.Add(new Alumno() { FirstName = &amp;#34;Dulce&amp;#34;, LastName = &amp;#34;Barrios&amp;#34;, ImageUrl = &amp;#34;profile.jpg&amp;#34; });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> alumnos.Add(new Alumno() { FirstName = &amp;#34;Microsoft&amp;#34;, LastName = &amp;#34;DotNet&amp;#34;, ImageUrl = &amp;#34;dotnet_bot.png&amp;#34; });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> alumnos.Add(new Alumno() { FirstName = &amp;#34;Christian&amp;#34;, LastName = &amp;#34;Amado&amp;#34;, ImageUrl = &amp;#34;amado.jpg&amp;#34; });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>En la página principal &lt;strong>MainPage.xaml&lt;/strong> generamos una lista:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34; ?&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;ContentPage xmlns=&amp;#34;http://schemas.microsoft.com/dotnet/2021/maui&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2009/xaml&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Class=&amp;#34;MauiMvvm.MainPage&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;ListView ItemsSource=&amp;#34;{Binding Alumnos}&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;ListView.ItemTemplate&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;DataTemplate&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;ViewCell&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Grid Padding=&amp;#34;10&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Grid.RowDefinitions&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;RowDefinition Height=&amp;#34;Auto&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;RowDefinition Height=&amp;#34;Auto&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/Grid.RowDefinitions&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Grid.ColumnDefinitions&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;ColumnDefinition Width=&amp;#34;Auto&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;ColumnDefinition Width=&amp;#34;Auto&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/Grid.ColumnDefinitions&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Image Grid.RowSpan=&amp;#34;2&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Source=&amp;#34;{Binding ImageUrl}&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Aspect=&amp;#34;AspectFill&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HeightRequest=&amp;#34;60&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WidthRequest=&amp;#34;60&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Label Grid.Column=&amp;#34;1&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text=&amp;#34;{Binding FirstName}&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FontAttributes=&amp;#34;Bold&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Label Grid.Row=&amp;#34;1&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Grid.Column=&amp;#34;1&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text=&amp;#34;{Binding LastName}&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FontAttributes=&amp;#34;Italic&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> VerticalOptions=&amp;#34;End&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/Grid&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/ViewCell&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/DataTemplate&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/ListView.ItemTemplate&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/ListView&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/ContentPage&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>El código &lt;strong>C#&lt;/strong> que se encuentra en &lt;strong>MainPage.xaml.cs&lt;/strong> se encuentra aquí:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">namespace MauiMvvm;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public partial class MainPage : ContentPage
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int count = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public MainPage()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> InitializeComponent();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> BindingContext = new AlumnoViewModel();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>Ejecutamos el código con &lt;em>F5&lt;/em> y&amp;hellip;
&lt;img src="https://cmas.dev/img/posts/2022/09/28/1.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>De esta manera implementamos el modelo MVVM de manera muy rápida y sencilla gracias al paquete &lt;strong>MVVM Toolkit&lt;/strong>.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Data Binding en MAUI</title><link>https://cmas.dev/posts/2022-09-21-data-binding-in-maui/</link><pubDate>Wed, 21 Sep 2022 20:32:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-09-21-data-binding-in-maui/</guid><description>&lt;p>En este artículo mostraré cómo utilizar la técnica de &lt;em>Data Binding&lt;/em> en una aplicación &lt;strong>.NET MAUI&lt;/strong> sobre &lt;strong>Windows 11&lt;/strong>.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25206&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;em>Data binding&lt;/em> en &lt;strong>XAML&lt;/strong> es un mecanismo que permite vincular propiedades de dos objetos dentro de una página, o entre objetos visuales y datos subyacentes. Se declara usando una extensión de marcado llamada &lt;strong>Binding&lt;/strong>. La declaración de &lt;em>data binding&lt;/em> consiste en una serie de cláusulas que siguen la palabra clave &lt;strong>Binding&lt;/strong> y se separan por comas (,). Las cláusulas pueden estar en cualquier orden y existen muchas combinaciones posibles.&lt;/p>
&lt;h2 id="preparar-el-proyecto">Preparar el proyecto&lt;/h2>
&lt;p>Primeramente, debemos crear el proyecto &lt;strong>.NET MAUI&lt;/strong> y tenerlo listo para la plataforma &lt;strong>Windows 11&lt;/strong>:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Creamos el proyecto en Visual Studio 2022:
&lt;img src="https://cmas.dev/img/posts/2022/09/21/1.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Colocamos un nombre descriptivo al proyecto nuevo:
&lt;img src="https://cmas.dev/img/posts/2022/09/21/2.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Seleccionamos el .NET Core que deseamos utilizar:
&lt;img src="https://cmas.dev/img/posts/2022/09/21/3.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>En el archivo &lt;strong>MainPage.xaml&lt;/strong> verificamos el código &lt;strong>XAML&lt;/strong>:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34; ?&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;ContentPage xmlns=&amp;#34;http://schemas.microsoft.com/dotnet/2021/maui&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2009/xaml&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Class=&amp;#34;Maui_DataBinding.MainPage&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;ScrollView&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;VerticalStackLayout
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Spacing=&amp;#34;25&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Padding=&amp;#34;30,0&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> VerticalOptions=&amp;#34;Center&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Image
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Source=&amp;#34;dotnet_bot.png&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SemanticProperties.Description=&amp;#34;Cute dot net bot waving hi to you!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HeightRequest=&amp;#34;200&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HorizontalOptions=&amp;#34;Center&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Label
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text=&amp;#34;Hello, World!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SemanticProperties.HeadingLevel=&amp;#34;Level1&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FontSize=&amp;#34;32&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HorizontalOptions=&amp;#34;Center&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Label
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text=&amp;#34;Welcome to .NET Multi-platform App UI&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SemanticProperties.HeadingLevel=&amp;#34;Level2&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SemanticProperties.Description=&amp;#34;Welcome to dot net Multi platform App U I&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FontSize=&amp;#34;18&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HorizontalOptions=&amp;#34;Center&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Button
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Name=&amp;#34;CounterBtn&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text=&amp;#34;Click me&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SemanticProperties.Hint=&amp;#34;Counts the number of times you click&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Clicked=&amp;#34;OnCounterClicked&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HorizontalOptions=&amp;#34;Center&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/VerticalStackLayout&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/ScrollView&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/ContentPage&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Prestemos atención al código del botón &lt;strong>XAML&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;Button
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Name=&amp;#34;CounterBtn&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text=&amp;#34;Click me&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SemanticProperties.Hint=&amp;#34;Counts the number of times you click&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Clicked=&amp;#34;OnCounterClicked&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HorizontalOptions=&amp;#34;Center&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>También verifiquemos al código del botón &lt;strong>C#&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">namespace Maui_DataBinding;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public partial class MainPage : ContentPage
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int count = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public MainPage()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> InitializeComponent();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private void OnCounterClicked(object sender, EventArgs e)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> count++;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (count == 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CounterBtn.Text = $&amp;#34;Clicked {count} time&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CounterBtn.Text = $&amp;#34;Clicked {count} times&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SemanticScreenReader.Announce(CounterBtn.Text);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="7">
&lt;li>Ejecutamos el código con &lt;em>F5&lt;/em> y veremos la aplicación Windows:
&lt;img src="https://cmas.dev/img/posts/2022/09/21/4.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>Bien hasta aquí no hay nada extraño en ningún lado.&lt;/p>
&lt;h2 id="databinding-en-net-maui">DataBinding en .NET MAUI&lt;/h2>
&lt;p>&lt;strong>Data binding&lt;/strong> es una técnica que permite vincular dos propiedades entre dos objetos, al menos uno de los cuales suele ser un objeto de interfaz de usuario. Estos dos objetos se llaman el destino y la fuente. &lt;strong>Data binding&lt;/strong> facilita la actualización automática de los datos entre los objetos.&lt;/p>
&lt;p>Ahora vamos a adaptar nuestro código para que nuestra técnica funcione.&lt;/p>
&lt;ol>
&lt;li>En el constructor de la clase (en MainPage.xaml.cs) colocaremos el contexto de enlace:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">public MainPage()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> InitializeComponent();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> BindingContext = this;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Debemos crear una nueva propiedad (para hacer uso del atributo &lt;em>count&lt;/em>):&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">int count = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public int Count
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> get
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return count;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> set
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> count = value;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> OnPropertyChanged();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> OnPropertyChanged(&amp;#34;CounterBtnText&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Ahora, debemos colocar la lógica en una propiedad para que se produzca el cambio (en este caso la propeidad será &lt;strong>CounterBtnText&lt;/strong>):&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">public string CounterBtnText
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> get
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (Count == 0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#34;Click Here&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (Count == 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return $&amp;#34;Clicked {Count} time&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return $&amp;#34;Clicked {Count} times&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Nuestro evento &lt;strong>Click&lt;/strong> del botón sufre modificaciones debido a que la lógica está en la nueva propiedad:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">private void OnCounterClicked(object sender, EventArgs e)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Count++;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Por último modificamos nuestra definición del botón en el código &lt;strong>XAML&lt;/strong> dentro del archivo &lt;strong>MainPage.xaml&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;Button
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Name=&amp;#34;CounterBtn&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text=&amp;#34;{Binding CounterBtnText}&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SemanticProperties.Hint=&amp;#34;Counts the number of times you click&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Clicked=&amp;#34;OnCounterClicked&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HorizontalOptions=&amp;#34;Center&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>Ejecutamos la aplicación y nos queda así:
&lt;img src="https://cmas.dev/img/posts/2022/09/21/5.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Primeros pasos con XAML en MAUI</title><link>https://cmas.dev/posts/2022-09-14-first-step-xaml-in-maui/</link><pubDate>Wed, 14 Sep 2022 23:18:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-09-14-first-step-xaml-in-maui/</guid><description>&lt;p>En este artículo mostraré cómo iniciar los pasos con el lenguaje &lt;strong>XAML&lt;/strong> en &lt;strong>.NET MAUI&lt;/strong>.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25201&lt;/strong>&lt;/em>&lt;/p>
&lt;p>En este pequeño artículo vamos a utilizar controles de Telerik para &lt;strong>.NET MAUI&lt;/strong>. En un &lt;a href="">artículo anterior&lt;/a> vimos cómo crear una aplicación &lt;strong>.NET MAUI&lt;/strong> y aquí haremos otra basada en otra plantilla (&lt;a href="https://www.telerik.com/support/whats-new/maui-ui/release-history/telerik-ui-for-net-maui-(version-3-0-0)">Telerik&lt;/a>).
&lt;img src="https://cmas.dev/img/posts/2022/09/14/1.png" alt="">&lt;/p>
&lt;h2 id="telerik-sidedrawer">Telerik SideDrawer&lt;/h2>
&lt;p>Este control (conocido como Menú Hamburguesa) se utiliza para hacer la navegación muy amigable debido a que el menú queda al costado de nuestro diseño y permite una visualización completa del mismo. En Windows 11 se refiere a &lt;a href="https://learn.microsoft.com/en-us/windows/apps/design/controls/navigationview">NavigationView&lt;/a>.&lt;/p>
&lt;p>La definición del control, en lenguaje &lt;strong>XAML&lt;/strong>, sería:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;ContentPage xmlns=&amp;#34;http://schemas.microsoft.com/dotnet/2021/maui&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2009/xaml&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:telerik=&amp;#34;http://schemas.telerik.com/2022/xaml/maui&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Class=&amp;#34;TelerikMauiApp1.MainPage&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;ScrollView&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;telerik:RadSideDrawer x:Name=&amp;#34;drawer&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DrawerLength=&amp;#34;200&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;telerik:RadSideDrawer.MainContent&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Grid&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Label Text=&amp;#34;Main content on CMASDEV BLOG&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/Grid&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/telerik:RadSideDrawer.MainContent&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;telerik:RadSideDrawer.DrawerContent&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;VerticalStackLayout Spacing=&amp;#34;10&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Padding=&amp;#34;10, 10, 0, 0&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;VerticalStackLayout.Resources&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Style x:Key=&amp;#34;DefaultButtonStyle&amp;#34; TargetType=&amp;#34;Button&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Setter Property=&amp;#34;WidthRequest&amp;#34; Value=&amp;#34;180&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Setter Property=&amp;#34;HeightRequest&amp;#34; Value=&amp;#34;40&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Setter Property=&amp;#34;BackgroundColor&amp;#34; Value=&amp;#34;#b1b1b1&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Setter Property=&amp;#34;TextColor&amp;#34; Value=&amp;#34;Black&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/Style&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/VerticalStackLayout.Resources&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Button Text=&amp;#34;Mail&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Style=&amp;#34;{StaticResource DefaultButtonStyle}&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Button Text=&amp;#34;Calendar&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Style=&amp;#34;{StaticResource DefaultButtonStyle}&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Button Text=&amp;#34;People&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Style=&amp;#34;{StaticResource DefaultButtonStyle}&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Button Text=&amp;#34;Tasks&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Style=&amp;#34;{StaticResource DefaultButtonStyle}&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/VerticalStackLayout&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/telerik:RadSideDrawer.DrawerContent&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/telerik:RadSideDrawer&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/ScrollView&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/ContentPage&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Con esta definición declarativa logramos que el control tenga todos los detalles necesarios para su funcionamiento.&lt;/p>
&lt;p>Visualmente, el resultado del código XAML es:
&lt;img src="https://cmas.dev/img/posts/2022/09/14/2.png" alt="">&lt;br>
&lt;img src="https://cmas.dev/img/posts/2022/09/14/3.png" alt="">&lt;/p>
&lt;p>Si realmente necesitas aprender &lt;strong>XAML&lt;/strong>, la documentación de Microsft &lt;a href="https://learn.microsoft.com/es-es/dotnet/maui/xaml/fundamentals/get-started?view=net-maui-7.0">aquí&lt;/a> está muy completa.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Mi Primera Aplicación MAUI</title><link>https://cmas.dev/posts/2022-08-24-first-app-in-maui/</link><pubDate>Wed, 24 Aug 2022 21:04:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-08-24-first-app-in-maui/</guid><description>&lt;p>En este artículo mostraré cómo crear la primera aplicación &lt;strong>.NET MAUI&lt;/strong> preparada para Android y Windows 11.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25188&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Para crear un proyecto .NET MAUI no se necesitan demasiados pasos para lograr el objetivo, basta con seguir estos sencillos pasos que se muestran a continuación.&lt;/p>
&lt;ol>
&lt;li>Crear un nuevo proyecto:
&lt;img src="https://cmas.dev/img/posts/2022/08/24/1.png" alt="">&lt;/li>
&lt;li>Colocar un nombre descriptivo:
&lt;img src="https://cmas.dev/img/posts/2022/08/24/2.png" alt="">&lt;/li>
&lt;li>Seleccionar el Framework y creamos el proyecto:
&lt;img src="https://cmas.dev/img/posts/2022/08/24/3.png" alt="">&lt;/li>
&lt;li>Verificamos la estructura del proyecto y las plataformas habilitadas:
&lt;img src="https://cmas.dev/img/posts/2022/08/24/4.png" alt="">&lt;/li>
&lt;li>Ejecutamos la aplicación en Windows (usa Windows App SDK):
&lt;img src="https://cmas.dev/img/posts/2022/08/24/5.png" alt="">&lt;/li>
&lt;li>Cambiamos el escenario a un emulador Android:
&lt;img src="https://cmas.dev/img/posts/2022/08/24/6.png" alt="">&lt;/li>
&lt;li>Lo ejecutamos para probar:
&lt;img src="https://cmas.dev/img/posts/2022/08/24/7.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>¡Listo! Así hemos creado nuestro proyecto &lt;strong>.NET MAUI&lt;/strong> sin demasiado esfuerzo.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Estructura básica de un proyecto MAUI</title><link>https://cmas.dev/posts/2022-08-17-basic-struct-of-maui-project/</link><pubDate>Wed, 17 Aug 2022 18:07:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-08-17-basic-struct-of-maui-project/</guid><description>&lt;p>En este artículo mostraré cómo es la estructura básica de un proyecto &lt;strong>.NET MAUI&lt;/strong> .&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25179&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Primeramente, debemos conocer la estructura en sí de &lt;strong>.NET MAUI&lt;/strong> que se encuentra en el sitio oficial de Microsoft. La documentación oficial se encuentra &lt;a href="https://learn.microsoft.com/es-es/dotnet/maui/what-is-maui?view=net-maui-7.0">aquí&lt;/a>&lt;/p>
&lt;p>Funcionalmente, .NET MAUI opera de la siguiente manera:
&lt;img src="https://cmas.dev/img/posts/2022/08/17/1.png" alt="">&lt;/p>
&lt;h2 id="estructura-del-proyecto-net-maui">Estructura del proyecto .NET MAUI&lt;/h2>
&lt;p>El proyecto que se crea en &lt;strong>.NET MAUI&lt;/strong> posee la siguiente estructura:
&lt;img src="https://cmas.dev/img/posts/2022/08/17/2.png" alt="">&lt;/p>
&lt;h3 id="dependencias-dependencies">Dependencias (Dependencies)&lt;/h3>
&lt;p>Las dependencias son los paquetes (librerías) disponibles para cada plataforma soportada en &lt;strong>.NET MAUI&lt;/strong>.&lt;/p>
&lt;p>En este caso serían:&lt;/p>
&lt;ul>
&lt;li>Android.&lt;/li>
&lt;li>iOS.&lt;/li>
&lt;li>Mac Catalyst.&lt;/li>
&lt;li>Windows 10 (pues tiene en cuenta la versión mínima soportada).&lt;/li>
&lt;/ul>
&lt;h3 id="plataformas-platforms">Plataformas (Platforms)&lt;/h3>
&lt;p>Esta carpeta indica las configuraciones específicas de cada plataforma. Cada una de ellas posee su propia configuración dependiendo de las necesidades de la aplicación.&lt;/p>
&lt;h3 id="recursos-resources">Recursos (Resources)&lt;/h3>
&lt;p>Son los recursos compartidos entre las plataformas, de esta manera se pueden reutilizar elementos en todas las plataformas sin repetirlos.)&lt;/p>
&lt;p>Con esta estructura definida, creamos y desarrollamos las aplicaciones en &lt;strong>.NET MAUI&lt;/strong>&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Instalando .NET MAUI en Visual Studio 2022</title><link>https://cmas.dev/posts/2022-08-10-installing-maui-on-visual-studio-2022/</link><pubDate>Wed, 10 Aug 2022 19:19:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-08-10-installing-maui-on-visual-studio-2022/</guid><description>&lt;p>En este artículo mostraré cómo instalar los componentes necesarios para el desarrollo en &lt;strong>.NET MAUI&lt;/strong> para Windows 11 y Android.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25179&lt;/strong>&lt;/em>&lt;/p>
&lt;p>La instalación de componentes en Visual Studio siempre ha sido sencilla y esta no es la excepción.&lt;/p>
&lt;h2 id="desinstalar-visual-studio-2022-preview">Desinstalar Visual Studio 2022 Preview&lt;/h2>
&lt;p>Ya estuvimos probando .NET MAUI desde hace rato así que es tiempo de eliminar la versión Preview e instalar la versión oficial. Para ellos debemos realizar dos pasos sencillos:&lt;/p>
&lt;ol>
&lt;li>Ir a &lt;strong>Panel de control&lt;/strong> &amp;gt; &lt;strong>Desinstalar programas&lt;/strong>.&lt;/li>
&lt;li>Seleccionar &lt;strong>Microsoft Visual Studio 2022 Preview&lt;/strong> y listo.&lt;/li>
&lt;/ol>
&lt;h2 id="instalar-visual-studio-2022">Instalar Visual Studio 2022&lt;/h2>
&lt;p>Instalar Visual Studio 2022 es bien sencillo.&lt;/p>
&lt;ol>
&lt;li>Descargar el instalador nuevo &lt;a href="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=Professional&amp;amp;channel=Release&amp;amp;version=VS2022&amp;amp;source=VSLandingPage&amp;amp;cid=2030&amp;amp;passive=false">aquí&lt;/a>&lt;/li>
&lt;li>Ejecutar el instalador y seguir los pasos en pantalla hasta la selección de componente, allí debemos seleccionar la opción correspondiente a &lt;strong>.NET MAUI&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/08/10/1.png" alt="">&lt;/li>
&lt;li>Aguardamos que finalice la instalación y listo.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>.NET MAUI&lt;/strong> instalará la última API de Android disponible y preparará Windows 11 para que podamos ejecutar nuestra Applicación.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>MAUI ¿Qué? ¿Por qué? ¿Para qué?</title><link>https://cmas.dev/posts/2022-08-03-maui-some-questions/</link><pubDate>Wed, 03 Aug 2022 22:12:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-08-03-maui-some-questions/</guid><description>&lt;p>En este artículo intentaré explicar o dar a entender que es &lt;strong>.NET MAUI&lt;/strong> y otras cuestiones relacionada a esta plaforma que básicamente reemplaza al viejo conocido de &lt;strong>Xamarin.Forms&lt;/strong>.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25174&lt;/strong>&lt;/em>&lt;/p>
&lt;h2 id="qué-es-net-maui-flutter-es-mejor">¿Qué es .NET MAUI? Flutter es mejor&amp;hellip;&lt;/h2>
&lt;p>&lt;strong>.NET MAUI&lt;/strong> es un marco de trabajo multiplataforma para crear aplicaciones nativas móviles y de escritorio con C# y XAML. Con &lt;strong>.NET MAUI&lt;/strong>, se puede desarrollar aplicaciones que pueden ejecutarse en &lt;em>&lt;strong>Android&lt;/strong>&lt;/em>, &lt;em>&lt;strong>iOS&lt;/strong>&lt;/em>, &lt;em>&lt;strong>macOS&lt;/strong>&lt;/em> y &lt;em>&lt;strong>Windows&lt;/strong>&lt;/em> desde un solo código compartido. Es la evolución de &lt;em>Xamarin.Forms&lt;/em> que amplía las capacidades más allá de los dispositivos móviles.&lt;/p>
&lt;p>&lt;strong>.NET MAUI&lt;/strong> es para desarrolladores que quieren:&lt;/p>
&lt;ol>
&lt;li>Escribir aplicaciones multiplataforma en XAML y C#, desde un solo código compartido en Visual Studio.&lt;/li>
&lt;li>Compartir el diseño y la disposición de la interfaz de usuario entre plataformas.&lt;/li>
&lt;li>Compartir código, pruebas y lógica de negocio entre plataformas.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>.NET MAUI&lt;/strong> proporciona una colección de controles que se pueden usar para mostrar datos, iniciar acciones, indicar actividad, mostrar colecciones, elegir datos y más. Además de una colección de controles, &lt;strong>.NET MAUI&lt;/strong> también ofrece: Un motor de diseño elaborado para diseñar páginas. Un proyecto único compartido que puede apuntar a &lt;em>&lt;strong>Android&lt;/strong>&lt;/em>, &lt;em>&lt;strong>iOS&lt;/strong>&lt;/em>, &lt;em>&lt;strong>macOS&lt;/strong>&lt;/em> y &lt;em>&lt;strong>Windows&lt;/strong>&lt;/em>. Una selección simplificada del objetivo de depuración para ejecutar las aplicaciones &lt;strong>.NET MAUI&lt;/strong>.&lt;/p>
&lt;p>Ya escuché comentarios sobre ¡&lt;em>Flutter&lt;/em> es mucho mejor!. Pero ¿Es realmente así?&lt;/p>
&lt;p>No hay una respuesta definitiva a esta pregunta, ya que depende de las preferencias y necesidades de cada desarrollador y proyecto. Sin embargo, se pueden mencionar algunas diferencias y ventajas de cada plataforma:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Flutter&lt;/strong> usa &lt;strong>Dart&lt;/strong>, un lenguaje desarrollado por &lt;em>Google&lt;/em>, mientras que &lt;strong>.NET MAUI&lt;/strong> usa &lt;strong>C#&lt;/strong>, un lenguaje ampliamente usado en el ecosistema &lt;strong>.NET&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Flutter&lt;/strong> ofrece una interfaz de usuario más rápida y fluida, gracias a su compilación anticipada que reduce el tamaño del código compilado. Además, &lt;strong>Flutter&lt;/strong> soporta &lt;em>Material Design&lt;/em> para &lt;em>&lt;strong>Android&lt;/strong>&lt;/em> y &lt;em>Cupertino&lt;/em> para &lt;em>&lt;strong>iOS&lt;/strong>&lt;/em>, lo que permite crear aplicaciones con aspecto nativo para cada plataforma.&lt;/li>
&lt;li>&lt;strong>.NET MAUI&lt;/strong> es una buena opción para los desarrolladores que ya están familiarizados con la plataforma &lt;strong>.NET&lt;/strong> y quieren crear aplicaciones multiplataforma usando &lt;strong>C#&lt;/strong>. También ofrece una mayor integración con &lt;em>Visual Studio&lt;/em> y otras herramientas de desarrollo.&lt;/li>
&lt;li>&lt;strong>Flutter&lt;/strong> soporta el desarrollo web y &lt;em>Linux&lt;/em>, mientras que &lt;strong>.NET MAUI&lt;/strong> no. Sin embargo, los desarrolladores de &lt;strong>.NET MAUI&lt;/strong> pueden utilizar el marco &lt;em>&lt;strong>Blazor&lt;/strong>&lt;/em> para proporcionar un puente para usar recursos de &lt;strong>MAUI&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;p>En conclusión, ambas plataformas tienen sus pros y contras, y la elección dependerá de factores como el lenguaje de programación preferido, el tipo de aplicación que se quiere crear, el público objetivo y el presupuesto disponible.&lt;/p>
&lt;h2 id="qué-puedo-hacer-con-esto">¿Qué puedo hacer con esto?&lt;/h2>
&lt;p>Con &lt;strong>.NET MAUI&lt;/strong> se puede desarrollar aplicaciones nativas para &lt;strong>Windows&lt;/strong>, &lt;em>macOS&lt;/em>, &lt;em>iOS&lt;/em> y &lt;strong>Android&lt;/strong>, usando un solo código compartido en &lt;strong>C#&lt;/strong> y &lt;strong>XAML&lt;/strong>. Se puede crear aplicaciones que se adapten al aspecto y la funcionalidad de cada plataforma, aprovechando las últimas tecnologías de desarrollo.&lt;/p>
&lt;p>Algunos ejemplos de tipos de aplicaciones que se pueden crear con &lt;strong>.NET MAUI&lt;/strong> son:&lt;/p>
&lt;ul>
&lt;li>Aplicaciones de productividad que permitan gestionar tareas, calendarios, correos electrónicos, etc.&lt;/li>
&lt;li>Aplicaciones de entretenimiento que ofrezcan juegos, música, vídeos, etc.&lt;/li>
&lt;li>Aplicaciones de educación que faciliten el aprendizaje interactivo y el acceso a recursos didácticos.&lt;/li>
&lt;li>Aplicaciones de negocios que integren servicios web, bases de datos, análisis de datos, etc.&lt;/li>
&lt;/ul>
&lt;h2 id="un-poco-de-código">Un poco de código&lt;/h2>
&lt;p>Primero, veamos el código &lt;strong>XAML&lt;/strong> que se utiliza para la visual:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;ContentPage xmlns=&amp;#34;http://schemas.microsoft.com/dotnet/2021/maui&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2009/xaml&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x:Class=&amp;#34;ButtonSample.MainPage&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;StackLayout&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Button Text=&amp;#34;Click Me!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Clicked=&amp;#34;OnCounterClicked&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Label x:Name=&amp;#34;CounterLabel&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text=&amp;#34;Welcome to .NET MAUI!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HorizontalOptions=&amp;#34;Center&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> VerticalOptions=&amp;#34;CenterAndExpand&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/StackLayout&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/ContentPage&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Luego, vemos el código &lt;strong>C#&lt;/strong> para poder realizar las acciones necesarias:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">using Microsoft.Maui;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">using Microsoft.Maui.Controls;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">using Microsoft.Maui.Essentials;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">namespace ButtonSample
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public partial class MainPage : ContentPage
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int count = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public MainPage()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> InitializeComponent();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void OnCounterClicked(object sender, EventArgs e)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> count++;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CounterLabel.Text = $&amp;#34;Contador actual: {count}&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CounterLabel.FontSize = Device.GetNamedSize(NamedSize.Large, typeof(Label));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CounterLabel.TextColor = Color.FromHex(&amp;#34;#FF0000&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conclusión">Conclusión&lt;/h2>
&lt;p>&lt;strong>.NET MAUI&lt;/strong> es una plataforma multiplataforma que ofrece muchas ventajas para los desarrolladores que quieren crear aplicaciones nativas con un solo código compartido en &lt;strong>C#&lt;/strong> y &lt;strong>XAML&lt;/strong>. Sin embargo, también tiene algunos inconvenientes y limitaciones que se debe tener en cuenta.&lt;/p>
&lt;p>En este contexto, se recomienda &lt;strong>.NET MAUI&lt;/strong> si:&lt;/p>
&lt;ul>
&lt;li>Ya se tiene experiencia con la plataforma &lt;strong>.NET&lt;/strong> y el lenguaje &lt;strong>C#&lt;/strong>.&lt;/li>
&lt;li>Se quiere crear aplicaciones para &lt;strong>Windows&lt;/strong>, &lt;em>macOS&lt;/em>, &lt;em>iOS&lt;/em> y &lt;strong>Android&lt;/strong> con una interfaz de usuario consistente y personalizable.&lt;/li>
&lt;li>Se quiere aprovechar las herramientas de desarrollo de &lt;em>Visual Studio&lt;/em> y otras librerías del ecosistema &lt;strong>.NET&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>No se recomienda &lt;strong>.NET MAUI&lt;/strong> si:&lt;/p>
&lt;ul>
&lt;li>Se prefiere usar otro lenguaje de programación como &lt;em>Dart&lt;/em> o &lt;em>JavaScript&lt;/em>.&lt;/li>
&lt;li>Se quiere crear aplicaciones web o para &lt;em>Linux&lt;/em> sin usar &lt;strong>Blazor&lt;/strong>.&lt;/li>
&lt;li>Se quiere usar las últimas características y tecnologías de cada plataforma nativa.&lt;/li>
&lt;/ul>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>MAUI on WSA</title><link>https://cmas.dev/posts/2022-07-27-maui-in-wsa/</link><pubDate>Wed, 27 Jul 2022 19:16:00 -0400</pubDate><author>biz@cmas.dev (Christian Amado)</author><guid>https://cmas.dev/posts/2022-07-27-maui-in-wsa/</guid><description>&lt;p>En este artículo mostraré cómo ejecutar una aplicación &lt;strong>.NET MAUI&lt;/strong> sobre &lt;strong>Windows Subsystem for Android&lt;/strong>.&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25163&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Normalmente, utilizamos un emulador de Android para poder ejecutar y depurar nuestas aplicaciones para esta plataforma. En este caso, ejecutaremos nuestra aplicación en &lt;strong>WSA (Windows Subsystem for Android)&lt;/strong>.&lt;/p>
&lt;h2 id="preparar-el-proyecto">Preparar el proyecto&lt;/h2>
&lt;p>Primeramente, debemos crear el poryecto &lt;strong>.NET MAUI&lt;/strong> y tenerlo listo para la plataforma &lt;strong>Android&lt;/strong>:&lt;/p>
&lt;ol>
&lt;li>Creamos el proyecto en Visual Studio 2022:
&lt;img src="https://cmas.dev/img/posts/2022/07/27/1.png" alt="">&lt;/li>
&lt;li>Colocamos un nombre descriptivo al proyecto nuevo:
&lt;img src="https://cmas.dev/img/posts/2022/07/27/2.png" alt="">&lt;/li>
&lt;li>Seleccionamos el .NET Core que deseamos utilizar:
&lt;img src="https://cmas.dev/img/posts/2022/07/27/3.png" alt="">&lt;/li>
&lt;li>Verificamos las opciones habilitadas (nos interesa Android):
&lt;img src="https://cmas.dev/img/posts/2022/07/27/4.png" alt="">&lt;/li>
&lt;/ol>
&lt;h2 id="configurar-wsa">Configurar WSA&lt;/h2>
&lt;p>Procedemos a configurar la máquina virtual para poder utilizarla&lt;/p>
&lt;ol>
&lt;li>En la configuración de &lt;strong>WSA&lt;/strong>, verificamos la IP y puerto para conectarnos:
&lt;img src="https://cmas.dev/img/posts/2022/07/27/5.png" alt="">&lt;/li>
&lt;li>Ejecutamos la consola de Android desde Visual Studio:
&lt;img src="https://cmas.dev/img/posts/2022/07/27/6.png" alt="">&lt;/li>
&lt;li>Ejecutamos el siguiente comando:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">adb connect 127.0.0.1:58526
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Verificamos la conexión realizada:
&lt;img src="https://cmas.dev/img/posts/2022/07/27/7.png" alt="">&lt;/li>
&lt;li>En visual Studio, veremos el nuevo dispositivo:
&lt;img src="https://cmas.dev/img/posts/2022/07/27/8.png" alt="">&lt;/li>
&lt;li>Ejecutamos la aplicación y la veremos en &lt;strong>WSA&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/07/27/9.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>¡Espero resulte útil!&lt;/p></description></item></channel></rss>