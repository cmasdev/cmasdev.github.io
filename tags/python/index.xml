<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Christian Amado's Blog</title><link>https://cmas.dev/tags/python/</link><description>Recent content in Python on Christian Amado's Blog</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Fri, 14 Jun 2024 00:00:00 -0400</lastBuildDate><atom:link href="https://cmas.dev/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Deno, Go y Python en WSL2 para flujos mixtos de backend + AI</title><link>https://cmas.dev/posts/2024-06-14-wsl2-backend-ai/</link><pubDate>Fri, 14 Jun 2024 00:00:00 -0400</pubDate><guid>https://cmas.dev/posts/2024-06-14-wsl2-backend-ai/</guid><description>&lt;p>Combinar lenguajes modernos como &lt;strong>Deno&lt;/strong>, &lt;strong>Go&lt;/strong> y &lt;strong>Python&lt;/strong> permite crear soluciones backend de alto rendimiento con componentes de inteligencia artificial de forma modular y eficiente. Gracias a &lt;strong>WSL2&lt;/strong>, es posible configurar este stack en Linux desde Windows, integrando herramientas, librerías y entornos de ejecución en un mismo flujo de trabajo.&lt;/p>
&lt;h2 id="-objetivo">🎯 Objetivo&lt;/h2>
&lt;ul>
&lt;li>Instalar Deno, Go y Python en WSL2&lt;/li>
&lt;li>Ejecutar servidores backend ligeros con Deno y Go&lt;/li>
&lt;li>Usar Python para lógica de IA (modelo, predicción)&lt;/li>
&lt;li>Comunicar los componentes entre sí usando HTTP/REST&lt;/li>
&lt;/ul>
&lt;h2 id="-paso-1-instalar-entornos-en-wsl2">⚙️ Paso 1: Instalar entornos en WSL2&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Python&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo apt install -y python3 python3-pip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Go&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install -y golang
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Deno&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -fsSL https://deno.land/install.sh &lt;span class="p">|&lt;/span> sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export DENO_INSTALL=&amp;#34;$HOME/.deno&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export PATH=&amp;#34;$DENO_INSTALL/bin:$PATH&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Verificar versiones:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">python3 --version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deno --version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-paso-2-crear-backend-http-con-deno">🧪 Paso 2: Crear backend HTTP con Deno&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// api.ts
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">serve&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;https://deno.land/std@0.178.0/http/server.ts&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">serve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hola desde Deno API&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">port&lt;/span>: &lt;span class="kt">8000&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ejecutar:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">deno run --allow-net api.ts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-paso-3-crear-servicio-go-para-procesamiento">⚙️ Paso 3: Crear servicio Go para procesamiento&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// server.go
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ResponseWriter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Hola desde Go service&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ListenAndServe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;:8080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Compilar y correr:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">go run server.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-paso-4-python-como-motor-de-ia">🤖 Paso 4: Python como motor de IA&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># model.py&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">flask&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Flask&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jsonify&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Flask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@app.route&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/predict&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">methods&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;POST&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">predict&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;input&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pred&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log1p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># lógica simulada&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">jsonify&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="s1">&amp;#39;result&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">pred&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tolist&lt;/span>&lt;span class="p">()})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Instalar dependencias y correr:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pip install flask numpy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python3 model.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-paso-5-comunicación-entre-servicios">🔗 Paso 5: Comunicación entre servicios&lt;/h2>
&lt;p>Desde Deno o Go se puede consumir el endpoint de Python:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">curl -X POST http://localhost:5000/predict -H &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> -d &lt;span class="s1">&amp;#39;{&amp;#34;input&amp;#34;: [1, 2, 3]}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Respuesta:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;result&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mf">0.6931&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0986&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.3862&lt;/span>&lt;span class="p">]}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-conclusión">✅ Conclusión&lt;/h2>
&lt;p>Con WSL2 es posible combinar de forma eficiente lenguajes especializados para backend (Go, Deno) y lógica de IA (Python), manteniendo un entorno ligero y modular. Esta arquitectura híbrida mejora la productividad y facilita el mantenimiento en equipos multidisciplinarios que desarrollan APIs inteligentes.&lt;/p></description></item><item><title>Django sobre WSL</title><link>https://cmas.dev/posts/2022-12-21-django-on-wsl/</link><pubDate>Wed, 21 Dec 2022 19:39:00 -0400</pubDate><guid>https://cmas.dev/posts/2022-12-21-django-on-wsl/</guid><description>&lt;p>En este corto artículo veremos cómo desarrollar sobre &lt;strong>WSL (Windows Subsystem for Linux)&lt;/strong> con &lt;strong>Python&lt;/strong> y &lt;strong>Django&lt;/strong>. Ya hemos visto que lo podemos hacer con &lt;a href="https://cmas.dev/posts/2022-06-29-java-with-wsl-part-2/">Java&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25267&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;strong>WSL&lt;/strong> nos ofrece demasiadas ventajas a la hora de desarrollar software sobre el sistema operativo Linux, en este caso &lt;strong>Ubuntu&lt;/strong>. Hoy en día Python es un lenguaje demasiado difundido y muy utilizado en varios ámbitos, con sus ventajas y desventajas como todas las plataformas existentes. A eso le sumaron un Framework muy potente y completo &amp;ldquo;&lt;strong>Django&lt;/strong>&amp;rdquo;.&lt;/p>
&lt;p>Aquí veremos como instalar y ejecutar una aplicación web &lt;strong>Django&lt;/strong> utilizando &lt;strong>Visual Studio Code&lt;/strong>.&lt;/p>
&lt;h2 id="instalar-django-en-wslubuntu">Instalar Django en &lt;strong>WSL:Ubuntu&lt;/strong>&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Abrimos &lt;strong>Windows Terminal&lt;/strong> con el perfil &lt;strong>Ubuntu&lt;/strong>:
&lt;img src="https://cmas.dev/img/posts/2022/12/21/1.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Procedemos a instalar &lt;strong>Django&lt;/strong> con el siguiente comando:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt install python3-django
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>
&lt;p>Seguimos las instrucciones en pantalla y listo.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Verificamos la instalación con el siguiente comando:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">django-admin --version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cmas.dev/img/posts/2022/12/21/2.png" alt="">&lt;/p>
&lt;h2 id="crear-proyecto-django-y-empezar-a-trabajar">Crear proyecto Django y empezar a trabajar&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Ir a la carpeta donde debe estar nuestro proyecto:
&lt;img src="https://cmas.dev/img/posts/2022/12/21/3.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Crear un ambiente virtual de &lt;strong>Python&lt;/strong>:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ python3 -m venv pythonTest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Activar el ambiente virtual:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ source pythonTest/bin/activate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Instalar &lt;strong>Django&lt;/strong> en el ambiente virtual:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(pythonTest) $ pip install django
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Se crea el proyecto en la carpeta actual:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(pythonTest) $ django-admin startproject testproject .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>Migramos la base de datos inicial:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(pythonTest) $ python manage.py migrate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="7">
&lt;li>Se crea la administracion de la Web:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(pythonTest) $ python manage.py createsuperuser
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="8">
&lt;li>
&lt;p>Completamos los datos y listo:
&lt;img src="https://cmas.dev/img/posts/2022/12/21/4.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Abrimos la carpeta donde alojamos el proyecto y empezamos a desarrollar:
&lt;img src="https://cmas.dev/img/posts/2022/12/21/5.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Activamos el ambiernte virtual de Python y ejecutamos el servidor de Django:
&lt;img src="https://cmas.dev/img/posts/2022/12/21/6.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Veremos la página principal de Django:
&lt;img src="https://cmas.dev/img/posts/2022/12/21/7.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Si accedemos a la URL con el contexto &lt;em>/admin&lt;/em> veremos lo siguiente:
&lt;img src="https://cmas.dev/img/posts/2022/12/21/8.png" alt="">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cmas.dev/img/posts/2022/12/21/9.png" alt="">&lt;/p>
&lt;p>Listo para desarrollar aplicaciones web con &lt;strong>Django&lt;/strong> y &lt;strong>Python&lt;/strong> sobre &lt;strong>Visual Studio Code&lt;/strong> y &lt;strong>WSL&lt;/strong>.&lt;/p>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Desarrollo con Python sobre WSL</title><link>https://cmas.dev/posts/2022-12-14-developing-python-on-wsl/</link><pubDate>Wed, 14 Dec 2022 21:12:00 -0400</pubDate><guid>https://cmas.dev/posts/2022-12-14-developing-python-on-wsl/</guid><description>&lt;p>En este corto artículo veremos cómo desarrollar sobre &lt;strong>WSL (Windows Subsystem for Linux)&lt;/strong> con &lt;strong>Python&lt;/strong>. Ya hemos visto que lo podemos hacer con &lt;a href="https://cmas.dev/posts/2022-06-29-java-with-wsl-part-2/">Java&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Windows 11 Insider Preview Build 25267&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;strong>WSL&lt;/strong> nos ofrece demasiadas ventajas a la hora de desarrollar software sobre el sistema operativo Linux, en este caso &lt;strong>Ubuntu&lt;/strong>. Hoy en día Python es un lenguaje demasiado difundido y muy utilizado en varios ámbitos, con sus ventajas y desventajas como todas las plataformas existentes.&lt;/p>
&lt;p>Aquí veremos como instalar y ejecutar un pequeño código utilizando &lt;strong>Visual Studio Code&lt;/strong>.&lt;/p>
&lt;h2 id="python-en-wsl">Python en WSL&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Abrimos Visual Studio Code (pero en WSL):
&lt;img src="https://cmas.dev/img/posts/2022/12/14/1.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>En extensiones, buscamos &amp;ldquo;python&amp;rdquo; y lo instalamos (el fabricante debe ser Microsoft):
&lt;img src="https://cmas.dev/img/posts/2022/12/14/2.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Luego de la instalación, procedemos a crear un nuevo archivo:
&lt;img src="https://cmas.dev/img/posts/2022/12/14/3.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Seleccionamos el archivo de tipo Python, colocamos en el lugar de preferencia (dentro del WSL):
&lt;img src="https://cmas.dev/img/posts/2022/12/14/4.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Crear un archivo nuevo &lt;strong>pythonTest.py&lt;/strong> (en mi caso) y escribir el siguiente código.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">print(&amp;#34;Hello, World from VS Code and WSL&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>
&lt;p>Casi hacemos &lt;em>F5&lt;/em> pero notamos que falta algo:
&lt;img src="https://cmas.dev/img/posts/2022/12/14/5.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Seleccionamos el Intérprete recomendado:
&lt;img src="https://cmas.dev/img/posts/2022/12/14/6.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Seleccionamos la configuración del depurador (porque es un archivo suelto):
&lt;img src="https://cmas.dev/img/posts/2022/12/14/7.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ejecutamos nuestro archivo &lt;strong>.py&lt;/strong> y listo:
&lt;img src="https://cmas.dev/img/posts/2022/12/14/8.png" alt="">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>¡Espero resulte útil!&lt;/p></description></item><item><title>Python: Instalando en Visual Studio Code</title><link>https://cmas.dev/posts/2019-04-04-python-instalando-en-visual-studio-code/</link><pubDate>Thu, 04 Apr 2019 20:19:30 -0400</pubDate><guid>https://cmas.dev/posts/2019-04-04-python-instalando-en-visual-studio-code/</guid><description>&lt;p>En esta entrada veremos cómo instalar Python para utilizarlo con nuestro IDE favorito, el Visual Studio Code. En una &lt;a href="https://cmas.dev/2019/04/python-instalacion/">entrada anterior&lt;/a>, hemos visto cómo instalar Python en uestro Windows.&lt;/p>
&lt;h2 id="instalación-de-python">Instalación de Python&lt;/h2>
&lt;p>Para la instalación de Python debemos realizar las siguientes tareas:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Luego de abrir Visual Studio Code, debemos hacer clic en &amp;ldquo;Open Folder&amp;rdquo;:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/1-1.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Seleccionamos la carpeta donde generaremos los archivos necesarios (VS en este caso):&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/2-1.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nos dirigimos al área de &lt;strong>Extensiones&lt;/strong> y nos posicionamos en el cuadro de búsqueda:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/3-1.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Buscamos &amp;ldquo;python&amp;rdquo; y hacemos clic en &amp;ldquo;Instalar&amp;rdquo;:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/4-1.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nos mostrará el mensaje de &amp;ldquo;Instalando&amp;rdquo;:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/5-1.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Si todo va bien, mostrará que ya está &amp;ldquo;Instalado&amp;rdquo;:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/6-1.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>En el menú &amp;ldquo;Ver&amp;rdquo; buscamos la &amp;ldquo;Paleta de comando&amp;rdquo;:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/7-1.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Buscamos la opción &amp;ldquo;Python: Seleccionar intérprete&amp;rdquo;:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/8-1.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hacemos clic en le botón correspondiente:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/9.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Seleccionamos el intérprete instalado:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/10.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>En la &amp;ldquo;Paleta de comando&amp;rdquo; seleccionamos &amp;ldquo;Python: Seleccionar Linker&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Seleccionamos la opción &amp;ldquo;pylint&amp;rdquo;:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/12.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>En el explorador de archivos creamos un nuevo archivo:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/13.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Le llamamos &lt;strong>prueba.py&lt;/strong>:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/14.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Colocamos un código python de prueba:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">mensaje = &amp;#39;prueba de mensaje&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(mensaje)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="30">
&lt;li>
&lt;p>Hacemos clic derecho en cualquier lugar del archivo y seleccionamos la siguiente opción:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/15.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nos mostrará la ejecución del programa en la terminal del Visual Studio Code:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/16.png" alt="">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>De esta manera, tenemos instalada la extensión de Python dentro de Visual Studio Code haciendo mucho más sencillo el desarrollo y la depuración del programa que estemos realizando.&lt;/p></description></item><item><title>Python: Instalación</title><link>https://cmas.dev/posts/2019-04-02-python-instalacion/</link><pubDate>Tue, 02 Apr 2019 19:13:52 -0400</pubDate><guid>https://cmas.dev/posts/2019-04-02-python-instalacion/</guid><description>&lt;p>A partir de hoy, volveré a escribir artículos referentes a desarrollo de software. Además de aplicaciones de negocios me apasiona lo referente al mundo del desarrollo. ¡Así que manos a la obra!&lt;/p>
&lt;p>Primeramente, debemos conocer lo que es Python y para tal motivio podemos &lt;a href="https://wiki.python.org/moin/BeginnersGuide">ver la documentación oficial del lenguaje&lt;/a>.&lt;/p>
&lt;p>En esta entrada veremos cómo instalar Python y realizar una pequeña prueba.&lt;/p>
&lt;h2 id="instalando-python">Instalando Python&lt;/h2>
&lt;p>Para la instalación de Python debemos realizar las siguientes tareas:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Nos dirigimos al sitio web oficial de Python, específicamente en la sección de descarga, y &lt;a href="https://www.python.org/downloads/">descargamos la última versión estable disponible&lt;/a>. Al momento de escribir esta entrada la versión estable es: &lt;strong>3.7.3&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Procedemos con la instalación del archivo descargado. Debemos seleccionar ambas opciones para que Python sea reconocido de manera nativa en el &lt;strong>cmd (línea de comandos) de Windows&lt;/strong>:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/1.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Seleccionamos las opciones que deseamos habilitar (para mí es mejor seleccionar todas):&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/2.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Seleccionar los parámetros avanzados que deseamos (también seleccionaría todos):&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/3.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>La instalación muestra el avance:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/4.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Por último, se muestra el mensaje de instalación exitosa (o fallida si pasó algo por el camino):&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/5.png" alt="">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="probando-el-entorno">Probando el entorno&lt;/h2>
&lt;p>Para realizar una prueba lo podemos hacer abriendo el programa IDLE de Python. Y seguir estos sencillos pasos:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Abriendo el programa:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/6.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Una vez abierto el programa, escribimos el código:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/7.png" alt="">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">print(&amp;#39;Hola mundo&amp;#39;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Al presionar la tecla &amp;ldquo;Enter&amp;rdquo; mostrará el mensaje:&lt;br>
&lt;img src="https://cmas.dev/img/posts/migrated/2019/04/8.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>De esta manera, muy sencilla y rápida, hemos instalado y probado Python en Windows&lt;/p></description></item></channel></rss>